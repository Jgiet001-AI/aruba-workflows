{
  "name": "Aruba Central AP Provisioning",
  "active": false,
  "nodes": [
    {
      "parameters": {
        "options": {}
      },
      "id": "f1d84a79-7f5d-47d1-8f2e-9a3b4c5d6e7f",
      "name": "Manual Trigger",
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [240, 300],
      "webhookId": "ap-provisioning-manual"
    },
    {
      "parameters": {
        "functionCode": "// Comprehensive AP Provisioning Input Validation\nconst items = $input.all();\n\n// Define required parameters and validation rules\nconst inputParams = items[0].json;\n\n// Operation types supported\nconst validOperations = [\n    \"provision_ap\", \"create_template\", \"deploy_template\", \n    \"create_group\", \"move_ap\", \"firmware_update\", \"zero_touch_setup\"\n];\n\n// AP models supported\nconst validApModels = [\n    \"AP-505\", \"AP-515\", \"AP-535\", \"AP-555\", \"AP-575\", \n    \"AP-615\", \"AP-635\", \"AP-655\", \"AP-675\", \"AP-685\"\n];\n\n// Environment templates available\nconst environmentTemplates = {\n    \"office\": {\n        \"description\": \"Standard corporate office settings\",\n        \"features\": [\"standard_security\", \"corporate_ssid\", \"guest_access\"],\n        \"radio_config\": {\n            \"power_level\": \"medium\",\n            \"channel_width\": \"80MHz\",\n            \"band_steering\": true\n        }\n    },\n    \"retail\": {\n        \"description\": \"High density retail environment\",\n        \"features\": [\"high_density\", \"guest_portal\", \"pos_support\"],\n        \"radio_config\": {\n            \"power_level\": \"high\",\n            \"channel_width\": \"40MHz\",\n            \"client_limit\": 100\n        }\n    },\n    \"healthcare\": {\n        \"description\": \"Secure healthcare with IoT support\",\n        \"features\": [\"enhanced_security\", \"iot_support\", \"location_services\"],\n        \"radio_config\": {\n            \"power_level\": \"medium\",\n            \"location_services\": true,\n            \"iot_radio\": true\n        }\n    },\n    \"education\": {\n        \"description\": \"Multi-SSID education environment\",\n        \"features\": [\"multi_ssid\", \"byod_support\", \"content_filtering\"],\n        \"radio_config\": {\n            \"power_level\": \"high\",\n            \"multiple_ssid\": true,\n            \"bandwidth_control\": true\n        }\n    },\n    \"warehouse\": {\n        \"description\": \"Extended range warehouse settings\",\n        \"features\": [\"extended_range\", \"rugged_settings\", \"minimal_ssid\"],\n        \"radio_config\": {\n            \"power_level\": \"maximum\",\n            \"channel_width\": \"20MHz\",\n            \"coverage_optimization\": true\n        }\n    },\n    \"hospitality\": {\n        \"description\": \"Guest portal and captive portal\",\n        \"features\": [\"guest_portal\", \"captive_portal\", \"bandwidth_control\"],\n        \"radio_config\": {\n            \"power_level\": \"medium\",\n            \"guest_isolation\": true,\n            \"rate_limiting\": true\n        }\n    }\n};\n\n// Group templates\nconst groupTemplates = {\n    \"location_based\": {\n        \"pattern\": \"{building}-{floor}-{area}\",\n        \"example\": \"HQ-02-West\"\n    },\n    \"function_based\": {\n        \"pattern\": \"{function}-{location}\",\n        \"example\": \"Corporate-HQ\"\n    },\n    \"model_based\": {\n        \"pattern\": \"{model}-{environment}\",\n        \"example\": \"AP515-Indoor\"\n    }\n};\n\n// Validation functions\nfunction validateSerialNumber(serial) {\n    return /^[A-Z0-9]{12}$/.test(serial);\n}\n\nfunction validateMacAddress(mac) {\n    return /^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$/.test(mac);\n}\n\nfunction validateApModel(model) {\n    return validApModels.includes(model);\n}\n\nfunction validateOperation(operation) {\n    return validOperations.includes(operation);\n}\n\n// Perform validations\nconst validationErrors = [];\nconst validatedParams = {};\n\n// Required parameters validation\nif (!inputParams.operation || !validateOperation(inputParams.operation)) {\n    validationErrors.push(`Invalid operation. Must be one of: ${validOperations.join(\", \")}`);\n} else {\n    validatedParams.operation = inputParams.operation;\n}\n\n// Operation-specific validations\nswitch (inputParams.operation) {\n    case \"provision_ap\":\n    case \"move_ap\":\n    case \"firmware_update\":\n        if (!inputParams.ap_serial || !validateSerialNumber(inputParams.ap_serial)) {\n            validationErrors.push(\"ap_serial is required and must be 12 alphanumeric characters\");\n        } else {\n            validatedParams.ap_serial = inputParams.ap_serial;\n        }\n        break;\n        \n    case \"zero_touch_setup\":\n        if (inputParams.ap_mac && !validateMacAddress(inputParams.ap_mac)) {\n            validationErrors.push(\"ap_mac must be in valid MAC address format\");\n        }\n        if (inputParams.ap_mac) validatedParams.ap_mac = inputParams.ap_mac;\n        break;\n}\n\n// AP model validation (if provided)\nif (inputParams.ap_model) {\n    if (!validateApModel(inputParams.ap_model)) {\n        validationErrors.push(`Invalid AP model. Must be one of: ${validApModels.join(\", \")}`);\n    } else {\n        validatedParams.ap_model = inputParams.ap_model;\n    }\n}\n\n// Site and location parameters\nif (inputParams.site_name) {\n    if (inputParams.site_name.length < 2 || inputParams.site_name.length > 50) {\n        validationErrors.push(\"site_name must be between 2 and 50 characters\");\n    } else {\n        validatedParams.site_name = inputParams.site_name;\n    }\n}\n\nif (inputParams.floor_name) {\n    if (inputParams.floor_name.length < 1 || inputParams.floor_name.length > 30) {\n        validationErrors.push(\"floor_name must be between 1 and 30 characters\");\n    } else {\n        validatedParams.floor_name = inputParams.floor_name;\n    }\n}\n\n// Group and template parameters\nif (inputParams.ap_group) {\n    if (inputParams.ap_group.length < 2 || inputParams.ap_group.length > 64) {\n        validationErrors.push(\"ap_group must be between 2 and 64 characters\");\n    } else {\n        validatedParams.ap_group = inputParams.ap_group;\n    }\n}\n\nif (inputParams.template_name) {\n    validatedParams.template_name = inputParams.template_name;\n}\n\n// Environment template validation\nif (inputParams.environment_template) {\n    if (!environmentTemplates[inputParams.environment_template]) {\n        validationErrors.push(`Invalid environment_template. Must be one of: ${Object.keys(environmentTemplates).join(\", \")}`);\n    } else {\n        validatedParams.environment_template = inputParams.environment_template;\n        validatedParams.template_config = environmentTemplates[inputParams.environment_template];\n    }\n}\n\n// Firmware version validation\nif (inputParams.firmware_version) {\n    if (!/^\\d+\\.\\d+\\.\\d+/.test(inputParams.firmware_version)) {\n        validationErrors.push(\"firmware_version must be in format X.Y.Z\");\n    } else {\n        validatedParams.firmware_version = inputParams.firmware_version;\n    }\n}\n\n// Auto naming and convention\nif (inputParams.auto_naming !== undefined) {\n    validatedParams.auto_naming = Boolean(inputParams.auto_naming);\n}\n\nif (inputParams.naming_convention) {\n    validatedParams.naming_convention = inputParams.naming_convention;\n}\n\n// Central API parameters\nvalidatedParams.central_base_url = inputParams.central_base_url || \"https://apigw-uswest4.central.arubanetworks.com\";\nvalidatedParams.customer_id = inputParams.customer_id || \"default\";\n\n// Default configuration\nif (inputParams.default_config !== undefined) {\n    validatedParams.default_config = Boolean(inputParams.default_config);\n}\n\n// Return validation results\nif (validationErrors.length > 0) {\n    return [{\n        json: {\n            validation_status: \"failed\",\n            errors: validationErrors,\n            input_received: inputParams\n        }\n    }];\n} else {\n    return [{\n        json: {\n            validation_status: \"passed\",\n            validated_params: validatedParams,\n            environment_templates: environmentTemplates,\n            group_templates: groupTemplates,\n            supported_operations: validOperations,\n            supported_ap_models: validApModels\n        }\n    }];\n}"
      },
      "id": "a2b3c4d5-6e7f-8901-2345-6789abcdef01",
      "name": "Validate Input Parameters",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [460, 300]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{$json.validation_status}}",
              "value2": "passed"
            }
          ]
        }
      },
      "id": "b3c4d5e6-7f89-0123-4567-89abcdef0123",
      "name": "Check Validation",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [680, 300]
    },
    {
      "parameters": {
        "channel": "#network-alerts",
        "text": "ðŸš¨ AP Provisioning Validation Failed\\n\\n*Errors:*\\n{{$json.errors.join(\"\\nâ€¢ \")}}\\n\\n*Operation:* {{$json.input_received.operation}}\\n*Timestamp:* {{$now}}"
      },
      "id": "c4d5e6f7-8901-2345-6789-abcdef012345",
      "name": "Validation Error Alert",
      "type": "n8n-nodes-base.slack",
      "typeVersion": 1,
      "position": [680, 480]
    },
    {
      "parameters": {
        "functionCode": "// Route to appropriate operation based on validated input\nconst item = $input.first().json;\nconst params = item.validated_params;\n\n// Create routing information\nconst routingInfo = {\n    operation: params.operation,\n    route_to: params.operation,\n    parameters: params,\n    timestamp: new Date().toISOString()\n};\n\nswitch (params.operation) {\n    case \"provision_ap\":\n        routingInfo.description = \"Provision new access point with configuration\";\n        routingInfo.required_apis = [\"device_inventory\", \"ap_groups\", \"configuration\"];\n        break;\n        \n    case \"create_template\":\n        routingInfo.description = \"Create new AP configuration template\";\n        routingInfo.required_apis = [\"templates\", \"ap_groups\"];\n        break;\n        \n    case \"deploy_template\":\n        routingInfo.description = \"Deploy template to AP or group\";\n        routingInfo.required_apis = [\"templates\", \"configuration\"];\n        break;\n        \n    case \"create_group\":\n        routingInfo.description = \"Create new AP group with settings\";\n        routingInfo.required_apis = [\"ap_groups\"];\n        break;\n        \n    case \"move_ap\":\n        routingInfo.description = \"Move AP to different group\";\n        routingInfo.required_apis = [\"device_management\", \"ap_groups\"];\n        break;\n        \n    case \"firmware_update\":\n        routingInfo.description = \"Update AP firmware version\";\n        routingInfo.required_apis = [\"device_management\", \"firmware\"];\n        break;\n        \n    case \"zero_touch_setup\":\n        routingInfo.description = \"Automated zero-touch AP provisioning\";\n        routingInfo.required_apis = [\"device_inventory\", \"templates\", \"ap_groups\"];\n        break;\n        \n    default:\n        routingInfo.description = \"Unknown operation\";\n        routingInfo.error = \"Unsupported operation type\";\n}\n\nreturn [{ json: routingInfo }];"
      },
      "id": "d5e6f789-0123-4567-89ab-cdef01234567",
      "name": "Route Operation",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [900, 200]
    },
    {
      "parameters": {
        "url": "={{$json.parameters.central_base_url}}/platform/device_inventory/v1/devices",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "arubaApi",
        "options": {
          "timeout": 30000,
          "retry": {
            "maxTries": 3,
            "waitBetweenTries": 2000
          }
        },
        "headers": {
          "Accept": "application/json",
          "Content-Type": "application/json"
        }
      },
      "id": "e6f78901-2345-6789-abcd-ef0123456789",
      "name": "Get Device Inventory",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [1120, 100]
    },
    {
      "parameters": {
        "url": "={{$json.parameters.central_base_url}}/monitoring/v1/aps",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "arubaApi",
        "options": {
          "timeout": 30000,
          "retry": {
            "maxTries": 3,
            "waitBetweenTries": 2000
          }
        },
        "headers": {
          "Accept": "application/json",
          "Content-Type": "application/json"
        }
      },
      "id": "f7890123-4567-89ab-cdef-0123456789ab",
      "name": "Get AP Status",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [1120, 200]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{$json.parameters.central_base_url}}/configuration/v2/ap_groups",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "arubaApi",
        "options": {
          "timeout": 30000,
          "retry": {
            "maxTries": 3,
            "waitBetweenTries": 2000
          }
        },
        "headers": {
          "Accept": "application/json",
          "Content-Type": "application/json"
        },
        "body": {
          "group_name": "={{$json.parameters.ap_group}}",
          "group_attributes": {
            "template_info": {
              "Wired": {
                "template_name": "={{$json.parameters.template_name || 'default-template'}}",\n                \"version\": 1\n              },\n              \"Wireless\": {\n                \"template_name\": \"={{$json.parameters.template_name || 'default-wireless-template'}}\",\n                \"version\": 1\n              }\n            },\n            \"group_properties\": {\n              \"AllowedDevTypes\": [\"IAP\"],\n              \"Architecture\": \"Instant\",\n              \"MonitorOnlySwitch\": false\n            }\n          }\n        }\n      },\n      \"id\": \"89012345-6789-abcd-ef01-23456789abcd\",\n      \"name\": \"Create AP Group\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"typeVersion\": 3,\n      \"position\": [1120, 300]\n    },\n    {\n      \"parameters\": {\n        \"method\": \"PUT\",\n        \"url\": \"={{$json.parameters.central_base_url}}/device_management/v1/device/{{$json.parameters.ap_serial}}/group\",\n        \"authentication\": \"predefinedCredentialType\",\n        \"nodeCredentialType\": \"arubaApi\",\n        \"options\": {\n          \"timeout\": 30000,\n          \"retry\": {\n            \"maxTries\": 3,\n            \"waitBetweenTries\": 2000\n          }\n        },\n        \"headers\": {\n          \"Accept\": \"application/json\",\n          \"Content-Type\": \"application/json\"\n        },\n        \"body\": {\n          \"group\": \"={{$json.parameters.ap_group}}\"\n        }\n      },\n      \"id\": \"90123456-789a-bcde-f012-3456789abcde\",\n      \"name\": \"Move AP to Group\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"typeVersion\": 3,\n      \"position\": [1120, 400]\n    },\n    {\n      \"parameters\": {\n        \"method\": \"PUT\",\n        \"url\": \"={{$json.parameters.central_base_url}}/configuration/v2/ap_groups/{{$json.parameters.ap_group}}/template\",\n        \"authentication\": \"predefinedCredentialType\",\n        \"nodeCredentialType\": \"arubaApi\",\n        \"options\": {\n          \"timeout\": 30000,\n          \"retry\": {\n            \"maxTries\": 3,\n            \"waitBetweenTries\": 2000\n          }\n        },\n        \"headers\": {\n          \"Accept\": \"application/json\",\n          \"Content-Type\": \"application/json\"\n        },\n        \"body\": {\n          \"template_info\": {\n            \"Wired\": {\n              \"template_name\": \"={{$json.parameters.template_name}}\",\n              \"version\": 1\n            },\n            \"Wireless\": {\n              \"template_name\": \"={{$json.parameters.template_name}}-wireless\",\n              \"version\": 1\n            }\n          }\n        }\n      },\n      \"id\": \"01234567-89ab-cdef-0123-456789abcdef\",\n      \"name\": \"Deploy Template\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"typeVersion\": 3,\n      \"position\": [1120, 500]\n    },\n    {\n      \"parameters\": {\n        \"method\": \"POST\",\n        \"url\": \"={{$json.parameters.central_base_url}}/device_management/v1/device/firmware\",\n        \"authentication\": \"predefinedCredentialType\",\n        \"nodeCredentialType\": \"arubaApi\",\n        \"options\": {\n          \"timeout\": 60000,\n          \"retry\": {\n            \"maxTries\": 3,\n            \"waitBetweenTries\": 5000\n          }\n        },\n        \"headers\": {\n          \"Accept\": \"application/json\",\n          \"Content-Type\": \"application/json\"\n        },\n        \"body\": {\n          \"device_type\": \"IAP\",\n          \"firmware_version\": \"={{$json.parameters.firmware_version}}\",\n          \"device_list\": [\"={{$json.parameters.ap_serial}}\"],\n          \"reboot\": true,\n          \"when\": \"immediate\"\n        }\n      },\n      \"id\": \"12345678-9abc-def0-1234-56789abcdef0\",\n      \"name\": \"Update Firmware\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"typeVersion\": 3,\n      \"position\": [1120, 600]\n    },\n    {\n      \"parameters\": {\n        \"url\": \"={{$json.parameters.central_base_url}}/device_management/v1/device/firmware/status\",\n        \"authentication\": \"predefinedCredentialType\",\n        \"nodeCredentialType\": \"arubaApi\",\n        \"options\": {\n          \"timeout\": 30000,\n          \"retry\": {\n            \"maxTries\": 5,\n            \"waitBetweenTries\": 10000\n          }\n        },\n        \"headers\": {\n          \"Accept\": \"application/json\",\n          \"Content-Type\": \"application/json\"\n        }\n      },\n      \"id\": \"23456789-abcd-ef01-2345-6789abcdef01\",\n      \"name\": \"Check Firmware Status\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"typeVersion\": 3,\n      \"position\": [1340, 600]\n    },\n    {\n      \"parameters\": {\n        \"method\": \"PUT\",\n        \"url\": \"={{$json.parameters.central_base_url}}/configuration/v1/devices/{{$json.parameters.ap_serial}}/configuration\",\n        \"authentication\": \"predefinedCredentialType\",\n        \"nodeCredentialType\": \"arubaApi\",\n        \"options\": {\n          \"timeout\": 30000,\n          \"retry\": {\n            \"maxTries\": 3,\n            \"waitBetweenTries\": 2000\n          }\n        },\n        \"headers\": {\n          \"Accept\": \"application/json\",\n          \"Content-Type\": \"application/json\"\n        },\n        \"body\": {\n          \"hostname\": \"={{$json.parameters.auto_naming ? ($json.parameters.site_name + '-' + $json.parameters.floor_name + '-AP-' + $json.parameters.ap_serial.slice(-4)) : $json.parameters.ap_hostname}}\",\n          \"ip_address\": \"dhcp\",\n          \"zonename\": \"={{$json.parameters.site_name}}\",\n          \"location\": \"={{$json.parameters.site_name + ', ' + $json.parameters.floor_name}}\",\n          \"group_name\": \"={{$json.parameters.ap_group}}\"\n        }\n      },\n      \"id\": \"3456789a-bcde-f012-3456-789abcdef012\",\n      \"name\": \"Apply AP Configuration\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"typeVersion\": 3,\n      \"position\": [1120, 700]\n    },\n    {\n      \"parameters\": {\n        \"functionCode\": \"// Zero-Touch Provisioning Logic\\nconst routingData = $input.first().json;\\nconst params = routingData.parameters;\\n\\n// Generate automatic AP name if enabled\\nlet apName = '';\\nif (params.auto_naming && params.naming_convention) {\\n    apName = params.naming_convention\\n        .replace('{site}', params.site_name || 'Site')\\n        .replace('{floor}', params.floor_name || 'Floor')\\n        .replace('{model}', params.ap_model || 'AP')\\n        .replace('{serial}', params.ap_serial ? params.ap_serial.slice(-4) : '0000');\\n} else if (params.auto_naming) {\\n    apName = `${params.site_name || 'Site'}-${params.floor_name || 'Floor'}-AP-${params.ap_serial ? params.ap_serial.slice(-4) : '0000'}`;\\n}\\n\\n// Create zero-touch configuration\\nconst zeroTouchConfig = {\\n    operation: 'zero_touch_setup',\\n    ap_serial: params.ap_serial,\\n    ap_mac: params.ap_mac,\\n    ap_model: params.ap_model,\\n    ap_name: apName,\\n    site_name: params.site_name,\\n    floor_name: params.floor_name,\\n    ap_group: params.ap_group || `${params.site_name}-${params.environment_template || 'default'}`,\\n    template_config: params.template_config,\\n    environment: params.environment_template,\\n    steps: [\\n        'discover_ap',\\n        'create_group_if_needed',\\n        'apply_template',\\n        'configure_ap',\\n        'move_to_group',\\n        'verify_configuration'\\n    ],\\n    timestamp: new Date().toISOString()\\n};\\n\\n// Add environment-specific configuration\\nif (params.template_config) {\\n    zeroTouchConfig.radio_settings = params.template_config.radio_config;\\n    zeroTouchConfig.features = params.template_config.features;\\n}\\n\\nreturn [{ json: zeroTouchConfig }];\"\n      },\n      \"id\": \"456789ab-cdef-0123-4567-89abcdef0123\",\n      \"name\": \"Zero-Touch Setup Logic\",\n      \"type\": \"n8n-nodes-base.function\",\n      \"typeVersion\": 1,\n      \"position\": [1120, 800]\n    },\n    {\n      \"parameters\": {\n        \"functionCode\": \"// Comprehensive Error Handler for AP Provisioning\\nconst errorInfo = $input.first().json;\\nconst nodeError = $node.context.error || {};\\n\\n// Categorize errors\\nlet errorCategory = 'unknown';\\nlet errorSeverity = 'medium';\\nlet rollbackRequired = false;\\nlet retryRecommended = false;\\n\\nconst errorMessage = nodeError.message || errorInfo.error || 'Unknown error occurred';\\nconst statusCode = nodeError.httpCode || errorInfo.status_code;\\n\\n// Analyze error type\\nif (statusCode) {\\n    switch (statusCode) {\\n        case 400:\\n            errorCategory = 'validation_error';\\n            errorSeverity = 'low';\\n            retryRecommended = false;\\n            break;\\n        case 401:\\n        case 403:\\n            errorCategory = 'authentication_error';\\n            errorSeverity = 'high';\\n            retryRecommended = false;\\n            break;\\n        case 404:\\n            errorCategory = 'resource_not_found';\\n            errorSeverity = 'medium';\\n            retryRecommended = false;\\n            break;\\n        case 409:\\n            errorCategory = 'conflict_error';\\n            errorSeverity = 'medium';\\n            rollbackRequired = true;\\n            break;\\n        case 429:\\n            errorCategory = 'rate_limit';\\n            errorSeverity = 'low';\\n            retryRecommended = true;\\n            break;\\n        case 500:\\n        case 502:\\n        case 503:\\n            errorCategory = 'server_error';\\n            errorSeverity = 'high';\\n            retryRecommended = true;\\n            break;\\n        case 504:\\n            errorCategory = 'timeout_error';\\n            errorSeverity = 'medium';\\n            retryRecommended = true;\\n            break;\\n    }\\n}\\n\\n// Check for specific AP provisioning errors\\nif (errorMessage.toLowerCase().includes('ap not found')) {\\n    errorCategory = 'ap_not_found';\\n    errorSeverity = 'high';\\n    rollbackRequired = false;\\n} else if (errorMessage.toLowerCase().includes('template')) {\\n    errorCategory = 'template_error';\\n    errorSeverity = 'medium';\\n    rollbackRequired = true;\\n} else if (errorMessage.toLowerCase().includes('firmware')) {\\n    errorCategory = 'firmware_error';\\n    errorSeverity = 'high';\\n    rollbackRequired = true;\\n} else if (errorMessage.toLowerCase().includes('group')) {\\n    errorCategory = 'group_error';\\n    errorSeverity = 'medium';\\n    rollbackRequired = false;\\n} else if (errorMessage.toLowerCase().includes('configuration')) {\\n    errorCategory = 'config_validation';\\n    errorSeverity = 'medium';\\n    rollbackRequired = true;\\n} else if (errorMessage.toLowerCase().includes('network') || errorMessage.toLowerCase().includes('connection')) {\\n    errorCategory = 'network_error';\\n    errorSeverity = 'high';\\n    retryRecommended = true;\\n}\\n\\n// Create comprehensive error response\\nconst errorResponse = {\\n    error_occurred: true,\\n    error_category: errorCategory,\\n    error_severity: errorSeverity,\\n    error_message: errorMessage,\\n    status_code: statusCode,\\n    rollback_required: rollbackRequired,\\n    retry_recommended: retryRecommended,\\n    timestamp: new Date().toISOString(),\\n    node_name: $workflow.name,\\n    operation: errorInfo.operation || 'unknown',\\n    ap_serial: errorInfo.ap_serial,\\n    recommendations: []\\n};\\n\\n// Add specific recommendations\\nswitch (errorCategory) {\\n    case 'ap_not_found':\\n        errorResponse.recommendations = [\\n            'Verify AP serial number format (12 alphanumeric characters)',\\n            'Check if AP is in device inventory',\\n            'Ensure AP is powered on and connected to network'\\n        ];\\n        break;\\n    case 'template_error':\\n        errorResponse.recommendations = [\\n            'Verify template exists in Central',\\n            'Check template syntax and configuration',\\n            'Ensure template is compatible with AP model'\\n        ];\\n        break;\\n    case 'firmware_error':\\n        errorResponse.recommendations = [\\n            'Check firmware version compatibility',\\n            'Verify firmware file availability',\\n            'Ensure AP has sufficient memory for update'\\n        ];\\n        break;\\n    case 'group_error':\\n        errorResponse.recommendations = [\\n            'Verify group name format and length',\\n            'Check if group already exists',\\n            'Ensure proper group permissions'\\n        ];\\n        break;\\n    case 'authentication_error':\\n        errorResponse.recommendations = [\\n            'Check API credentials',\\n            'Verify token expiration',\\n            'Ensure proper API permissions'\\n        ];\\n        break;\\n    case 'rate_limit':\\n        errorResponse.recommendations = [\\n            'Wait before retrying',\\n            'Implement exponential backoff',\\n            'Consider batch operations'\\n        ];\\n        break;\\n    default:\\n        errorResponse.recommendations = [\\n            'Check network connectivity',\\n            'Verify API endpoint availability',\\n            'Review error logs for details'\\n        ];\\n}\\n\\nreturn [{ json: errorResponse }];\"\n      },\n      \"id\": \"56789abc-def0-1234-5678-9abcdef01234\",\n      \"name\": \"Error Handler\",\n      \"type\": \"n8n-nodes-base.function\",\n      \"typeVersion\": 1,\n      \"position\": [1560, 300]\n    },\n    {\n      \"parameters\": {\n        \"functionCode\": \"// Rollback Logic for Failed Operations\\nconst errorData = $input.first().json;\\n\\nif (!errorData.rollback_required) {\\n    return [{ json: { rollback_status: 'not_required', message: 'No rollback needed for this error type' } }];\\n}\\n\\n// Determine rollback actions based on error category and operation\\nconst rollbackActions = [];\\nconst operation = errorData.operation;\\nconst apSerial = errorData.ap_serial;\\n\\nswitch (errorData.error_category) {\\n    case 'template_error':\\n        if (operation === 'deploy_template') {\\n            rollbackActions.push({\\n                action: 'revert_template',\\n                description: 'Revert to previous template version',\\n                api_call: {\\n                    method: 'PUT',\\n                    endpoint: '/configuration/v2/ap_groups/{group}/template',\\n                    body: { template_info: { previous_version: true } }\\n                }\\n            });\\n        }\\n        break;\\n        \\n    case 'firmware_error':\\n        rollbackActions.push({\\n            action: 'revert_firmware',\\n            description: 'Revert to previous firmware version',\\n            api_call: {\\n                method: 'POST',\\n                endpoint: '/device_management/v1/device/firmware',\\n                body: {\\n                    device_list: [apSerial],\\n                    firmware_version: 'previous',\\n                    reboot: true\\n                }\\n            }\\n        });\\n        break;\\n        \\n    case 'config_validation':\\n        rollbackActions.push({\\n            action: 'restore_config',\\n            description: 'Restore previous AP configuration',\\n            api_call: {\\n                method: 'PUT',\\n                endpoint: `/configuration/v1/devices/${apSerial}/configuration`,\\n                body: { restore_previous: true }\\n            }\\n        });\\n        break;\\n        \\n    case 'conflict_error':\\n        rollbackActions.push({\\n            action: 'cleanup_resources',\\n            description: 'Clean up partially created resources',\\n            api_call: {\\n                method: 'DELETE',\\n                endpoint: '/cleanup/partial_operations',\\n                body: { operation_id: errorData.operation_id }\\n            }\\n        });\\n        break;\\n}\\n\\nconst rollbackPlan = {\\n    rollback_required: true,\\n    rollback_actions: rollbackActions,\\n    rollback_timestamp: new Date().toISOString(),\\n    original_error: errorData.error_message,\\n    ap_serial: apSerial,\\n    operation: operation\\n};\\n\\nreturn [{ json: rollbackPlan }];\"\n      },\n      \"id\": \"6789abcd-ef01-2345-6789-abcdef012345\",\n      \"name\": \"Rollback Logic\",\n      \"type\": \"n8n-nodes-base.function\",\n      \"typeVersion\": 1,\n      \"position\": [1780, 300]\n    },\n    {\n      \"parameters\": {\n        \"functionCode\": \"// Configuration Compliance Checker\\nconst apData = $input.first().json;\\n\\n// Define compliance rules for different environments\\nconst complianceRules = {\\n    office: {\\n        required_ssids: ['Corporate', 'Guest'],\\n        security_standards: ['WPA3', 'WPA2'],\\n        max_client_limit: 50,\\n        required_features: ['band_steering', 'fast_roaming']\\n    },\\n    retail: {\\n        required_ssids: ['Store', 'POS', 'Guest'],\\n        security_standards: ['WPA3', 'WPA2'],\\n        max_client_limit: 100,\\n        required_features: ['high_density', 'load_balancing']\\n    },\\n    healthcare: {\\n        required_ssids: ['Clinical', 'Admin', 'IoT'],\\n        security_standards: ['WPA3-Enterprise'],\\n        max_client_limit: 25,\\n        required_features: ['enhanced_security', 'location_services']\\n    },\\n    education: {\\n        required_ssids: ['Faculty', 'Student', 'Guest'],\\n        security_standards: ['WPA3', 'WPA2-Enterprise'],\\n        max_client_limit: 75,\\n        required_features: ['byod_support', 'content_filtering']\\n    },\\n    warehouse: {\\n        required_ssids: ['Operations'],\\n        security_standards: ['WPA3'],\\n        max_client_limit: 15,\\n        required_features: ['extended_range', 'rugged_mode']\\n    },\\n    hospitality: {\\n        required_ssids: ['Staff', 'Guest'],\\n        security_standards: ['WPA3', 'WPA2'],\\n        max_client_limit: 80,\\n        required_features: ['guest_portal', 'rate_limiting']\\n    }\\n};\\n\\n// Get environment type from AP configuration\\nconst environment = apData.environment || 'office';\\nconst rules = complianceRules[environment] || complianceRules.office;\\n\\n// Perform compliance checks\\nconst complianceResults = {\\n    environment: environment,\\n    ap_serial: apData.ap_serial,\\n    compliance_status: 'checking',\\n    checks_performed: [],\\n    violations: [],\\n    warnings: [],\\n    recommendations: [],\\n    overall_score: 0,\\n    timestamp: new Date().toISOString()\\n};\\n\\n// Check SSID compliance\\nconst configuredSsids = apData.ssids || [];\\nconst missingSSIDs = rules.required_ssids.filter(ssid => \\n    !configuredSsids.some(configured => configured.name === ssid)\\n);\\n\\nif (missingSSIDs.length > 0) {\\n    complianceResults.violations.push({\\n        type: 'missing_ssids',\\n        description: `Missing required SSIDs: ${missingSSIDs.join(', ')}`,\\n        severity: 'high'\\n    });\\n}\\n\\n// Check security standards\\nconst weakSecurity = configuredSsids.filter(ssid => \\n    !rules.security_standards.includes(ssid.security_type)\\n);\\n\\nif (weakSecurity.length > 0) {\\n    complianceResults.violations.push({\\n        type: 'weak_security',\\n        description: `SSIDs with non-compliant security: ${weakSecurity.map(s => s.name).join(', ')}`,\\n        severity: 'critical'\\n    });\\n}\\n\\n// Check client limits\\nconst overLimitSSIDs = configuredSsids.filter(ssid => \\n    ssid.client_limit > rules.max_client_limit\\n);\\n\\nif (overLimitSSIDs.length > 0) {\\n    complianceResults.warnings.push({\\n        type: 'client_limit',\\n        description: `SSIDs exceeding recommended client limit: ${overLimitSSIDs.map(s => s.name).join(', ')}`,\\n        severity: 'medium'\\n    });\\n}\\n\\n// Check required features\\nconst configuredFeatures = apData.features || [];\\nconst missingFeatures = rules.required_features.filter(feature => \\n    !configuredFeatures.includes(feature)\\n);\\n\\nif (missingFeatures.length > 0) {\\n    complianceResults.violations.push({\\n        type: 'missing_features',\\n        description: `Missing required features: ${missingFeatures.join(', ')}`,\\n        severity: 'medium'\\n    });\\n}\\n\\n// Calculate compliance score\\nconst totalChecks = 4; // SSID, Security, Client Limit, Features\\nconst violations = complianceResults.violations.length;\\nconst warnings = complianceResults.warnings.length;\\n\\ncomplianceResults.overall_score = Math.max(0, 100 - (violations * 25) - (warnings * 10));\\n\\n// Determine overall status\\nif (violations === 0 && warnings === 0) {\\n    complianceResults.compliance_status = 'compliant';\\n} else if (violations === 0) {\\n    complianceResults.compliance_status = 'compliant_with_warnings';\\n} else {\\n    complianceResults.compliance_status = 'non_compliant';\\n}\\n\\n// Add recommendations\\nif (missingSSIDs.length > 0) {\\n    complianceResults.recommendations.push(`Configure missing SSIDs: ${missingSSIDs.join(', ')}`);\\n}\\nif (weakSecurity.length > 0) {\\n    complianceResults.recommendations.push('Upgrade security to WPA3 or WPA2-Enterprise');\\n}\\nif (missingFeatures.length > 0) {\\n    complianceResults.recommendations.push(`Enable required features: ${missingFeatures.join(', ')}`);\\n}\\n\\ncomplianceResults.checks_performed = [\\n    'ssid_configuration',\\n    'security_standards',\\n    'client_limits',\\n    'required_features'\\n];\\n\\nreturn [{ json: complianceResults }];\"\n      },\n      \"id\": \"789abcde-f012-3456-789a-bcdef0123456\",\n      \"name\": \"Compliance Checker\",\n      \"type\": \"n8n-nodes-base.function\",\n      \"typeVersion\": 1,\n      \"position\": [1340, 700]\n    },\n    {\n      \"parameters\": {\n        \"channel\": \"#network-operations\",\n        \"text\": \"âœ… AP Provisioning Completed Successfully\\n\\n*Operation:* {{$json.operation}}\\n*AP Serial:* {{$json.ap_serial}}\\n*AP Group:* {{$json.ap_group}}\\n*Environment:* {{$json.environment}}\\n*Template:* {{$json.template_name}}\\n*Compliance Score:* {{$json.compliance_score}}%\\n*Timestamp:* {{$now}}\\n\\n*Next Steps:*\\nâ€¢ Monitor AP connectivity\\nâ€¢ Verify client associations\\nâ€¢ Review compliance report\"\n      },\n      \"id\": \"89abcdef-0123-4567-89ab-cdef01234567\",\n      \"name\": \"Success Notification\",\n      \"type\": \"n8n-nodes-base.slack\",\n      \"typeVersion\": 1,\n      \"position\": [1560, 100]\n    },\n    {\n      \"parameters\": {\n        \"channel\": \"#network-alerts\",\n        \"text\": \"ðŸš¨ AP Provisioning Failed\\n\\n*Error Category:* {{$json.error_category}}\\n*Error Message:* {{$json.error_message}}\\n*Severity:* {{$json.error_severity}}\\n*AP Serial:* {{$json.ap_serial}}\\n*Operation:* {{$json.operation}}\\n*Rollback Required:* {{$json.rollback_required ? 'Yes' : 'No'}}\\n*Timestamp:* {{$json.timestamp}}\\n\\n*Recommendations:*\\n{{$json.recommendations.map(r => 'â€¢ ' + r).join('\\\\n')}}\\n\\n*Status:* Investigating and taking corrective action\"\n      },\n      \"id\": \"9abcdef0-1234-5678-9abc-def012345678\",\n      \"name\": \"Error Notification\",\n      \"type\": \"n8n-nodes-base.slack\",\n      \"typeVersion\": 1,\n      \"position\": [1560, 400]\n    }\n  ],\n  \"connections\": {\n    \"Manual Trigger\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Validate Input Parameters\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Validate Input Parameters\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Check Validation\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Check Validation\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Route Operation\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ],\n        [\n          {\n            \"node\": \"Validation Error Alert\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Route Operation\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Get Device Inventory\",\n            \"type\": \"main\",\n            \"index\": 0\n          },\n          {\n            \"node\": \"Get AP Status\",\n            \"type\": \"main\",\n            \"index\": 0\n          },\n          {\n            \"node\": \"Create AP Group\",\n            \"type\": \"main\",\n            \"index\": 0\n          },\n          {\n            \"node\": \"Move AP to Group\",\n            \"type\": \"main\",\n            \"index\": 0\n          },\n          {\n            \"node\": \"Deploy Template\",\n            \"type\": \"main\",\n            \"index\": 0\n          },\n          {\n            \"node\": \"Update Firmware\",\n            \"type\": \"main\",\n            \"index\": 0\n          },\n          {\n            \"node\": \"Apply AP Configuration\",\n            \"type\": \"main\",\n            \"index\": 0\n          },\n          {\n            \"node\": \"Zero-Touch Setup Logic\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Update Firmware\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Check Firmware Status\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Apply AP Configuration\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Compliance Checker\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Compliance Checker\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Success Notification\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Error Handler\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Rollback Logic\",\n            \"type\": \"main\",\n            \"index\": 0\n          },\n          {\n            \"node\": \"Error Notification\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    }\n  },\n  \"createdAt\": \"2025-01-16T00:00:00.000Z\",\n  \"updatedAt\": \"2025-01-16T00:00:00.000Z\",\n  \"settings\": {\n    \"timezone\": \"America/New_York\",\n    \"saveDataErrorExecution\": \"all\",\n    \"saveDataSuccessExecution\": \"all\",\n    \"saveManualExecutions\": true,\n    \"callerPolicy\": \"workflowsFromSameOwner\",\n    \"errorWorkflow\": \"Error Handler\"\n  },\n  \"staticData\": {},\n  \"tags\": [\n    {\n      \"createdAt\": \"2025-01-16T00:00:00.000Z\",\n      \"updatedAt\": \"2025-01-16T00:00:00.000Z\",\n      \"id\": \"1\",\n      \"name\": \"aruba\"\n    },\n    {\n      \"createdAt\": \"2025-01-16T00:00:00.000Z\",\n      \"updatedAt\": \"2025-01-16T00:00:00.000Z\",\n      \"id\": \"2\",\n      \"name\": \"ap-provisioning\"\n    },\n    {\n      \"createdAt\": \"2025-01-16T00:00:00.000Z\",\n      \"updatedAt\": \"2025-01-16T00:00:00.000Z\",\n      \"id\": \"3\",\n      \"name\": \"automation\"\n    }\n  ],\n  \"triggerCount\": 0,\n  \"versionId\": \"1\"\n}\n