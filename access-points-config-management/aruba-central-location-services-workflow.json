{
  "name": "Aruba Central Location Services",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "aruba-location-services",
        "options": {
          "rawBody": true
        }
      },
      "id": "webhook-trigger",
      "name": "Location Services Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [240, 300],
      "webhookId": "location-services-webhook"
    },
    {
      "parameters": {
        "jsCode": "// Aruba Central Location Services Input Validation and Processing\n// Extract and validate all input parameters for location services operations\n\nconst requestBody = $json.body || $json;\n\n// Required parameters\nconst operation = requestBody.operation;\nconst site_id = requestBody.site_id;\nconst central_base_url = requestBody.central_base_url || 'https://apigw-uswest4.central.arubanetworks.com';\nconst customer_id = requestBody.customer_id;\n\n// Validate required parameters\nif (!operation) {\n  throw new Error('Missing required parameter: operation');\n}\nif (!site_id) {\n  throw new Error('Missing required parameter: site_id');\n}\nif (!customer_id) {\n  throw new Error('Missing required parameter: customer_id');\n}\n\n// Valid operations\nconst validOperations = [\n  'setup_rtls', 'configure_beacon', 'create_geofence', \n  'set_ap_location', 'analytics_setup', 'proximity_config',\n  'list_sites', 'create_campus', 'update_campus', 'create_building',\n  'get_aps', 'list_beacons', 'delete_beacon', 'get_clients',\n  'presence_analytics', 'update_geofence'\n];\n\nif (!validOperations.includes(operation)) {\n  throw new Error(`Invalid operation. Must be one of: ${validOperations.join(', ')}`);\n}\n\n// Extract all parameters based on operation type\nlet processedData = {\n  operation: operation,\n  site_id: site_id,\n  central_base_url: central_base_url,\n  customer_id: customer_id,\n  site_name: requestBody.site_name || `Site-${site_id}`,\n  campus_name: requestBody.campus_name || 'Main Campus',\n  building_name: requestBody.building_name || 'Building A',\n  floor_name: requestBody.floor_name || 'Floor 1'\n};\n\n// Operation-specific parameter extraction and validation\nswitch (operation) {\n  case 'setup_rtls':\n    processedData.rtls_config = {\n      accuracy_mode: requestBody.accuracy_mode || 'high', // high, medium, low\n      update_interval: requestBody.update_interval || 30, // seconds\n      positioning_algorithm: requestBody.positioning_algorithm || 'trilateration',\n      enable_analytics: requestBody.enable_analytics !== false,\n      minimum_aps: requestBody.minimum_aps || 3\n    };\n    break;\n\n  case 'configure_beacon':\n    // Beacon configuration parameters\n    processedData.beacon_type = requestBody.beacon_type || 'ibeacon';\n    if (!['ibeacon', 'eddystone', 'both'].includes(processedData.beacon_type)) {\n      throw new Error('beacon_type must be: ibeacon, eddystone, or both');\n    }\n    \n    // iBeacon parameters\n    if (processedData.beacon_type === 'ibeacon' || processedData.beacon_type === 'both') {\n      processedData.beacon_uuid = requestBody.beacon_uuid || 'E2C56DB5-DFFB-48D2-B060-D0F5A71096E0';\n      processedData.beacon_major = requestBody.beacon_major || 1;\n      processedData.beacon_minor = requestBody.beacon_minor || 1;\n      \n      // Validate UUID format\n      const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;\n      if (!uuidRegex.test(processedData.beacon_uuid)) {\n        throw new Error('Invalid beacon_uuid format. Must be standard UUID format.');\n      }\n    }\n    \n    // Eddystone parameters\n    if (processedData.beacon_type === 'eddystone' || processedData.beacon_type === 'both') {\n      processedData.eddystone_url = requestBody.eddystone_url || 'https://aruba.com';\n      if (!processedData.eddystone_url.startsWith('http')) {\n        throw new Error('eddystone_url must be a valid HTTP/HTTPS URL');\n      }\n    }\n    \n    // Common beacon parameters\n    processedData.beacon_power = requestBody.beacon_power || -12; // dBm\n    processedData.beacon_interval = requestBody.beacon_interval || 1000; // ms\n    \n    // Validate power range\n    if (processedData.beacon_power < -12 || processedData.beacon_power > 4) {\n      throw new Error('beacon_power must be between -12 and 4 dBm');\n    }\n    \n    // Validate interval range\n    if (processedData.beacon_interval < 100 || processedData.beacon_interval > 10000) {\n      throw new Error('beacon_interval must be between 100 and 10000 ms');\n    }\n    break;\n\n  case 'set_ap_location':\n    processedData.ap_serial = requestBody.ap_serial;\n    if (!processedData.ap_serial) {\n      throw new Error('ap_serial is required for set_ap_location operation');\n    }\n    \n    processedData.ap_coordinates = requestBody.ap_coordinates || { x: 0, y: 0, z: 0 };\n    if (typeof processedData.ap_coordinates !== 'object') {\n      throw new Error('ap_coordinates must be an object with x, y, z properties');\n    }\n    break;\n\n  case 'create_geofence':\n    processedData.geofence_name = requestBody.geofence_name;\n    if (!processedData.geofence_name) {\n      throw new Error('geofence_name is required for create_geofence operation');\n    }\n    \n    processedData.geofence_coordinates = requestBody.geofence_coordinates || [];\n    if (!Array.isArray(processedData.geofence_coordinates) || processedData.geofence_coordinates.length < 3) {\n      throw new Error('geofence_coordinates must be an array with at least 3 coordinate points');\n    }\n    \n    processedData.geofence_type = requestBody.geofence_type || 'enter';\n    if (!['enter', 'exit', 'dwell'].includes(processedData.geofence_type)) {\n      throw new Error('geofence_type must be: enter, exit, or dwell');\n    }\n    break;\n\n  case 'analytics_setup':\n    processedData.analytics_enabled = requestBody.analytics_enabled !== false;\n    processedData.asset_tracking = requestBody.asset_tracking !== false;\n    processedData.analytics_config = {\n      retention_days: requestBody.retention_days || 30,\n      export_format: requestBody.export_format || 'json',\n      real_time_updates: requestBody.real_time_updates !== false,\n      privacy_mode: requestBody.privacy_mode || 'anonymized'\n    };\n    break;\n\n  case 'proximity_config':\n    processedData.proximity_distance = requestBody.proximity_distance || 2; // meters\n    processedData.proximity_action = requestBody.proximity_action || 'notify';\n    processedData.proximity_message = requestBody.proximity_message || 'Welcome!';\n    break;\n}\n\n// Environment-specific templates for location services\nconst environmentTemplates = {\n  retail: {\n    analytics_focus: ['customer_flow', 'heat_maps', 'dwell_time'],\n    beacon_density: 'high',\n    geofence_types: ['entrance', 'department', 'checkout'],\n    privacy_level: 'high'\n  },\n  healthcare: {\n    analytics_focus: ['asset_tracking', 'patient_flow', 'staff_efficiency'],\n    beacon_density: 'medium',\n    geofence_types: ['room', 'department', 'emergency_exit'],\n    privacy_level: 'maximum'\n  },\n  corporate: {\n    analytics_focus: ['workspace_utilization', 'desk_usage', 'meeting_room_optimization'],\n    beacon_density: 'medium',\n    geofence_types: ['floor', 'department', 'meeting_room'],\n    privacy_level: 'medium'\n  },\n  education: {\n    analytics_focus: ['attendance', 'space_utilization', 'safety_monitoring'],\n    beacon_density: 'medium',\n    geofence_types: ['classroom', 'library', 'cafeteria'],\n    privacy_level: 'high'\n  },\n  manufacturing: {\n    analytics_focus: ['equipment_tracking', 'safety_zones', 'efficiency_monitoring'],\n    beacon_density: 'high',\n    geofence_types: ['production_line', 'safety_zone', 'storage'],\n    privacy_level: 'low'\n  },\n  hospitality: {\n    analytics_focus: ['guest_services', 'way_finding', 'service_optimization'],\n    beacon_density: 'high',\n    geofence_types: ['lobby', 'restaurant', 'amenities'],\n    privacy_level: 'medium'\n  }\n};\n\n// Apply environment template if specified\nif (requestBody.environment_type && environmentTemplates[requestBody.environment_type]) {\n  processedData.environment_template = environmentTemplates[requestBody.environment_type];\n  processedData.environment_type = requestBody.environment_type;\n}\n\n// Generate timestamp for tracking\nprocessedData.timestamp = new Date().toISOString();\nprocessedData.workflow_id = `location-${operation}-${Date.now()}`;\n\n// Set headers for Aruba Central API\nprocessedData.api_headers = {\n  'Authorization': `Bearer ${requestBody.access_token || '{{$credentials.arubaCentralApi.accessToken}}'}`,\n  'Content-Type': 'application/json',\n  'X-API-Version': '2',\n  'Accept': 'application/json'\n};\n\nconsole.log('Location Services Input Processed:', {\n  operation: processedData.operation,\n  site_id: processedData.site_id,\n  workflow_id: processedData.workflow_id,\n  environment: processedData.environment_type || 'default',\n  timestamp: processedData.timestamp\n});\n\nreturn { json: processedData };"
      },
      "id": "input-processor",
      "name": "Input Processor",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 300]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "setup_rtls",
              "leftValue": "={{ $json.operation }}",
              "rightValue": "setup_rtls",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            },
            {
              "id": "configure_beacon",
              "leftValue": "={{ $json.operation }}",
              "rightValue": "configure_beacon",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            },
            {
              "id": "create_geofence",
              "leftValue": "={{ $json.operation }}",
              "rightValue": "create_geofence",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            },
            {
              "id": "set_ap_location",
              "leftValue": "={{ $json.operation }}",
              "rightValue": "set_ap_location",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            },
            {
              "id": "analytics_setup",
              "leftValue": "={{ $json.operation }}",
              "rightValue": "analytics_setup",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            },
            {
              "id": "proximity_config",
              "leftValue": "={{ $json.operation }}",
              "rightValue": "proximity_config",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "or"
        },
        "options": {
          "allMatchingOutputs": true
        }
      },
      "id": "operation-router",
      "name": "Operation Router",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3,
      "position": [680, 300]
    },
    {
      "parameters": {
        "method": "GET",
        "url": "={{ $json.central_base_url }}/location/v1/sites",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "arubaCentralApi",
        "options": {
          "timeout": 30000,
          "retry": {
            "enabled": true,
            "maxTries": 3,
            "waitBetweenTries": 2000
          }
        },
        "headers": {
          "X-API-Version": "2",
          "Accept": "application/json"
        }
      },
      "id": "list-sites",
      "name": "List Location Sites",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [900, 100]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $json.central_base_url }}/location/v1/sites/{{ $json.site_id }}/campus",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "arubaCentralApi",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "campus_name",
              "value": "={{ $json.campus_name }}"
            },
            {
              "name": "site_id",
              "value": "={{ $json.site_id }}"
            },
            {
              "name": "rtls_enabled",
              "value": "={{ $json.rtls_config ? true : false }}"
            },
            {
              "name": "positioning_algorithm",
              "value": "={{ $json.rtls_config?.positioning_algorithm || 'trilateration' }}"
            },
            {
              "name": "accuracy_mode",
              "value": "={{ $json.rtls_config?.accuracy_mode || 'high' }}"
            },
            {
              "name": "update_interval",
              "value": "={{ $json.rtls_config?.update_interval || 30 }}"
            }
          ]
        },
        "options": {
          "timeout": 30000,
          "retry": {
            "enabled": true,
            "maxTries": 3,
            "waitBetweenTries": 2000
          }
        },
        "headers": {
          "X-API-Version": "2",
          "Accept": "application/json",
          "Content-Type": "application/json"
        }
      },
      "id": "setup-rtls",
      "name": "Setup RTLS",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [900, 200]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $json.central_base_url }}/location/v1/beacons",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "arubaCentralApi",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "site_id",
              "value": "={{ $json.site_id }}"
            },
            {
              "name": "beacon_type",
              "value": "={{ $json.beacon_type }}"
            },
            {
              "name": "uuid",
              "value": "={{ $json.beacon_uuid }}"
            },
            {
              "name": "major",
              "value": "={{ $json.beacon_major }}"
            },
            {
              "name": "minor",
              "value": "={{ $json.beacon_minor }}"
            },
            {
              "name": "power_level",
              "value": "={{ $json.beacon_power }}"
            },
            {
              "name": "advertisement_interval",
              "value": "={{ $json.beacon_interval }}"
            },
            {
              "name": "eddystone_url",
              "value": "={{ $json.eddystone_url }}"
            },
            {
              "name": "enabled",
              "value": true
            }
          ]
        },
        "options": {
          "timeout": 30000,
          "retry": {
            "enabled": true,
            "maxTries": 3,
            "waitBetweenTries": 2000
          }
        },
        "headers": {
          "X-API-Version": "2",
          "Accept": "application/json",
          "Content-Type": "application/json"
        }
      },
      "id": "configure-beacon",
      "name": "Configure Beacon",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [900, 300]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $json.central_base_url }}/location/v1/geofences",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "arubaCentralApi",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "site_id",
              "value": "={{ $json.site_id }}"
            },
            {
              "name": "geofence_name",
              "value": "={{ $json.geofence_name }}"
            },
            {
              "name": "geofence_type",
              "value": "={{ $json.geofence_type }}"
            },
            {
              "name": "coordinates",
              "value": "={{ JSON.stringify($json.geofence_coordinates) }}"
            },
            {
              "name": "trigger_actions",
              "value": "={{ JSON.stringify(['notification', 'analytics']) }}"
            }
          ]
        },
        "options": {
          "timeout": 30000,
          "retry": {
            "enabled": true,
            "maxTries": 3,
            "waitBetweenTries": 2000
          }
        },
        "headers": {
          "X-API-Version": "2",
          "Accept": "application/json",
          "Content-Type": "application/json"
        }
      },
      "id": "create-geofence",
      "name": "Create Geofence",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [900, 400]
    },
    {
      "parameters": {
        "method": "PUT",
        "url": "={{ $json.central_base_url }}/location/v1/aps/{{ $json.ap_serial }}/location",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "arubaCentralApi",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "x_coordinate",
              "value": "={{ $json.ap_coordinates.x }}"
            },
            {
              "name": "y_coordinate",
              "value": "={{ $json.ap_coordinates.y }}"
            },
            {
              "name": "z_coordinate",
              "value": "={{ $json.ap_coordinates.z || 0 }}"
            },
            {
              "name": "floor_id",
              "value": "={{ $json.floor_name }}"
            },
            {
              "name": "building_id",
              "value": "={{ $json.building_name }}"
            }
          ]
        },
        "options": {
          "timeout": 30000,
          "retry": {
            "enabled": true,
            "maxTries": 3,
            "waitBetweenTries": 2000
          }
        },
        "headers": {
          "X-API-Version": "2",
          "Accept": "application/json",
          "Content-Type": "application/json"
        }
      },
      "id": "set-ap-location",
      "name": "Set AP Location",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [900, 500]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $json.central_base_url }}/location/v1/analytics/config",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "arubaCentralApi",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "site_id",
              "value": "={{ $json.site_id }}"
            },
            {
              "name": "analytics_enabled",
              "value": "={{ $json.analytics_enabled }}"
            },
            {
              "name": "asset_tracking",
              "value": "={{ $json.asset_tracking }}"
            },
            {
              "name": "retention_days",
              "value": "={{ $json.analytics_config?.retention_days || 30 }}"
            },
            {
              "name": "export_format",
              "value": "={{ $json.analytics_config?.export_format || 'json' }}"
            },
            {
              "name": "real_time_updates",
              "value": "={{ $json.analytics_config?.real_time_updates !== false }}"
            },
            {
              "name": "privacy_mode",
              "value": "={{ $json.analytics_config?.privacy_mode || 'anonymized' }}"
            }
          ]
        },
        "options": {
          "timeout": 30000,
          "retry": {
            "enabled": true,
            "maxTries": 3,
            "waitBetweenTries": 2000
          }
        },
        "headers": {
          "X-API-Version": "2",
          "Accept": "application/json",
          "Content-Type": "application/json"
        }
      },
      "id": "analytics-setup",
      "name": "Analytics Setup",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [900, 600]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $json.central_base_url }}/location/v1/proximity/config",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "arubaCentralApi",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "site_id",
              "value": "={{ $json.site_id }}"
            },
            {
              "name": "proximity_distance",
              "value": "={{ $json.proximity_distance }}"
            },
            {
              "name": "proximity_action",
              "value": "={{ $json.proximity_action }}"
            },
            {
              "name": "proximity_message",
              "value": "={{ $json.proximity_message }}"
            },
            {
              "name": "enabled",
              "value": true
            }
          ]
        },
        "options": {
          "timeout": 30000,
          "retry": {
            "enabled": true,
            "maxTries": 3,
            "waitBetweenTries": 2000
          }
        },
        "headers": {
          "X-API-Version": "2",
          "Accept": "application/json",
          "Content-Type": "application/json"
        }
      },
      "id": "proximity-config",
      "name": "Proximity Config",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [900, 700]
    },
    {
      "parameters": {
        "jsCode": "// Location Services Response Processing and Error Handling\n// Process API responses and handle various error scenarios\n\nconst inputData = $input.all();\nconst originalRequest = $('Input Processor').all()[0].json;\n\nlet results = [];\nlet errors = [];\nlet successCount = 0;\nlet rollbackActions = [];\n\n// Process each operation result\nfor (const item of inputData) {\n  try {\n    const response = item.json;\n    const statusCode = response.statusCode || 200;\n    \n    // Successful response processing\n    if (statusCode >= 200 && statusCode < 300) {\n      successCount++;\n      \n      // Extract relevant data based on operation\n      let processedResult = {\n        operation: originalRequest.operation,\n        site_id: originalRequest.site_id,\n        status: 'success',\n        timestamp: new Date().toISOString(),\n        data: response\n      };\n      \n      // Operation-specific result processing\n      switch (originalRequest.operation) {\n        case 'setup_rtls':\n          processedResult.rtls_id = response.rtls_id || response.id;\n          processedResult.campus_id = response.campus_id;\n          processedResult.message = 'RTLS setup completed successfully';\n          rollbackActions.push({\n            action: 'delete_rtls',\n            campus_id: response.campus_id,\n            url: `${originalRequest.central_base_url}/location/v1/sites/${originalRequest.site_id}/campus/${response.campus_id}`\n          });\n          break;\n          \n        case 'configure_beacon':\n          processedResult.beacon_id = response.beacon_id || response.id;\n          processedResult.beacon_uuid = response.uuid || originalRequest.beacon_uuid;\n          processedResult.message = `Beacon configured: ${originalRequest.beacon_type}`;\n          rollbackActions.push({\n            action: 'delete_beacon',\n            beacon_id: response.beacon_id,\n            url: `${originalRequest.central_base_url}/location/v1/beacons/${response.beacon_id}`\n          });\n          break;\n          \n        case 'create_geofence':\n          processedResult.geofence_id = response.geofence_id || response.id;\n          processedResult.geofence_name = response.name || originalRequest.geofence_name;\n          processedResult.message = `Geofence created: ${originalRequest.geofence_name}`;\n          rollbackActions.push({\n            action: 'delete_geofence',\n            geofence_id: response.geofence_id,\n            url: `${originalRequest.central_base_url}/location/v1/geofences/${response.geofence_id}`\n          });\n          break;\n          \n        case 'set_ap_location':\n          processedResult.ap_serial = originalRequest.ap_serial;\n          processedResult.coordinates = originalRequest.ap_coordinates;\n          processedResult.message = `AP location set: ${originalRequest.ap_serial}`;\n          break;\n          \n        case 'analytics_setup':\n          processedResult.analytics_id = response.analytics_id || response.id;\n          processedResult.message = 'Location analytics configured successfully';\n          break;\n          \n        case 'proximity_config':\n          processedResult.proximity_id = response.proximity_id || response.id;\n          processedResult.message = 'Proximity services configured successfully';\n          break;\n      }\n      \n      results.push(processedResult);\n      \n    } else {\n      // Error response handling\n      const errorDetails = {\n        operation: originalRequest.operation,\n        site_id: originalRequest.site_id,\n        status: 'error',\n        timestamp: new Date().toISOString(),\n        error_code: statusCode,\n        error_message: response.message || response.error || 'Unknown error',\n        details: response\n      };\n      \n      // Categorize errors for better handling\n      if (statusCode === 400) {\n        errorDetails.error_category = 'validation_error';\n        errorDetails.suggested_action = 'Check input parameters and try again';\n      } else if (statusCode === 401) {\n        errorDetails.error_category = 'authentication_error';\n        errorDetails.suggested_action = 'Check API credentials and refresh token';\n      } else if (statusCode === 403) {\n        errorDetails.error_category = 'authorization_error';\n        errorDetails.suggested_action = 'Check API permissions for location services';\n      } else if (statusCode === 404) {\n        errorDetails.error_category = 'resource_not_found';\n        errorDetails.suggested_action = 'Verify site ID and resource existence';\n      } else if (statusCode === 409) {\n        errorDetails.error_category = 'conflict_error';\n        errorDetails.suggested_action = 'Resource already exists or conflicts with existing configuration';\n      } else if (statusCode === 429) {\n        errorDetails.error_category = 'rate_limit_error';\n        errorDetails.suggested_action = 'Wait and retry, implement rate limiting';\n      } else if (statusCode >= 500) {\n        errorDetails.error_category = 'server_error';\n        errorDetails.suggested_action = 'Retry operation, contact support if persistent';\n      } else {\n        errorDetails.error_category = 'unknown_error';\n        errorDetails.suggested_action = 'Review error details and contact support';\n      }\n      \n      errors.push(errorDetails);\n    }\n    \n  } catch (error) {\n    // Handle processing errors\n    errors.push({\n      operation: originalRequest.operation,\n      site_id: originalRequest.site_id,\n      status: 'processing_error',\n      timestamp: new Date().toISOString(),\n      error_message: error.message,\n      error_category: 'processing_error',\n      suggested_action: 'Review workflow logic and input data'\n    });\n  }\n}\n\n// Determine overall operation status\nlet overallStatus = 'success';\nif (errors.length > 0) {\n  overallStatus = successCount > 0 ? 'partial_success' : 'failure';\n}\n\n// Create comprehensive result\nconst finalResult = {\n  workflow_id: originalRequest.workflow_id,\n  operation: originalRequest.operation,\n  site_id: originalRequest.site_id,\n  overall_status: overallStatus,\n  timestamp: new Date().toISOString(),\n  summary: {\n    total_operations: inputData.length,\n    successful: successCount,\n    failed: errors.length,\n    success_rate: Math.round((successCount / inputData.length) * 100)\n  },\n  results: results,\n  errors: errors,\n  rollback_actions: rollbackActions,\n  environment_template: originalRequest.environment_template,\n  next_steps: {\n    verification_required: overallStatus !== 'success',\n    rollback_available: rollbackActions.length > 0,\n    monitoring_enabled: originalRequest.analytics_enabled !== false\n  }\n};\n\n// Add operation-specific recommendations\nswitch (originalRequest.operation) {\n  case 'setup_rtls':\n    finalResult.recommendations = [\n      'Verify AP locations are set for accurate positioning',\n      'Test location accuracy with known reference points',\n      'Monitor RTLS performance metrics',\n      'Configure client tracking policies'\n    ];\n    break;\n    \n  case 'configure_beacon':\n    finalResult.recommendations = [\n      'Test beacon signal strength and range',\n      'Verify mobile app beacon detection',\n      'Monitor beacon battery status if applicable',\n      'Document beacon deployment map'\n    ];\n    break;\n    \n  case 'create_geofence':\n    finalResult.recommendations = [\n      'Test geofence trigger accuracy',\n      'Configure notification recipients',\n      'Set up analytics for geofence events',\n      'Document geofence purpose and actions'\n    ];\n    break;\n    \n  case 'analytics_setup':\n    finalResult.recommendations = [\n      'Configure data export schedules',\n      'Set up dashboard access for stakeholders',\n      'Review privacy compliance settings',\n      'Monitor analytics data quality'\n    ];\n    break;\n}\n\nconsole.log('Location Services Processing Complete:', {\n  operation: finalResult.operation,\n  status: finalResult.overall_status,\n  success_rate: finalResult.summary.success_rate,\n  errors: finalResult.errors.length\n});\n\nreturn { json: finalResult };"
      },
      "id": "response-processor",
      "name": "Response Processor",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1120, 400]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "needs-rollback",
              "leftValue": "={{ $json.overall_status }}",
              "rightValue": "failure",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "rollback-check",
      "name": "Rollback Check",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [1340, 400]
    },
    {
      "parameters": {
        "jsCode": "// Location Services Rollback Handler\n// Implement rollback for failed location service operations\n\nconst result = $json;\nconst rollbackActions = result.rollback_actions || [];\n\nif (rollbackActions.length === 0) {\n  console.log('No rollback actions required');\n  return { json: { ...result, rollback_status: 'no_actions_required' } };\n}\n\nlet rollbackResults = [];\nlet rollbackErrors = [];\n\n// Execute rollback actions\nfor (const action of rollbackActions) {\n  try {\n    console.log(`Executing rollback action: ${action.action}`);\n    \n    // Prepare rollback API call\n    const rollbackData = {\n      method: 'DELETE',\n      url: action.url,\n      headers: {\n        'Authorization': `Bearer {{$credentials.arubaCentralApi.accessToken}}`,\n        'Content-Type': 'application/json',\n        'X-API-Version': '2'\n      },\n      action_type: action.action,\n      resource_id: action.beacon_id || action.geofence_id || action.campus_id,\n      timestamp: new Date().toISOString()\n    };\n    \n    rollbackResults.push(rollbackData);\n    \n  } catch (error) {\n    rollbackErrors.push({\n      action: action.action,\n      error: error.message,\n      timestamp: new Date().toISOString()\n    });\n  }\n}\n\nconst finalResult = {\n  ...result,\n  rollback_status: rollbackErrors.length === 0 ? 'completed' : 'partial',\n  rollback_actions_executed: rollbackResults.length,\n  rollback_errors: rollbackErrors.length,\n  rollback_details: rollbackResults\n};\n\nconsole.log('Rollback processing completed:', {\n  actions_executed: rollbackResults.length,\n  errors: rollbackErrors.length,\n  status: finalResult.rollback_status\n});\n\nreturn { json: finalResult };"
      },
      "id": "rollback-handler",
      "name": "Rollback Handler",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1560, 300]
    },
    {
      "parameters": {
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "slackApi",
        "channel": "#network-alerts",
        "text": "🚨 *Location Services Operation Alert*\n\n*Operation*: {{ $json.operation }}\n*Site ID*: {{ $json.site_id }}\n*Status*: {{ $json.overall_status }}\n*Success Rate*: {{ $json.summary.success_rate }}%\n\n{% if $json.overall_status === 'success' %}\n✅ *Success Details*:\n{% for result in $json.results %}\n• {{ result.operation }}: {{ result.message }}\n{% endfor %}\n\n{% if $json.recommendations %}\n📋 *Recommendations*:\n{% for rec in $json.recommendations %}\n• {{ rec }}\n{% endfor %}\n{% endif %}\n\n{% else %}\n❌ *Error Details*:\n{% for error in $json.errors %}\n• {{ error.operation }}: {{ error.error_message }}\n• Category: {{ error.error_category }}\n• Action: {{ error.suggested_action }}\n{% endfor %}\n\n{% if $json.rollback_status %}\n🔄 *Rollback Status*: {{ $json.rollback_status }}\n{% endif %}\n{% endif %}\n\n*Timestamp*: {{ $json.timestamp }}\n*Workflow ID*: {{ $json.workflow_id }}",
        "otherOptions": {
          "mrkdwn": true,
          "unfurl_links": false,
          "unfurl_media": false
        }
      },
      "id": "slack-notification",
      "name": "Slack Notification",
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2.1,
      "position": [1560, 500]
    },
    {
      "parameters": {
        "operation": "sendEmail",
        "email": "network-team@company.com",
        "subject": "Aruba Central Location Services - {{ $json.operation }} - {{ $json.overall_status }}",
        "message": "Location Services Operation Report\n\nOperation: {{ $json.operation }}\nSite ID: {{ $json.site_id }}\nStatus: {{ $json.overall_status }}\nSuccess Rate: {{ $json.summary.success_rate }}%\nTimestamp: {{ $json.timestamp }}\n\n{% if $json.overall_status === 'success' %}\nSuccessful Operations:\n{% for result in $json.results %}\n- {{ result.operation }}: {{ result.message }}\n{% endfor %}\n\n{% if $json.recommendations %}\nRecommendations:\n{% for rec in $json.recommendations %}\n- {{ rec }}\n{% endfor %}\n{% endif %}\n\n{% else %}\nErrors Encountered:\n{% for error in $json.errors %}\n- {{ error.operation }}: {{ error.error_message }}\n  Category: {{ error.error_category }}\n  Suggested Action: {{ error.suggested_action }}\n{% endfor %}\n\n{% if $json.rollback_status %}\nRollback Status: {{ $json.rollback_status }}\n{% endif %}\n{% endif %}\n\nWorkflow ID: {{ $json.workflow_id }}\n\nFor detailed information, check the n8n workflow execution logs.",
        "options": {}
      },
      "id": "email-notification",
      "name": "Email Notification",
      "type": "n8n-nodes-base.emailSend",
      "typeVersion": 2.1,
      "position": [1560, 600]
    },
    {
      "parameters": {
        "jsCode": "// Location Services Final Response\n// Prepare the final response for the webhook caller\n\nconst result = $json;\n\n// Create a clean response for the API caller\nconst apiResponse = {\n  status: result.overall_status,\n  operation: result.operation,\n  site_id: result.site_id,\n  workflow_id: result.workflow_id,\n  timestamp: result.timestamp,\n  summary: result.summary,\n  \n  // Include success results\n  results: result.results.map(r => ({\n    operation: r.operation,\n    status: r.status,\n    message: r.message,\n    id: r.beacon_id || r.geofence_id || r.rtls_id || r.analytics_id || r.proximity_id,\n    data: r.data\n  })),\n  \n  // Include error information if any\n  errors: result.errors.map(e => ({\n    operation: e.operation,\n    error_category: e.error_category,\n    error_message: e.error_message,\n    suggested_action: e.suggested_action\n  })),\n  \n  // Include recommendations\n  recommendations: result.recommendations || [],\n  \n  // Include rollback information if applicable\n  rollback: result.rollback_status ? {\n    status: result.rollback_status,\n    actions_executed: result.rollback_actions_executed,\n    errors: result.rollback_errors\n  } : undefined,\n  \n  // Next steps for the user\n  next_steps: result.next_steps\n};\n\n// Log final response\nconsole.log('Location Services API Response:', {\n  status: apiResponse.status,\n  operation: apiResponse.operation,\n  results_count: apiResponse.results.length,\n  errors_count: apiResponse.errors.length\n});\n\nreturn { json: apiResponse };"
      },
      "id": "final-response",
      "name": "Final Response",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1780, 400]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ JSON.stringify($json, null, 2) }}",
        "options": {
          "responseHeaders": {
            "entries": [
              {
                "name": "Content-Type",
                "value": "application/json"
              },
              {
                "name": "X-Workflow-Status",
                "value": "={{ $json.status }}"
              },
              {
                "name": "X-Operation-Type",
                "value": "={{ $json.operation }}"
              }
            ]
          }
        }
      },
      "id": "webhook-response",
      "name": "Webhook Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [2000, 400]
    }
  ],
  "connections": {
    "Location Services Webhook": {
      "main": [
        [
          {
            "node": "Input Processor",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Input Processor": {
      "main": [
        [
          {
            "node": "Operation Router",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Operation Router": {
      "main": [
        [
          {
            "node": "Setup RTLS",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Configure Beacon",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Create Geofence",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Set AP Location",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Analytics Setup",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Proximity Config",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "List Location Sites": {
      "main": [
        [
          {
            "node": "Response Processor",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Setup RTLS": {
      "main": [
        [
          {
            "node": "Response Processor",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Configure Beacon": {
      "main": [
        [
          {
            "node": "Response Processor",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Geofence": {
      "main": [
        [
          {
            "node": "Response Processor",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set AP Location": {
      "main": [
        [
          {
            "node": "Response Processor",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Analytics Setup": {
      "main": [
        [
          {
            "node": "Response Processor",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Proximity Config": {
      "main": [
        [
          {
            "node": "Response Processor",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Response Processor": {
      "main": [
        [
          {
            "node": "Rollback Check",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Rollback Check": {
      "main": [
        [
          {
            "node": "Rollback Handler",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Slack Notification",
            "type": "main",
            "index": 0
          },
          {
            "node": "Email Notification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Rollback Handler": {
      "main": [
        [
          {
            "node": "Slack Notification",
            "type": "main",
            "index": 0
          },
          {
            "node": "Email Notification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Slack Notification": {
      "main": [
        [
          {
            "node": "Final Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Email Notification": {
      "main": [
        [
          {
            "node": "Final Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Final Response": {
      "main": [
        [
          {
            "node": "Webhook Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [
    {
      "id": "location-services",
      "name": "Location Services"
    },
    {
      "id": "beacon-config",
      "name": "Beacon Configuration"
    },
    {
      "id": "rtls",
      "name": "RTLS"
    },
    {
      "id": "geofencing",
      "name": "Geofencing"
    },
    {
      "id": "analytics",
      "name": "Analytics"
    }
  ],
  "triggerCount": 1,
  "updatedAt": "2025-01-16T20:00:00.000Z",
  "versionId": "1"
}