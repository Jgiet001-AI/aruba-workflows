{
  "name": "Security Event Response Automation",
  "nodes": [
    {
      "id": "webhook-trigger",
      "name": "Security Event Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [250, 300],
      "parameters": {
        "path": "security-event-response",
        "httpMethod": "POST",
        "responseMode": "onReceived",
        "options": {}
      }
    },
    {
      "id": "parse-event",
      "name": "Parse Security Event",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [450, 300],
      "parameters": {
        "mode": "runOnceForAllItems",
        "jsCode": "// Parse and validate security event data\nconst eventData = items[0].json;\n\n// Validate required fields\nconst requiredFields = ['event_id', 'threat_type', 'severity', 'device_id', 'timestamp'];\nfor (const field of requiredFields) {\n  if (!eventData[field]) {\n    throw new Error(`Missing required field: ${field}`);\n  }\n}\n\n// Calculate threat score based on severity and confidence\nconst severityScores = {\n  'low': 25,\n  'medium': 50, \n  'high': 75,\n  'critical': 95\n};\n\nconst baseThreatScore = severityScores[eventData.severity.toLowerCase()] || 50;\nconst confidenceMultiplier = eventData.confidence_score || 0.8;\nconst threatScore = Math.round(baseThreatScore * confidenceMultiplier);\n\n// Enrich event data\nconst enrichedEvent = {\n  ...eventData,\n  threat_score: threatScore,\n  processed_at: new Date().toISOString(),\n  response_required: threatScore >= 70,\n  isolation_required: threatScore >= 90,\n  notification_level: threatScore >= 80 ? 'critical' : threatScore >= 60 ? 'high' : 'medium'\n};\n\nreturn [{ json: enrichedEvent }];"
      }
    },
    {
      "id": "check-threat-level",
      "name": "Check Threat Level",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [650, 300],
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "critical-threat",
              "leftValue": "={{ $json.threat_score }}",
              "rightValue": 90,
              "operator": {
                "type": "number",
                "operation": "gte"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      }
    },
    {
      "id": "isolate-device",
      "name": "Isolate Device",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [850, 200],
      "parameters": {
        "url": "https://central.arubanetworks.com/api/v2/devices/isolate",
        "method": "POST",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "Authorization",
              "value": "Bearer {{ $vars.aruba_api_token }}"
            },
            {
              "name": "X-API-Version",
              "value": "2"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "device_id",
              "value": "={{ $json.device_id }}"
            },
            {
              "name": "action",
              "value": "isolate"
            },
            {
              "name": "reason",
              "value": "Automated security response - Threat Score: {{ $json.threat_score }}"
            },
            {
              "name": "rollback_timer",
              "value": 3600
            }
          ]
        },
        "options": {
          "timeout": 30000,
          "retry": {
            "maxTries": 3,
            "waitBetweenTries": 2000
          }
        }
      }
    },
    {
      "id": "quarantine-device",
      "name": "Quarantine Device",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [850, 400],
      "parameters": {
        "url": "https://central.arubanetworks.com/api/v2/devices/quarantine",
        "method": "POST",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "Authorization",
              "value": "Bearer {{ $vars.aruba_api_token }}"
            },
            {
              "name": "X-API-Version",
              "value": "2"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "device_id",
              "value": "={{ $json.device_id }}"
            },
            {
              "name": "action",
              "value": "quarantine"
            },
            {
              "name": "reason",
              "value": "Security event detected - {{ $json.threat_type }}"
            }
          ]
        },
        "options": {
          "timeout": 30000,
          "retry": {
            "maxTries": 3,
            "waitBetweenTries": 2000
          }
        }
      }
    },
    {
      "id": "update-security-policy",
      "name": "Update Security Policy",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [1050, 300],
      "parameters": {
        "url": "https://central.arubanetworks.com/api/v2/security/policies/incident_response",
        "method": "PUT",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "Authorization",
              "value": "Bearer {{ $vars.aruba_api_token }}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "policy_update",
              "value": "{ \"threat_indicators\": {{ JSON.stringify($json.indicators) }}, \"source_ip\": \"{{ $json.source_ip }}\", \"source_mac\": \"{{ $json.source_mac }}\", \"block_duration\": 86400, \"updated_by\": \"security_automation\" }"
            }
          ]
        }
      }
    },
    {
      "id": "send-critical-alert",
      "name": "Send Critical Alert",
      "type": "n8n-nodes-base.slack",
      "typeVersion": 1,
      "position": [1250, 200],
      "parameters": {
        "channel": "#security-critical",
        "text": ":rotating_light: **CRITICAL SECURITY EVENT** :rotating_light:\n\n**Event ID:** {{ $json.event_id }}\n**Threat Type:** {{ $json.threat_type }}\n**Device:** {{ $json.device_id }}\n**Threat Score:** {{ $json.threat_score }}/100\n**Source IP:** {{ $json.source_ip }}\n**Timestamp:** {{ $json.timestamp }}\n\n**Automated Response:**\n:lock: Device isolated automatically\n:shield: Security policies updated\n:warning: Investigation required\n\n**Next Steps:**\n1. Review security logs\n2. Analyze threat indicators\n3. Coordinate incident response",
        "otherOptions": {
          "mrkdwn": true
        }
      }
    },
    {
      "id": "send-high-alert",
      "name": "Send High Alert",
      "type": "n8n-nodes-base.slack",
      "typeVersion": 1,
      "position": [1250, 400],
      "parameters": {
        "channel": "#security-alerts",
        "text": ":warning: **HIGH PRIORITY SECURITY EVENT** :warning:\n\n**Event ID:** {{ $json.event_id }}\n**Threat Type:** {{ $json.threat_type }}\n**Device:** {{ $json.device_id }}\n**Threat Score:** {{ $json.threat_score }}/100\n**Source IP:** {{ $json.source_ip }}\n**Timestamp:** {{ $json.timestamp }}\n\n**Automated Response:**\n:orange_circle: Device quarantined\n:shield: Security monitoring increased\n\n**Action Required:**\n- Review and validate threat\n- Consider additional containment measures",
        "otherOptions": {
          "mrkdwn": true
        }
      }
    },
    {
      "id": "log-to-siem",
      "name": "Log to SIEM",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [1450, 300],
      "parameters": {
        "url": "{{ $vars.siem_webhook_url }}",
        "method": "POST",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "X-API-Key",
              "value": "={{ $vars.siem_api_key }}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "event_type",
              "value": "security_incident"
            },
            {
              "name": "source",
              "value": "aruba_automation"
            },
            {
              "name": "timestamp",
              "value": "={{ $json.processed_at }}"
            },
            {
              "name": "data",
              "value": "={{ JSON.stringify($json) }}"
            },
            {
              "name": "severity",
              "value": "={{ $json.notification_level }}"
            },
            {
              "name": "automated_response",
              "value": "={{ $json.isolation_required ? 'device_isolated' : 'device_quarantined' }}"
            }
          ]
        }
      }
    },
    {
      "id": "error-handler",
      "name": "Error Handler",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [650, 600],
      "parameters": {
        "mode": "runOnceForAllItems",
        "jsCode": "// Handle workflow errors and create incident report\nconst error = items[0].json;\nconst originalEvent = $node['Parse Security Event']?.json || {};\n\nconst incidentReport = {\n  incident_id: `incident_${Date.now()}`,\n  timestamp: new Date().toISOString(),\n  event_id: originalEvent?.event_id || 'unknown',\n  error_type: 'automation_failure',\n  error_message: error.message || 'Unknown error occurred',\n  severity: 'high',\n  requires_manual_intervention: true,\n  original_event: originalEvent,\n  stack_trace: error.stack\n};\n\nreturn [{ json: incidentReport }];"
      }
    },
    {
      "id": "error-notification",
      "name": "Error Notification",
      "type": "n8n-nodes-base.slack",
      "typeVersion": 1,
      "position": [850, 600],
      "parameters": {
        "channel": "#security-ops",
        "text": ":exclamation: **SECURITY AUTOMATION FAILURE** :exclamation:\n\n**Incident ID:** {{ $json.incident_id }}\n**Original Event:** {{ $json.event_id }}\n**Error:** {{ $json.error_message }}\n**Timestamp:** {{ $json.timestamp }}\n\n:warning: **MANUAL INTERVENTION REQUIRED**\n\nThe security automation workflow failed to process a security event. Please review and take manual action if necessary.\n\n**Original Event Data:**\n```\n{{ JSON.stringify($json.original_event, null, 2) }}\n```",
        "otherOptions": {
          "mrkdwn": true
        }
      }
    }
  ],
  "connections": {
    "Security Event Webhook": {
      "main": [
        [
          {
            "node": "Parse Security Event",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Security Event": {
      "main": [
        [
          {
            "node": "Check Threat Level",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Threat Level": {
      "main": [
        [
          {
            "node": "Isolate Device",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Quarantine Device",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Isolate Device": {
      "main": [
        [
          {
            "node": "Update Security Policy",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Quarantine Device": {
      "main": [
        [
          {
            "node": "Update Security Policy",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Security Policy": {
      "main": [
        [
          {
            "node": "Send Critical Alert",
            "type": "main",
            "index": 0
          },
          {
            "node": "Send High Alert",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send Critical Alert": {
      "main": [
        [
          {
            "node": "Log to SIEM",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send High Alert": {
      "main": [
        [
          {
            "node": "Log to SIEM",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Error Handler": {
      "main": [
        [
          {
            "node": "Error Notification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1",
    "saveDataErrorExecution": "all",
    "saveDataSuccessExecution": "all",
    "saveManualExecutions": true,
    "saveExecutionProgress": true
  },
  "createdAt": "2025-07-17T14:53:52.359Z",
  "updatedAt": "2025-07-17T14:53:52.359Z",
  "id": "yMXkcYpg1VQ9dina",
  "versionId": "3fb34608-b774-4d52-8843-bfa77219014d"
}