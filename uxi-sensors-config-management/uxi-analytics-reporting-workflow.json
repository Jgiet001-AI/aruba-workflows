{
  "name": "UXI Analytics and Reporting",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "uxi-analytics-reporting",
        "responseMode": "onReceived",
        "options": {}
      },
      "id": "a1b2c3d4-e5f6-7890-abcd-ef1234567890",
      "name": "UXI Analytics Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        240,
        300
      ],
      "webhookId": "uxi-analytics-webhook"
    },
    {
      "parameters": {
        "jsCode": "// UXI Analytics and Reporting Workflow\n// Operations: generate_report, get_analytics, create_dashboard, schedule_report, export_data, analyze_trends\n\nconst operation = $input.item(0).json.operation;\nconst reportData = $input.item(0).json.report_data || {};\nconst uxiApiUrl = $input.item(0).json.uxi_api_url || 'https://api.uxi.aruba.com';\nconst reportType = $input.item(0).json.report_type || 'network_performance';\nconst timeRange = $input.item(0).json.time_range || 'last_24_hours';\nconst sensorIds = $input.item(0).json.sensor_ids || [];\nconst dashboardId = $input.item(0).json.dashboard_id;\n\n// Validate required parameters\nif (!operation) {\n  throw new Error('Operation is required. Valid operations: generate_report, get_analytics, create_dashboard, schedule_report, export_data, analyze_trends');\n}\n\nif (['generate_report', 'get_analytics', 'export_data', 'analyze_trends'].includes(operation) && sensorIds.length === 0) {\n  throw new Error('At least one sensor ID is required for report generation and analytics operations');\n}\n\nif (['schedule_report'].includes(operation) && !reportType) {\n  throw new Error('Report type is required for scheduling operations');\n}\n\n// Time range configurations\nconst timeRangeConfigs = {\n  'last_hour': {\n    start: new Date(Date.now() - 60 * 60 * 1000).toISOString(),\n    end: new Date().toISOString(),\n    granularity: 'minute',\n    data_points: 60\n  },\n  'last_24_hours': {\n    start: new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString(),\n    end: new Date().toISOString(),\n    granularity: 'hour',\n    data_points: 24\n  },\n  'last_7_days': {\n    start: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString(),\n    end: new Date().toISOString(),\n    granularity: 'day',\n    data_points: 7\n  },\n  'last_30_days': {\n    start: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString(),\n    end: new Date().toISOString(),\n    granularity: 'day',\n    data_points: 30\n  },\n  'last_90_days': {\n    start: new Date(Date.now() - 90 * 24 * 60 * 60 * 1000).toISOString(),\n    end: new Date().toISOString(),\n    granularity: 'week',\n    data_points: 13\n  },\n  'custom': {\n    start: reportData.start_time || new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString(),\n    end: reportData.end_time || new Date().toISOString(),\n    granularity: reportData.granularity || 'hour',\n    data_points: reportData.data_points || 24\n  }\n};\n\n// Report type configurations\nconst reportTypeConfigs = {\n  'network_performance': {\n    name: 'Network Performance Report',\n    description: 'Comprehensive network performance analysis',\n    metrics: [\n      'wifi_signal_strength',\n      'download_speed',\n      'upload_speed',\n      'latency',\n      'jitter',\n      'packet_loss',\n      'connection_success_rate',\n      'roaming_performance'\n    ],\n    visualizations: [\n      'time_series_chart',\n      'histogram',\n      'heatmap',\n      'summary_table'\n    ],\n    thresholds: {\n      wifi_signal_strength: -70,\n      download_speed: 25,\n      upload_speed: 5,\n      latency: 50,\n      jitter: 20,\n      packet_loss: 2\n    }\n  },\n  'user_experience': {\n    name: 'User Experience Report',\n    description: 'End-user experience analysis and insights',\n    metrics: [\n      'overall_score',\n      'application_performance',\n      'connection_quality',\n      'authentication_success',\n      'user_satisfaction',\n      'issue_frequency',\n      'resolution_time'\n    ],\n    visualizations: [\n      'score_trends',\n      'satisfaction_gauge',\n      'issue_breakdown',\n      'comparative_analysis'\n    ],\n    thresholds: {\n      overall_score: 8.0,\n      application_performance: 7.5,\n      connection_quality: 8.5,\n      authentication_success: 95,\n      user_satisfaction: 85\n    }\n  },\n  'security_compliance': {\n    name: 'Security Compliance Report',\n    description: 'Security posture and compliance analysis',\n    metrics: [\n      'security_score',\n      'compliance_percentage',\n      'vulnerability_count',\n      'security_incidents',\n      'policy_violations',\n      'certificate_status',\n      'encryption_coverage'\n    ],\n    visualizations: [\n      'compliance_dashboard',\n      'security_trends',\n      'vulnerability_matrix',\n      'incident_timeline'\n    ],\n    thresholds: {\n      security_score: 90,\n      compliance_percentage: 95,\n      vulnerability_count: 5,\n      security_incidents: 2,\n      policy_violations: 1\n    }\n  },\n  'capacity_planning': {\n    name: 'Capacity Planning Report',\n    description: 'Network capacity and growth analysis',\n    metrics: [\n      'bandwidth_utilization',\n      'user_density',\n      'device_growth',\n      'peak_usage_patterns',\n      'capacity_forecasting',\n      'resource_allocation',\n      'scalability_metrics'\n    ],\n    visualizations: [\n      'utilization_trends',\n      'growth_projections',\n      'capacity_heatmap',\n      'resource_allocation_chart'\n    ],\n    thresholds: {\n      bandwidth_utilization: 80,\n      user_density: 100,\n      peak_usage_threshold: 90,\n      growth_rate: 15\n    }\n  },\n  'application_analytics': {\n    name: 'Application Analytics Report',\n    description: 'Application performance and usage analysis',\n    metrics: [\n      'application_response_time',\n      'transaction_success_rate',\n      'error_rate',\n      'throughput',\n      'user_adoption',\n      'feature_usage',\n      'performance_trends'\n    ],\n    visualizations: [\n      'response_time_trends',\n      'success_rate_chart',\n      'error_analysis',\n      'usage_patterns'\n    ],\n    thresholds: {\n      response_time: 2.0,\n      success_rate: 95,\n      error_rate: 5,\n      throughput: 1000\n    }\n  },\n  'device_analytics': {\n    name: 'Device Analytics Report',\n    description: 'Device performance and health analysis',\n    metrics: [\n      'device_health_score',\n      'battery_performance',\n      'connectivity_stability',\n      'firmware_compliance',\n      'hardware_utilization',\n      'maintenance_needs',\n      'lifecycle_status'\n    ],\n    visualizations: [\n      'health_dashboard',\n      'battery_trends',\n      'connectivity_matrix',\n      'maintenance_schedule'\n    ],\n    thresholds: {\n      health_score: 85,\n      battery_performance: 80,\n      connectivity_stability: 95,\n      firmware_compliance: 90\n    }\n  }\n};\n\n// Dashboard configurations\nconst dashboardConfigs = {\n  'executive_summary': {\n    name: 'Executive Summary Dashboard',\n    widgets: [\n      'network_health_overview',\n      'user_experience_summary',\n      'security_status',\n      'capacity_utilization',\n      'key_performance_indicators'\n    ],\n    refresh_interval: 300, // 5 minutes\n    access_level: 'executive'\n  },\n  'network_operations': {\n    name: 'Network Operations Dashboard',\n    widgets: [\n      'real_time_performance',\n      'active_alerts',\n      'device_status',\n      'bandwidth_utilization',\n      'security_monitoring'\n    ],\n    refresh_interval: 60, // 1 minute\n    access_level: 'operator'\n  },\n  'user_experience': {\n    name: 'User Experience Dashboard',\n    widgets: [\n      'experience_scores',\n      'application_performance',\n      'satisfaction_metrics',\n      'issue_tracking',\n      'resolution_trends'\n    ],\n    refresh_interval: 180, // 3 minutes\n    access_level: 'analyst'\n  }\n};\n\n// Generate configuration based on operation\nlet config = reportData;\nconst timeConfig = timeRangeConfigs[timeRange] || timeRangeConfigs['last_24_hours'];\n\nif (operation === 'generate_report' && reportTypeConfigs[reportType]) {\n  const reportConfig = reportTypeConfigs[reportType];\n  config = {\n    ...reportData,\n    report_type: reportType,\n    name: reportData.name || reportConfig.name,\n    description: reportData.description || reportConfig.description,\n    metrics: reportData.metrics || reportConfig.metrics,\n    visualizations: reportData.visualizations || reportConfig.visualizations,\n    thresholds: reportData.thresholds || reportConfig.thresholds,\n    time_range: timeConfig,\n    sensor_ids: sensorIds,\n    format: reportData.format || 'pdf',\n    include_raw_data: reportData.include_raw_data || false\n  };\n}\n\nif (operation === 'get_analytics') {\n  config = {\n    ...reportData,\n    metrics: reportData.metrics || ['all'],\n    aggregation: reportData.aggregation || 'average',\n    grouping: reportData.grouping || 'sensor',\n    time_range: timeConfig,\n    sensor_ids: sensorIds,\n    filters: reportData.filters || {}\n  };\n}\n\nif (operation === 'create_dashboard') {\n  const dashboardType = reportData.dashboard_type || 'network_operations';\n  const dashboardConfig = dashboardConfigs[dashboardType];\n  config = {\n    ...reportData,\n    dashboard_type: dashboardType,\n    name: reportData.name || dashboardConfig.name,\n    widgets: reportData.widgets || dashboardConfig.widgets,\n    refresh_interval: reportData.refresh_interval || dashboardConfig.refresh_interval,\n    access_level: reportData.access_level || dashboardConfig.access_level,\n    sensor_ids: sensorIds\n  };\n}\n\nif (operation === 'schedule_report') {\n  config = {\n    ...reportData,\n    report_type: reportType,\n    schedule: {\n      frequency: reportData.frequency || 'daily',\n      time: reportData.time || '08:00',\n      timezone: reportData.timezone || 'UTC',\n      enabled: reportData.enabled !== undefined ? reportData.enabled : true\n    },\n    recipients: reportData.recipients || [],\n    delivery_method: reportData.delivery_method || 'email',\n    format: reportData.format || 'pdf'\n  };\n}\n\nif (operation === 'export_data') {\n  config = {\n    ...reportData,\n    export_format: reportData.export_format || 'csv',\n    data_types: reportData.data_types || ['metrics', 'events'],\n    time_range: timeConfig,\n    sensor_ids: sensorIds,\n    compression: reportData.compression || false,\n    include_metadata: reportData.include_metadata || true\n  };\n}\n\nif (operation === 'analyze_trends') {\n  config = {\n    ...reportData,\n    analysis_type: reportData.analysis_type || 'time_series',\n    metrics: reportData.metrics || ['network_performance'],\n    trend_period: reportData.trend_period || 'daily',\n    prediction_horizon: reportData.prediction_horizon || 7,\n    confidence_level: reportData.confidence_level || 95,\n    time_range: timeConfig,\n    sensor_ids: sensorIds\n  };\n}\n\n// Prepare output data\nconst outputData = {\n  operation,\n  config: config,\n  report_type: reportType,\n  time_range: timeRange,\n  sensor_ids: sensorIds,\n  dashboard_id: dashboardId,\n  uxi_api_url: uxiApiUrl,\n  timestamp: new Date().toISOString(),\n  validation_rules: {\n    sensor_ids_required: ['generate_report', 'get_analytics', 'export_data', 'analyze_trends'].includes(operation),\n    report_type_required: ['generate_report', 'schedule_report'].includes(operation),\n    dashboard_id_required: ['update_dashboard', 'delete_dashboard'].includes(operation)\n  }\n};\n\nreturn [{ json: outputData }];"
      },
      "id": "b2c3d4e5-f6g7-8901-bcde-f23456789012",
      "name": "Prepare Analytics Configuration",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        460,
        300
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "condition1",
              "leftValue": "={{$json.operation}}",
              "rightValue": "generate_report",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            },
            {
              "id": "condition2",
              "leftValue": "={{$json.operation}}",
              "rightValue": "get_analytics",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            },
            {
              "id": "condition3",
              "leftValue": "={{$json.operation}}",
              "rightValue": "create_dashboard",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            },
            {
              "id": "condition4",
              "leftValue": "={{$json.operation}}",
              "rightValue": "schedule_report",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            },
            {
              "id": "condition5",
              "leftValue": "={{$json.operation}}",
              "rightValue": "export_data",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            },
            {
              "id": "condition6",
              "leftValue": "={{$json.operation}}",
              "rightValue": "analyze_trends",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combineOperation": "any"
        }
      },
      "id": "c3d4e5f6-g7h8-9012-cdef-345678901234",
      "name": "Route Analytics Operation",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 1,
      "position": [
        680,
        300
      ]
    },
    {
      "parameters": {
        "url": "={{$json.uxi_api_url}}/api/v1/reports/generate",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "uxiApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "Authorization",
              "value": "Bearer {{$credentials.uxiApi.token}}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "report_config",
              "value": "={{$json.config}}"
            }
          ]
        },
        "options": {
          "timeout": 60000,
          "retry": {
            "maxTries": 3,
            "waitBetweenTries": 5000
          }
        }
      },
      "id": "d4e5f6g7-h8i9-0123-defg-456789012345",
      "name": "Generate Report",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        900,
        150
      ]
    },
    {
      "parameters": {
        "url": "={{$json.uxi_api_url}}/api/v1/analytics",
        "method": "POST",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "uxiApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "Authorization",
              "value": "Bearer {{$credentials.uxiApi.token}}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "analytics_config",
              "value": "={{$json.config}}"
            }
          ]
        },
        "options": {
          "timeout": 45000,
          "retry": {
            "maxTries": 3,
            "waitBetweenTries": 3000
          }
        }
      },
      "id": "e5f6g7h8-i9j0-1234-efgh-567890123456",
      "name": "Get Analytics",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        900,
        250
      ]
    },
    {
      "parameters": {
        "url": "={{$json.uxi_api_url}}/api/v1/dashboards",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "uxiApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "Authorization",
              "value": "Bearer {{$credentials.uxiApi.token}}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "dashboard_config",
              "value": "={{$json.config}}"
            }
          ]
        },
        "options": {
          "timeout": 30000,
          "retry": {
            "maxTries": 3,
            "waitBetweenTries": 2000
          }
        }
      },
      "id": "f6g7h8i9-j0k1-2345-fghi-678901234567",
      "name": "Create Dashboard",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        900,
        350
      ]
    },
    {
      "parameters": {
        "url": "={{$json.uxi_api_url}}/api/v1/reports/schedule",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "uxiApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "Authorization",
              "value": "Bearer {{$credentials.uxiApi.token}}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "schedule_config",
              "value": "={{$json.config}}"
            }
          ]
        },
        "options": {
          "timeout": 30000,
          "retry": {
            "maxTries": 3,
            "waitBetweenTries": 2000
          }
        }
      },
      "id": "g7h8i9j0-k1l2-3456-ghij-789012345678",
      "name": "Schedule Report",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        900,
        450
      ]
    },
    {
      "parameters": {
        "url": "={{$json.uxi_api_url}}/api/v1/data/export",
        "method": "POST",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "uxiApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "Authorization",
              "value": "Bearer {{$credentials.uxiApi.token}}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "export_config",
              "value": "={{$json.config}}"
            }
          ]
        },
        "options": {
          "timeout": 90000,
          "retry": {
            "maxTries": 3,
            "waitBetweenTries": 10000
          }
        }
      },
      "id": "h8i9j0k1-l2m3-4567-hijk-890123456789",
      "name": "Export Data",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        900,
        550
      ]
    },
    {
      "parameters": {
        "url": "={{$json.uxi_api_url}}/api/v1/analytics/trends",
        "method": "POST",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "uxiApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "Authorization",
              "value": "Bearer {{$credentials.uxiApi.token}}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "trend_analysis_config",
              "value": "={{$json.config}}"
            }
          ]
        },
        "options": {
          "timeout": 120000,
          "retry": {
            "maxTries": 3,
            "waitBetweenTries": 10000
          }
        }
      },
      "id": "i9j0k1l2-m3n4-5678-ijkl-901234567890",
      "name": "Analyze Trends",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        900,
        650
      ]
    },
    {
      "parameters": {
        "jsCode": "// Process UXI Analytics API response and prepare success response\nconst operation = $input.item(0).json.operation;\nconst apiResponse = $input.item(0).json;\n\nlet successMessage = '';\nlet responseData = {};\n\nswitch (operation) {\n  case 'generate_report':\n    successMessage = `Report '${apiResponse.name}' generated successfully`;\n    responseData = {\n      report_id: apiResponse.id,\n      name: apiResponse.name,\n      report_type: apiResponse.report_type,\n      format: apiResponse.format,\n      download_url: apiResponse.download_url,\n      size: apiResponse.size,\n      generated_at: apiResponse.generated_at,\n      status: 'completed'\n    };\n    break;\n    \n  case 'get_analytics':\n    successMessage = `Analytics data retrieved successfully`;\n    responseData = {\n      metrics: apiResponse.metrics,\n      aggregations: apiResponse.aggregations,\n      time_range: apiResponse.time_range,\n      sensor_count: apiResponse.sensor_count,\n      data_points: apiResponse.data_points,\n      insights: apiResponse.insights,\n      status: 'completed'\n    };\n    break;\n    \n  case 'create_dashboard':\n    successMessage = `Dashboard '${apiResponse.name}' created successfully`;\n    responseData = {\n      dashboard_id: apiResponse.id,\n      name: apiResponse.name,\n      dashboard_type: apiResponse.dashboard_type,\n      widgets: apiResponse.widgets,\n      access_url: apiResponse.access_url,\n      refresh_interval: apiResponse.refresh_interval,\n      status: 'created'\n    };\n    break;\n    \n  case 'schedule_report':\n    successMessage = `Report schedule created successfully`;\n    responseData = {\n      schedule_id: apiResponse.id,\n      report_type: apiResponse.report_type,\n      schedule: apiResponse.schedule,\n      recipients: apiResponse.recipients,\n      next_execution: apiResponse.next_execution,\n      status: 'scheduled'\n    };\n    break;\n    \n  case 'export_data':\n    successMessage = `Data export completed successfully`;\n    responseData = {\n      export_id: apiResponse.id,\n      export_format: apiResponse.export_format,\n      file_size: apiResponse.file_size,\n      download_url: apiResponse.download_url,\n      record_count: apiResponse.record_count,\n      exported_at: apiResponse.exported_at,\n      status: 'completed'\n    };\n    break;\n    \n  case 'analyze_trends':\n    successMessage = `Trend analysis completed successfully`;\n    responseData = {\n      analysis_id: apiResponse.id,\n      analysis_type: apiResponse.analysis_type,\n      trends: apiResponse.trends,\n      predictions: apiResponse.predictions,\n      confidence_level: apiResponse.confidence_level,\n      insights: apiResponse.insights,\n      status: 'completed'\n    };\n    break;\n    \n  default:\n    successMessage = 'Analytics operation completed successfully';\n    responseData = apiResponse;\n}\n\nreturn [{\n  json: {\n    success: true,\n    operation: operation,\n    message: successMessage,\n    data: responseData,\n    timestamp: new Date().toISOString()\n  }\n}];"
      },
      "id": "j0k1l2m3-n4o5-6789-jklm-012345678901",
      "name": "Process Analytics Success",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1120,
        400
      ]
    },
    {
      "parameters": {
        "jsCode": "// Error handling for UXI analytics operations\nconst operation = $input.item(0).json.operation || 'unknown';\nconst error = $input.item(0).json.error || {};\nconst sensorIds = $input.item(0).json.sensor_ids || [];\nconst reportType = $input.item(0).json.report_type;\n\n// Categorize error types\nlet errorCategory = 'unknown';\nlet errorMessage = error.message || 'Unknown error occurred';\nlet shouldRetry = false;\nlet rollbackRequired = false;\n\nif (error.code) {\n  switch (error.code) {\n    case 'AUTHENTICATION_ERROR':\n    case 401:\n      errorCategory = 'authentication';\n      errorMessage = 'UXI API authentication failed. Please check credentials.';\n      shouldRetry = false;\n      break;\n      \n    case 'AUTHORIZATION_ERROR':\n    case 403:\n      errorCategory = 'authorization';\n      errorMessage = 'Insufficient permissions for UXI analytics operations.';\n      shouldRetry = false;\n      break;\n      \n    case 'INSUFFICIENT_DATA':\n      errorCategory = 'data';\n      errorMessage = 'Insufficient data available for the requested time range or sensors.';\n      shouldRetry = false;\n      break;\n      \n    case 'VALIDATION_ERROR':\n    case 400:\n      errorCategory = 'validation';\n      errorMessage = 'Invalid analytics configuration parameters.';\n      shouldRetry = false;\n      break;\n      \n    case 'PROCESSING_ERROR':\n      errorCategory = 'processing';\n      errorMessage = 'Error processing analytics data. Please try again.';\n      shouldRetry = true;\n      break;\n      \n    case 'TIMEOUT_ERROR':\n      errorCategory = 'timeout';\n      errorMessage = 'Analytics operation timed out. Try reducing the time range or sensor count.';\n      shouldRetry = false;\n      break;\n      \n    case 'EXPORT_ERROR':\n      errorCategory = 'export';\n      errorMessage = 'Error exporting data. Check format and size limitations.';\n      shouldRetry = true;\n      break;\n      \n    case 'NETWORK_ERROR':\n      errorCategory = 'network';\n      errorMessage = 'Network connectivity issue with UXI API.';\n      shouldRetry = true;\n      break;\n      \n    case 'RATE_LIMIT_EXCEEDED':\n    case 429:\n      errorCategory = 'rate_limit';\n      errorMessage = 'UXI API rate limit exceeded. Please retry later.';\n      shouldRetry = true;\n      break;\n      \n    case 'QUOTA_EXCEEDED':\n      errorCategory = 'quota';\n      errorMessage = 'Analytics quota exceeded. Check usage limits.';\n      shouldRetry = false;\n      break;\n      \n    case 'INTERNAL_ERROR':\n    case 500:\n      errorCategory = 'server';\n      errorMessage = 'UXI API internal server error.';\n      shouldRetry = true;\n      break;\n      \n    default:\n      errorCategory = 'unknown';\n      shouldRetry = false;\n  }\n}\n\n// Determine if rollback is required\nif (['create_dashboard', 'schedule_report'].includes(operation)) {\n  rollbackRequired = true;\n}\n\n// Generate error response\nconst errorResponse = {\n  success: false,\n  operation: operation,\n  error: {\n    category: errorCategory,\n    message: errorMessage,\n    code: error.code,\n    details: error.details || {}\n  },\n  sensor_ids: sensorIds,\n  report_type: reportType,\n  should_retry: shouldRetry,\n  rollback_required: rollbackRequired,\n  timestamp: new Date().toISOString(),\n  troubleshooting: {\n    authentication: 'Verify UXI API credentials and token validity',\n    authorization: 'Check UXI API permissions and analytics access',\n    data: 'Verify sensor data availability for the requested time range',\n    validation: 'Check analytics configuration parameters against API schema',\n    processing: 'Retry operation or contact support if issue persists',\n    timeout: 'Reduce time range or sensor count to avoid timeout',\n    export: 'Check export format and size limitations',\n    network: 'Verify network connectivity to UXI API endpoint',\n    rate_limit: 'Implement exponential backoff and retry logic',\n    quota: 'Check analytics usage quota and upgrade if needed',\n    server: 'Contact UXI support if issue persists'\n  }\n};\n\nreturn [{ json: errorResponse }];"
      },
      "id": "k1l2m3n4-o5p6-7890-klmn-123456789012",
      "name": "Handle Analytics Error",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1120,
        600
      ]
    },
    {
      "parameters": {
        "channel": "#network-analytics",
        "text": "📊 UXI Analytics Operation Success\n*Operation*: {{$json.operation}}\n*Message*: {{$json.message}}\n*Data*: {{$json.data}}\n*Timestamp*: {{$json.timestamp}}",
        "otherOptions": {
          "mrkdwn": true
        }
      },
      "id": "l2m3n4o5-p6q7-8901-lmno-234567890123",
      "name": "Analytics Success Notification",
      "type": "n8n-nodes-base.slack",
      "typeVersion": 1,
      "position": [
        1340,
        350
      ]
    },
    {
      "parameters": {
        "channel": "#network-analytics",
        "text": "🔴 UXI Analytics Operation Failed\n*Operation*: {{$json.operation}}\n*Error*: {{$json.error.message}}\n*Category*: {{$json.error.category}}\n*Should Retry*: {{$json.should_retry}}\n*Rollback Required*: {{$json.rollback_required}}\n*Timestamp*: {{$json.timestamp}}",
        "otherOptions": {
          "mrkdwn": true
        }
      },
      "id": "m3n4o5p6-q7r8-9012-mnop-345678901234",
      "name": "Analytics Error Notification",
      "type": "n8n-nodes-base.slack",
      "typeVersion": 1,
      "position": [
        1340,
        600
      ]
    }
  ],
  "connections": {
    "UXI Analytics Webhook": {
      "main": [
        [
          {
            "node": "Prepare Analytics Configuration",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Analytics Configuration": {
      "main": [
        [
          {
            "node": "Route Analytics Operation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Route Analytics Operation": {
      "main": [
        [
          {
            "node": "Generate Report",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Get Analytics",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Create Dashboard",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Schedule Report",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Export Data",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Analyze Trends",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Report": {
      "main": [
        [
          {
            "node": "Process Analytics Success",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Analytics": {
      "main": [
        [
          {
            "node": "Process Analytics Success",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Dashboard": {
      "main": [
        [
          {
            "node": "Process Analytics Success",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Report": {
      "main": [
        [
          {
            "node": "Process Analytics Success",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Export Data": {
      "main": [
        [
          {
            "node": "Process Analytics Success",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Analyze Trends": {
      "main": [
        [
          {
            "node": "Process Analytics Success",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Analytics Success": {
      "main": [
        [
          {
            "node": "Analytics Success Notification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Handle Analytics Error": {
      "main": [
        [
          {
            "node": "Analytics Error Notification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  }
}