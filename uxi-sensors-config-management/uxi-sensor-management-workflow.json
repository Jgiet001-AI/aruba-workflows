{
  "name": "UXI Sensor Management",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "uxi-sensor-management",
        "responseMode": "onReceived",
        "options": {}
      },
      "id": "a1b2c3d4-e5f6-7890-abcd-ef1234567890",
      "name": "UXI Sensor Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        240,
        300
      ],
      "webhookId": "uxi-sensor-webhook"
    },
    {
      "parameters": {
        "jsCode": "// UXI Sensor Management Workflow\n// Operations: register_sensor, update_sensor, delete_sensor, list_sensors, configure_sensor, get_sensor_status\n\nconst operation = $input.item(0).json.operation;\nconst sensorData = $input.item(0).json.sensor_data || {};\nconst uxiApiUrl = $input.item(0).json.uxi_api_url || 'https://api.uxi.aruba.com';\nconst sensorId = $input.item(0).json.sensor_id;\nconst locationData = $input.item(0).json.location_data || {};\nconst environmentType = $input.item(0).json.environment_type || 'office';\n\n// Validate required parameters\nif (!operation) {\n  throw new Error('Operation is required. Valid operations: register_sensor, update_sensor, delete_sensor, list_sensors, configure_sensor, get_sensor_status');\n}\n\nif (['update_sensor', 'delete_sensor', 'configure_sensor', 'get_sensor_status'].includes(operation) && !sensorId) {\n  throw new Error('Sensor ID is required for update, delete, configure, and status operations');\n}\n\nif (['register_sensor', 'update_sensor'].includes(operation) && !sensorData.name) {\n  throw new Error('Sensor name is required for register and update operations');\n}\n\n// Environment-specific sensor configurations\nconst environmentConfigs = {\n  'office': {\n    name: 'Office Environment',\n    test_frequency: 300, // 5 minutes\n    network_tests: ['wifi_connectivity', 'internet_speed', 'dns_resolution', 'dhcp_performance'],\n    application_tests: ['web_browsing', 'email_performance', 'file_sharing', 'video_conferencing'],\n    thresholds: {\n      wifi_signal: -70,\n      download_speed: 25,\n      upload_speed: 5,\n      latency: 50,\n      jitter: 20,\n      packet_loss: 2\n    },\n    location_settings: {\n      mobility_enabled: true,\n      location_accuracy: 'high',\n      floor_plan_enabled: true\n    }\n  },\n  'retail': {\n    name: 'Retail Environment',\n    test_frequency: 180, // 3 minutes\n    network_tests: ['wifi_connectivity', 'internet_speed', 'pos_connectivity', 'guest_wifi'],\n    application_tests: ['pos_performance', 'inventory_systems', 'customer_wifi', 'digital_signage'],\n    thresholds: {\n      wifi_signal: -65,\n      download_speed: 50,\n      upload_speed: 10,\n      latency: 30,\n      jitter: 15,\n      packet_loss: 1\n    },\n    location_settings: {\n      mobility_enabled: true,\n      location_accuracy: 'high',\n      customer_analytics: true,\n      heat_map_enabled: true\n    }\n  },\n  'healthcare': {\n    name: 'Healthcare Environment',\n    test_frequency: 120, // 2 minutes\n    network_tests: ['wifi_connectivity', 'internet_speed', 'medical_device_connectivity', 'priority_traffic'],\n    application_tests: ['ehr_performance', 'medical_imaging', 'patient_monitoring', 'communication_systems'],\n    thresholds: {\n      wifi_signal: -60,\n      download_speed: 100,\n      upload_speed: 20,\n      latency: 20,\n      jitter: 10,\n      packet_loss: 0.5\n    },\n    location_settings: {\n      mobility_enabled: true,\n      location_accuracy: 'very_high',\n      asset_tracking: true,\n      patient_tracking: true,\n      emergency_mode: true\n    }\n  },\n  'education': {\n    name: 'Education Environment',\n    test_frequency: 240, // 4 minutes\n    network_tests: ['wifi_connectivity', 'internet_speed', 'student_network', 'admin_network'],\n    application_tests: ['learning_management', 'video_streaming', 'collaboration_tools', 'device_management'],\n    thresholds: {\n      wifi_signal: -67,\n      download_speed: 30,\n      upload_speed: 10,\n      latency: 40,\n      jitter: 25,\n      packet_loss: 2\n    },\n    location_settings: {\n      mobility_enabled: true,\n      location_accuracy: 'high',\n      classroom_analytics: true,\n      device_tracking: true\n    }\n  },\n  'manufacturing': {\n    name: 'Manufacturing Environment',\n    test_frequency: 60, // 1 minute\n    network_tests: ['wifi_connectivity', 'internet_speed', 'iot_connectivity', 'scada_network'],\n    application_tests: ['manufacturing_systems', 'iot_sensors', 'quality_control', 'inventory_tracking'],\n    thresholds: {\n      wifi_signal: -65,\n      download_speed: 20,\n      upload_speed: 5,\n      latency: 25,\n      jitter: 15,\n      packet_loss: 1\n    },\n    location_settings: {\n      mobility_enabled: true,\n      location_accuracy: 'high',\n      asset_tracking: true,\n      environmental_monitoring: true,\n      safety_compliance: true\n    }\n  },\n  'hospitality': {\n    name: 'Hospitality Environment',\n    test_frequency: 300, // 5 minutes\n    network_tests: ['wifi_connectivity', 'internet_speed', 'guest_wifi', 'property_management'],\n    application_tests: ['guest_services', 'streaming_services', 'property_systems', 'mobile_apps'],\n    thresholds: {\n      wifi_signal: -70,\n      download_speed: 50,\n      upload_speed: 15,\n      latency: 35,\n      jitter: 20,\n      packet_loss: 1.5\n    },\n    location_settings: {\n      mobility_enabled: true,\n      location_accuracy: 'medium',\n      guest_analytics: true,\n      service_optimization: true\n    }\n  }\n};\n\n// Sensor type configurations\nconst sensorTypes = {\n  'hardware': {\n    name: 'Hardware Sensor',\n    capabilities: ['wifi_testing', 'ethernet_testing', 'bluetooth_testing', 'cellular_testing'],\n    deployment: 'physical',\n    power_options: ['poe', 'battery', 'usb'],\n    mounting_options: ['wall', 'ceiling', 'desktop', 'mobile']\n  },\n  'software': {\n    name: 'Software Sensor',\n    capabilities: ['network_testing', 'application_testing', 'user_simulation'],\n    deployment: 'virtual',\n    supported_platforms: ['windows', 'macos', 'linux', 'mobile'],\n    installation_methods: ['agent', 'browser', 'mobile_app']\n  },\n  'cloud': {\n    name: 'Cloud Sensor',\n    capabilities: ['external_testing', 'cdn_testing', 'global_reach'],\n    deployment: 'cloud',\n    regions: ['us-east', 'us-west', 'eu-central', 'ap-southeast'],\n    test_origins: ['multiple_locations', 'provider_networks']\n  }\n};\n\n// Generate sensor configuration based on environment\nlet sensorConfig = sensorData;\nif (operation === 'register_sensor' && environmentType && environmentConfigs[environmentType]) {\n  const envConfig = environmentConfigs[environmentType];\n  sensorConfig = {\n    ...sensorData,\n    environment_type: environmentType,\n    test_frequency: envConfig.test_frequency,\n    network_tests: envConfig.network_tests,\n    application_tests: envConfig.application_tests,\n    thresholds: envConfig.thresholds,\n    location_settings: envConfig.location_settings\n  };\n}\n\n// Add location data if provided\nif (locationData && Object.keys(locationData).length > 0) {\n  sensorConfig.location = {\n    name: locationData.name || 'Unknown Location',\n    address: locationData.address || '',\n    coordinates: {\n      latitude: locationData.latitude || 0,\n      longitude: locationData.longitude || 0\n    },\n    floor: locationData.floor || 1,\n    building: locationData.building || '',\n    room: locationData.room || '',\n    zone: locationData.zone || ''\n  };\n}\n\n// Prepare output data\nconst outputData = {\n  operation,\n  sensor_id: sensorId,\n  sensor_config: sensorConfig,\n  uxi_api_url: uxiApiUrl,\n  environment_type: environmentType,\n  timestamp: new Date().toISOString(),\n  validation_rules: {\n    name_required: ['register_sensor', 'update_sensor'].includes(operation),\n    id_required: ['update_sensor', 'delete_sensor', 'configure_sensor', 'get_sensor_status'].includes(operation),\n    location_recommended: ['register_sensor', 'update_sensor'].includes(operation)\n  }\n};\n\n// Add operation-specific data\nif (operation === 'list_sensors') {\n  outputData.list_filters = {\n    environment_type: sensorData.environment_type || 'all',\n    status: sensorData.status || 'all',\n    location: sensorData.location || 'all',\n    limit: sensorData.limit || 100\n  };\n}\n\nif (operation === 'get_sensor_status') {\n  outputData.status_checks = {\n    connectivity: true,\n    battery_level: true,\n    test_results: true,\n    location_accuracy: true,\n    firmware_version: true\n  };\n}\n\nif (operation === 'configure_sensor') {\n  outputData.configuration_options = {\n    test_frequency: sensorConfig.test_frequency,\n    network_tests: sensorConfig.network_tests,\n    application_tests: sensorConfig.application_tests,\n    thresholds: sensorConfig.thresholds,\n    location_settings: sensorConfig.location_settings\n  };\n}\n\nreturn [{ json: outputData }];"
      },
      "id": "b2c3d4e5-f6g7-8901-bcde-f23456789012",
      "name": "Prepare Sensor Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        460,
        300
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "condition1",
              "leftValue": "={{$json.operation}}",
              "rightValue": "register_sensor",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            },
            {
              "id": "condition2",
              "leftValue": "={{$json.operation}}",
              "rightValue": "update_sensor",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            },
            {
              "id": "condition3",
              "leftValue": "={{$json.operation}}",
              "rightValue": "delete_sensor",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            },
            {
              "id": "condition4",
              "leftValue": "={{$json.operation}}",
              "rightValue": "list_sensors",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            },
            {
              "id": "condition5",
              "leftValue": "={{$json.operation}}",
              "rightValue": "configure_sensor",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            },
            {
              "id": "condition6",
              "leftValue": "={{$json.operation}}",
              "rightValue": "get_sensor_status",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combineOperation": "any"
        }
      },
      "id": "c3d4e5f6-g7h8-9012-cdef-345678901234",
      "name": "Route Operation",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 1,
      "position": [
        680,
        300
      ]
    },
    {
      "parameters": {
        "url": "={{$json.uxi_api_url}}/api/v1/sensors",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "uxiApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "Authorization",
              "value": "Bearer {{$credentials.uxiApi.token}}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "name",
              "value": "={{$json.sensor_config.name}}"
            },
            {
              "name": "environment_type",
              "value": "={{$json.environment_type}}"
            },
            {
              "name": "location",
              "value": "={{$json.sensor_config.location}}"
            },
            {
              "name": "test_frequency",
              "value": "={{$json.sensor_config.test_frequency}}"
            },
            {
              "name": "network_tests",
              "value": "={{$json.sensor_config.network_tests}}"
            },
            {
              "name": "application_tests",
              "value": "={{$json.sensor_config.application_tests}}"
            },
            {
              "name": "thresholds",
              "value": "={{$json.sensor_config.thresholds}}"
            },
            {
              "name": "location_settings",
              "value": "={{$json.sensor_config.location_settings}}"
            }
          ]
        },
        "options": {
          "timeout": 30000,
          "retry": {
            "maxTries": 3,
            "waitBetweenTries": 2000
          }
        }
      },
      "id": "d4e5f6g7-h8i9-0123-defg-456789012345",
      "name": "Register Sensor",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        900,
        200
      ]
    },
    {
      "parameters": {
        "url": "={{$json.uxi_api_url}}/api/v1/sensors/{{$json.sensor_id}}",
        "method": "PUT",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "uxiApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "Authorization",
              "value": "Bearer {{$credentials.uxiApi.token}}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "name",
              "value": "={{$json.sensor_config.name}}"
            },
            {
              "name": "environment_type",
              "value": "={{$json.environment_type}}"
            },
            {
              "name": "location",
              "value": "={{$json.sensor_config.location}}"
            },
            {
              "name": "test_frequency",
              "value": "={{$json.sensor_config.test_frequency}}"
            },
            {
              "name": "network_tests",
              "value": "={{$json.sensor_config.network_tests}}"
            },
            {
              "name": "application_tests",
              "value": "={{$json.sensor_config.application_tests}}"
            },
            {
              "name": "thresholds",
              "value": "={{$json.sensor_config.thresholds}}"
            },
            {
              "name": "location_settings",
              "value": "={{$json.sensor_config.location_settings}}"
            }
          ]
        },
        "options": {
          "timeout": 30000,
          "retry": {
            "maxTries": 3,
            "waitBetweenTries": 2000
          }
        }
      },
      "id": "e5f6g7h8-i9j0-1234-efgh-567890123456",
      "name": "Update Sensor",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        900,
        300
      ]
    },
    {
      "parameters": {
        "url": "={{$json.uxi_api_url}}/api/v1/sensors/{{$json.sensor_id}}",
        "method": "DELETE",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "uxiApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer {{$credentials.uxiApi.token}}"
            }
          ]
        },
        "options": {
          "timeout": 30000,
          "retry": {
            "maxTries": 3,
            "waitBetweenTries": 2000
          }
        }
      },
      "id": "f6g7h8i9-j0k1-2345-fghi-678901234567",
      "name": "Delete Sensor",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        900,
        400
      ]
    },
    {
      "parameters": {
        "url": "={{$json.uxi_api_url}}/api/v1/sensors",
        "method": "GET",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "uxiApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer {{$credentials.uxiApi.token}}"
            }
          ]
        },
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "environment_type",
              "value": "={{$json.list_filters.environment_type}}"
            },
            {
              "name": "status",
              "value": "={{$json.list_filters.status}}"
            },
            {
              "name": "location",
              "value": "={{$json.list_filters.location}}"
            },
            {
              "name": "limit",
              "value": "={{$json.list_filters.limit}}"
            }
          ]
        },
        "options": {
          "timeout": 30000,
          "retry": {
            "maxTries": 3,
            "waitBetweenTries": 2000
          }
        }
      },
      "id": "g7h8i9j0-k1l2-3456-ghij-789012345678",
      "name": "List Sensors",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        900,
        500
      ]
    },
    {
      "parameters": {
        "url": "={{$json.uxi_api_url}}/api/v1/sensors/{{$json.sensor_id}}/configure",
        "method": "POST",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "uxiApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "Authorization",
              "value": "Bearer {{$credentials.uxiApi.token}}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "configuration_options",
              "value": "={{$json.configuration_options}}"
            }
          ]
        },
        "options": {
          "timeout": 30000,
          "retry": {
            "maxTries": 3,
            "waitBetweenTries": 2000
          }
        }
      },
      "id": "h8i9j0k1-l2m3-4567-hijk-890123456789",
      "name": "Configure Sensor",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        900,
        600
      ]
    },
    {
      "parameters": {
        "url": "={{$json.uxi_api_url}}/api/v1/sensors/{{$json.sensor_id}}/status",
        "method": "GET",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "uxiApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer {{$credentials.uxiApi.token}}"
            }
          ]
        },
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "include_connectivity",
              "value": "={{$json.status_checks.connectivity}}"
            },
            {
              "name": "include_battery",
              "value": "={{$json.status_checks.battery_level}}"
            },
            {
              "name": "include_tests",
              "value": "={{$json.status_checks.test_results}}"
            },
            {
              "name": "include_location",
              "value": "={{$json.status_checks.location_accuracy}}"
            },
            {
              "name": "include_firmware",
              "value": "={{$json.status_checks.firmware_version}}"
            }
          ]
        },
        "options": {
          "timeout": 30000,
          "retry": {
            "maxTries": 3,
            "waitBetweenTries": 2000
          }
        }
      },
      "id": "i9j0k1l2-m3n4-5678-ijkl-901234567890",
      "name": "Get Sensor Status",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        900,
        700
      ]
    },
    {
      "parameters": {
        "jsCode": "// Process UXI API response and prepare success response\nconst operation = $input.item(0).json.operation;\nconst apiResponse = $input.item(0).json;\n\nlet successMessage = '';\nlet responseData = {};\n\nswitch (operation) {\n  case 'register_sensor':\n    successMessage = `Sensor '${apiResponse.name}' registered successfully`;\n    responseData = {\n      sensor_id: apiResponse.id,\n      name: apiResponse.name,\n      environment_type: apiResponse.environment_type,\n      location: apiResponse.location,\n      status: 'registered'\n    };\n    break;\n    \n  case 'update_sensor':\n    successMessage = `Sensor '${apiResponse.name}' updated successfully`;\n    responseData = {\n      sensor_id: apiResponse.id,\n      name: apiResponse.name,\n      changes_applied: apiResponse.changes_applied,\n      status: 'updated'\n    };\n    break;\n    \n  case 'delete_sensor':\n    successMessage = `Sensor deleted successfully`;\n    responseData = {\n      sensor_id: apiResponse.id,\n      status: 'deleted',\n      cleanup_completed: true\n    };\n    break;\n    \n  case 'list_sensors':\n    successMessage = `Retrieved ${apiResponse.sensors.length} sensors`;\n    responseData = {\n      total_sensors: apiResponse.sensors.length,\n      sensors: apiResponse.sensors,\n      filters_applied: apiResponse.filters\n    };\n    break;\n    \n  case 'configure_sensor':\n    successMessage = `Sensor configuration updated successfully`;\n    responseData = {\n      sensor_id: apiResponse.id,\n      configuration_applied: apiResponse.configuration,\n      status: 'configured'\n    };\n    break;\n    \n  case 'get_sensor_status':\n    successMessage = `Sensor status retrieved successfully`;\n    responseData = {\n      sensor_id: apiResponse.id,\n      connectivity: apiResponse.connectivity,\n      battery_level: apiResponse.battery_level,\n      test_results: apiResponse.test_results,\n      location_accuracy: apiResponse.location_accuracy,\n      firmware_version: apiResponse.firmware_version,\n      last_updated: apiResponse.last_updated\n    };\n    break;\n    \n  default:\n    successMessage = 'Operation completed successfully';\n    responseData = apiResponse;\n}\n\nreturn [{\n  json: {\n    success: true,\n    operation: operation,\n    message: successMessage,\n    data: responseData,\n    timestamp: new Date().toISOString()\n  }\n}];"
      },
      "id": "j0k1l2m3-n4o5-6789-jklm-012345678901",
      "name": "Process Success Response",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1120,
        450
      ]
    },
    {
      "parameters": {
        "jsCode": "// Error handling for UXI sensor operations\nconst operation = $input.item(0).json.operation || 'unknown';\nconst error = $input.item(0).json.error || {};\nconst sensorId = $input.item(0).json.sensor_id;\n\n// Categorize error types\nlet errorCategory = 'unknown';\nlet errorMessage = error.message || 'Unknown error occurred';\nlet shouldRetry = false;\nlet rollbackRequired = false;\n\nif (error.code) {\n  switch (error.code) {\n    case 'AUTHENTICATION_ERROR':\n    case 401:\n      errorCategory = 'authentication';\n      errorMessage = 'UXI API authentication failed. Please check credentials.';\n      shouldRetry = false;\n      break;\n      \n    case 'AUTHORIZATION_ERROR':\n    case 403:\n      errorCategory = 'authorization';\n      errorMessage = 'Insufficient permissions for UXI API operation.';\n      shouldRetry = false;\n      break;\n      \n    case 'SENSOR_NOT_FOUND':\n    case 404:\n      errorCategory = 'not_found';\n      errorMessage = `Sensor with ID '${sensorId}' not found.`;\n      shouldRetry = false;\n      break;\n      \n    case 'VALIDATION_ERROR':\n    case 400:\n      errorCategory = 'validation';\n      errorMessage = 'Invalid sensor configuration parameters.';\n      shouldRetry = false;\n      break;\n      \n    case 'NETWORK_ERROR':\n    case 'TIMEOUT':\n      errorCategory = 'network';\n      errorMessage = 'Network connectivity issue with UXI API.';\n      shouldRetry = true;\n      break;\n      \n    case 'RATE_LIMIT_EXCEEDED':\n    case 429:\n      errorCategory = 'rate_limit';\n      errorMessage = 'UXI API rate limit exceeded. Please retry later.';\n      shouldRetry = true;\n      break;\n      \n    case 'SENSOR_CONFLICT':\n    case 409:\n      errorCategory = 'conflict';\n      errorMessage = 'Sensor name or configuration conflicts with existing sensor.';\n      shouldRetry = false;\n      break;\n      \n    case 'INTERNAL_ERROR':\n    case 500:\n      errorCategory = 'server';\n      errorMessage = 'UXI API internal server error.';\n      shouldRetry = true;\n      break;\n      \n    default:\n      errorCategory = 'unknown';\n      shouldRetry = false;\n  }\n}\n\n// Determine if rollback is required\nif (['register_sensor', 'update_sensor', 'configure_sensor'].includes(operation)) {\n  rollbackRequired = true;\n}\n\n// Generate error response\nconst errorResponse = {\n  success: false,\n  operation: operation,\n  error: {\n    category: errorCategory,\n    message: errorMessage,\n    code: error.code,\n    details: error.details || {}\n  },\n  sensor_id: sensorId,\n  should_retry: shouldRetry,\n  rollback_required: rollbackRequired,\n  timestamp: new Date().toISOString(),\n  troubleshooting: {\n    authentication: 'Verify UXI API credentials and token validity',\n    authorization: 'Check UXI API permissions and user roles',\n    not_found: 'Verify sensor ID exists in UXI dashboard',\n    validation: 'Check sensor configuration parameters against API schema',\n    network: 'Verify network connectivity to UXI API endpoint',\n    rate_limit: 'Implement exponential backoff and retry logic',\n    conflict: 'Use unique sensor names and check for existing configurations',\n    server: 'Contact UXI support if issue persists'\n  }\n};\n\nreturn [{ json: errorResponse }];"
      },
      "id": "k1l2m3n4-o5p6-7890-klmn-123456789012",
      "name": "Handle Error",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1120,
        650
      ]
    },
    {
      "parameters": {
        "channel": "#network-alerts",
        "text": "🟢 UXI Sensor Operation Success\n*Operation*: {{$json.operation}}\n*Message*: {{$json.message}}\n*Sensor ID*: {{$json.data.sensor_id}}\n*Timestamp*: {{$json.timestamp}}",
        "otherOptions": {
          "mrkdwn": true
        }
      },
      "id": "l2m3n4o5-p6q7-8901-lmno-234567890123",
      "name": "Success Notification",
      "type": "n8n-nodes-base.slack",
      "typeVersion": 1,
      "position": [
        1340,
        400
      ]
    },
    {
      "parameters": {
        "channel": "#network-alerts",
        "text": "🔴 UXI Sensor Operation Failed\n*Operation*: {{$json.operation}}\n*Error*: {{$json.error.message}}\n*Category*: {{$json.error.category}}\n*Sensor ID*: {{$json.sensor_id}}\n*Should Retry*: {{$json.should_retry}}\n*Rollback Required*: {{$json.rollback_required}}\n*Timestamp*: {{$json.timestamp}}",
        "otherOptions": {
          "mrkdwn": true
        }
      },
      "id": "m3n4o5p6-q7r8-9012-mnop-345678901234",
      "name": "Error Notification",
      "type": "n8n-nodes-base.slack",
      "typeVersion": 1,
      "position": [
        1340,
        650
      ]
    }
  ],
  "connections": {
    "UXI Sensor Webhook": {
      "main": [
        [
          {
            "node": "Prepare Sensor Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Sensor Data": {
      "main": [
        [
          {
            "node": "Route Operation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Route Operation": {
      "main": [
        [
          {
            "node": "Register Sensor",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Update Sensor",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Delete Sensor",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "List Sensors",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Configure Sensor",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Get Sensor Status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Register Sensor": {
      "main": [
        [
          {
            "node": "Process Success Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Sensor": {
      "main": [
        [
          {
            "node": "Process Success Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Delete Sensor": {
      "main": [
        [
          {
            "node": "Process Success Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "List Sensors": {
      "main": [
        [
          {
            "node": "Process Success Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Configure Sensor": {
      "main": [
        [
          {
            "node": "Process Success Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Sensor Status": {
      "main": [
        [
          {
            "node": "Process Success Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Success Response": {
      "main": [
        [
          {
            "node": "Success Notification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Handle Error": {
      "main": [
        [
          {
            "node": "Error Notification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  }
}