{
  "name": "ServiceNow Asset Management Synchronization",
  "id": "rB6WmpTlHtwLr35a",
  "active": false,
  "nodes": [
    {
      "id": "webhook-trigger",
      "name": "Asset Webhook Trigger",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [250, 300],
      "parameters": {
        "path": "servicenow-asset-management",
        "httpMethod": "POST",
        "responseMode": "responseNode"
      }
    },
    {
      "id": "validate-input",
      "name": "Validate Asset Request",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [450, 300],
      "parameters": {
        "functionCode": "// ServiceNow Asset Management Input Validation\nconst input = items[0].json;\n\n// Required fields validation\nconst requiredFields = ['operation'];\nfor (const field of requiredFields) {\n  if (!input[field]) {\n    throw new Error(`Missing required field: ${field}`);\n  }\n}\n\n// Valid operations for asset management\nconst validOperations = [\n  'sync_aruba_devices', 'create_ci', 'update_ci', 'discover_devices',\n  'map_relationships', 'update_inventory', 'decommission_asset',\n  'bulk_sync', 'get_asset_details', 'validate_config', 'audit_assets',\n  'update_warranty'\n];\n\nif (!validOperations.includes(input.operation)) {\n  throw new Error(`Invalid operation: ${input.operation}`);\n}\n\n// Operation-specific validation\nif (['create_ci', 'update_ci'].includes(input.operation)) {\n  if (!input.device_serial && !input.asset_tag) {\n    throw new Error('CI operations require device_serial or asset_tag');\n  }\n}\n\nif (input.operation === 'map_relationships') {\n  if (!input.parent_ci && !input.child_ci) {\n    throw new Error('Relationship mapping requires parent_ci or child_ci');\n  }\n}\n\n// Set defaults and prepare request\nconst validatedInput = {\n  ...input,\n  timestamp: new Date().toISOString(),\n  request_id: `asset-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n  validation_status: 'passed',\n  source_system: 'aruba_central'\n};\n\nreturn [{ json: validatedInput }];"
      }
    },
    {
      "id": "set-servicenow-config",
      "name": "Set ServiceNow Config",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3,
      "position": [650, 300],
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "servicenow_instance",
              "name": "servicenow_instance",
              "value": "{{$json.servicenow_instance || 'your-instance.service-now.com'}}",
              "type": "string"
            },
            {
              "id": "servicenow_username",
              "name": "servicenow_username",
              "value": "{{$json.servicenow_username || 'integration_user'}}",
              "type": "string"
            },
            {
              "id": "servicenow_password",
              "name": "servicenow_password",
              "value": "{{$json.servicenow_password || 'secure_password'}}",
              "type": "string"
            },
            {
              "id": "aruba_api_token",
              "name": "aruba_api_token",
              "value": "{{$json.aruba_api_token || 'aruba_bearer_token'}}",
              "type": "string"
            }
          ]
        }
      }
    },
    {
      "id": "route-asset-operation",
      "name": "Route Asset Operation",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 1,
      "position": [850, 300],
      "parameters": {
        "rules": {
          "rules": [
            {
              "conditions": {
                "string": [
                  {
                    "value1": "={{$json.operation}}",
                    "operation": "contains",
                    "value2": "sync"
                  }
                ]
              },
              "renameOutput": "Device Synchronization"
            },
            {
              "conditions": {
                "string": [
                  {
                    "value1": "={{$json.operation}}",
                    "operation": "contains",
                    "value2": "ci"
                  }
                ]
              },
              "renameOutput": "CI Management"
            },
            {
              "conditions": {
                "string": [
                  {
                    "value1": "={{$json.operation}}",
                    "operation": "contains",
                    "value2": "discover"
                  }
                ]
              },
              "renameOutput": "Device Discovery"
            },
            {
              "conditions": {
                "string": [
                  {
                    "value1": "={{$json.operation}}",
                    "operation": "contains",
                    "value2": "relationship"
                  }
                ]
              },
              "renameOutput": "Relationship Mapping"
            },
            {
              "conditions": {
                "string": [
                  {
                    "value1": "={{$json.operation}}",
                    "operation": "contains",
                    "value2": "inventory"
                  }
                ]
              },
              "renameOutput": "Inventory Management"
            },
            {
              "conditions": {
                "string": [
                  {
                    "value1": "={{$json.operation}}",
                    "operation": "contains",
                    "value2": "audit"
                  }
                ]
              },
              "renameOutput": "Asset Audit"
            }
          ]
        },
        "fallbackOutput": "defaultOutput"
      }
    },
    {
      "id": "device-synchronization",
      "name": "Device Synchronization",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [1100, 100],
      "parameters": {
        "method": "GET",
        "url": "https://{{$node[\"Set ServiceNow Config\"].json[\"aruba_instance\"] || 'aruba-central.example.com'}}/monitoring/v1/devices",
        "authentication": "genericCredentialType",
        "genericAuthType": "headerAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer {{$node[\"Set ServiceNow Config\"].json[\"aruba_api_token\"]}}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "limit",
              "value": "={{$json.limit || '100'}}"
            },
            {
              "name": "offset",
              "value": "={{$json.offset || '0'}}"
            },
            {
              "name": "device_type",
              "value": "={{$json.device_type || 'all'}}"
            },
            {
              "name": "status",
              "value": "={{$json.status || 'Up'}}"
            }
          ]
        },
        "options": {
          "timeout": 30000,
          "retry": {
            "enabled": true,
            "maxTries": 3,
            "waitBetweenTries": 2000
          }
        }
      }
    },
    {
      "id": "ci-management",
      "name": "CI Management",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [1100, 200],
      "parameters": {
        "method": "={{$json.operation === 'create_ci' ? 'POST' : $json.operation === 'update_ci' ? 'PUT' : 'GET'}}",
        "url": "https://{{$node[\"Set ServiceNow Config\"].json[\"servicenow_instance\"]}}/api/now/table/cmdb_ci={{$json.sys_id ? '/' + $json.sys_id : ''}}",
        "authentication": "basicAuth",
        "basicAuth": {
          "user": "={{$node[\"Set ServiceNow Config\"].json[\"servicenow_username\"]}}",
          "password": "={{$node[\"Set ServiceNow Config\"].json[\"servicenow_password\"]}}"
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "Accept",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "contentType": "json",
        "specifyBody": "json",
        "jsonBody": "={\n  \"name\": {{JSON.stringify($json.device_name || $json.hostname)}},\n  \"serial_number\": {{JSON.stringify($json.device_serial || $json.serial)}},\n  \"asset_tag\": {{JSON.stringify($json.asset_tag)}},\n  \"model_id\": {{JSON.stringify($json.model)}},\n  \"manufacturer\": {{JSON.stringify($json.manufacturer || \"HPE Aruba\")}},\n  \"ip_address\": {{JSON.stringify($json.ip_address)}},\n  \"mac_address\": {{JSON.stringify($json.mac_address)}},\n  \"location\": {{JSON.stringify($json.location || $json.site)}},\n  \"operational_status\": {{JSON.stringify($json.status === 'Up' ? '1' : '2')}},\n  \"install_status\": {{JSON.stringify($json.install_status || '1')}},\n  \"category\": {{JSON.stringify($json.category || \"Network Gear\")}},\n  \"subcategory\": {{JSON.stringify($json.subcategory || $json.device_type)}},\n  \"u_aruba_device_id\": {{JSON.stringify($json.device_id)}},\n  \"u_aruba_group\": {{JSON.stringify($json.group_name)}},\n  \"u_aruba_firmware\": {{JSON.stringify($json.firmware_version)}},\n  \"u_last_sync\": {{JSON.stringify(new Date().toISOString())}}\n}",
        "options": {
          "timeout": 30000,
          "retry": {
            "enabled": true,
            "maxTries": 3,
            "waitBetweenTries": 2000
          }
        }
      }
    },
    {
      "id": "device-discovery",
      "name": "Device Discovery",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1100, 300],
      "parameters": {
        "functionCode": "// Discover and classify Aruba devices for ServiceNow\nconst input = items[0].json;\nconst discoveredDevices = [];\n\n// Mock device discovery logic (replace with actual Aruba API calls)\nconst deviceTypes = {\n  'access_point': {\n    category: 'Network Gear',\n    subcategory: 'Wireless Access Point',\n    class: 'cmdb_ci_wireless_access_point'\n  },\n  'switch': {\n    category: 'Network Gear',\n    subcategory: 'Network Switch',\n    class: 'cmdb_ci_network_gear'\n  },\n  'gateway': {\n    category: 'Network Gear',\n    subcategory: 'Network Gateway',\n    class: 'cmdb_ci_network_gear'\n  },\n  'controller': {\n    category: 'Network Gear',\n    subcategory: 'Wireless Controller',\n    class: 'cmdb_ci_wireless_lan_controller'\n  }\n};\n\n// Process discovered devices\nif (input.devices && Array.isArray(input.devices)) {\n  input.devices.forEach(device => {\n    const deviceInfo = deviceTypes[device.device_type] || deviceTypes['switch'];\n    \n    discoveredDevices.push({\n      name: device.name || device.hostname,\n      serial_number: device.serial,\n      model_id: device.model,\n      manufacturer: 'HPE Aruba',\n      ip_address: device.ip_address,\n      mac_address: device.mac_address,\n      location: device.site || device.location,\n      category: deviceInfo.category,\n      subcategory: deviceInfo.subcategory,\n      sys_class_name: deviceInfo.class,\n      operational_status: device.status === 'Up' ? '1' : '2',\n      install_status: '1',\n      u_aruba_device_id: device.device_id,\n      u_aruba_group: device.group_name,\n      u_aruba_firmware: device.firmware_version,\n      u_device_type: device.device_type,\n      u_last_discovery: new Date().toISOString(),\n      discovery_source: 'aruba_central'\n    });\n  });\n}\n\n// Return discovery results\nconst result = {\n  operation: 'discover_devices',\n  timestamp: new Date().toISOString(),\n  discovered_count: discoveredDevices.length,\n  devices: discoveredDevices,\n  discovery_summary: {\n    access_points: discoveredDevices.filter(d => d.u_device_type === 'access_point').length,\n    switches: discoveredDevices.filter(d => d.u_device_type === 'switch').length,\n    gateways: discoveredDevices.filter(d => d.u_device_type === 'gateway').length,\n    controllers: discoveredDevices.filter(d => d.u_device_type === 'controller').length\n  }\n};\n\nreturn [{ json: result }];"
      }
    },
    {
      "id": "relationship-mapping",
      "name": "Relationship Mapping",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [1100, 400],
      "parameters": {
        "method": "POST",
        "url": "https://{{$node[\"Set ServiceNow Config\"].json[\"servicenow_instance\"]}}/api/now/table/cmdb_rel_ci",
        "authentication": "basicAuth",
        "basicAuth": {
          "user": "={{$node[\"Set ServiceNow Config\"].json[\"servicenow_username\"]}}",
          "password": "={{$node[\"Set ServiceNow Config\"].json[\"servicenow_password\"]}}"
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "Accept",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "contentType": "json",
        "specifyBody": "json",
        "jsonBody": "={\n  \"parent\": {{JSON.stringify($json.parent_ci)}},\n  \"child\": {{JSON.stringify($json.child_ci)}},\n  \"type\": {{JSON.stringify($json.relationship_type || \"Connected to\")}},\n  \"connection_strength\": {{JSON.stringify($json.connection_strength || \"1\")}},\n  \"port\": {{JSON.stringify($json.port)}},\n  \"u_aruba_relationship\": true,\n  \"u_sync_source\": \"aruba_central\",\n  \"u_last_updated\": {{JSON.stringify(new Date().toISOString())}}\n}",
        "options": {
          "timeout": 30000,
          "retry": {
            "enabled": true,
            "maxTries": 3,
            "waitBetweenTries": 2000
          }
        }
      }
    },
    {
      "id": "inventory-management",
      "name": "Inventory Management",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [1100, 500],
      "parameters": {
        "method": "={{$json.operation === 'update_inventory' ? 'PUT' : 'GET'}}",
        "url": "https://{{$node[\"Set ServiceNow Config\"].json[\"servicenow_instance\"]}}/api/now/table/alm_asset={{$json.asset_sys_id ? '/' + $json.asset_sys_id : ''}}",
        "authentication": "basicAuth",
        "basicAuth": {
          "user": "={{$node[\"Set ServiceNow Config\"].json[\"servicenow_username\"]}}",
          "password": "={{$node[\"Set ServiceNow Config\"].json[\"servicenow_password\"]}}"
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "Accept",
              "value": "application/json"
            }
          ]
        },
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "sysparm_fields",
              "value": "sys_id,asset_tag,serial_number,model,install_status,substatus,cost,purchase_date,warranty_expiration"
            },
            {
              "name": "sysparm_query",
              "value": "={{$json.query_filter || 'manufacturer=HPE Aruba'}}"
            }
          ]
        },
        "sendBody": true,
        "contentType": "json",
        "specifyBody": "json",
        "jsonBody": "={\n  \"asset_tag\": {{JSON.stringify($json.asset_tag)}},\n  \"serial_number\": {{JSON.stringify($json.serial_number)}},\n  \"model\": {{JSON.stringify($json.model)}},\n  \"install_status\": {{JSON.stringify($json.install_status || \"1\")}},\n  \"substatus\": {{JSON.stringify($json.substatus || \"available\")}},\n  \"cost\": {{JSON.stringify($json.cost)}},\n  \"purchase_date\": {{JSON.stringify($json.purchase_date)}},\n  \"warranty_expiration\": {{JSON.stringify($json.warranty_expiration)}},\n  \"location\": {{JSON.stringify($json.location)}},\n  \"assigned_to\": {{JSON.stringify($json.assigned_to)}},\n  \"managed_by\": {{JSON.stringify($json.managed_by)}},\n  \"u_aruba_managed\": true,\n  \"u_last_inventory_sync\": {{JSON.stringify(new Date().toISOString())}}\n}",
        "options": {
          "timeout": 30000,
          "retry": {
            "enabled": true,
            "maxTries": 3,
            "waitBetweenTries": 2000
          }
        }
      }
    },
    {
      "id": "asset-audit",
      "name": "Asset Audit",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1100, 600],
      "parameters": {
        "functionCode": "// Perform comprehensive asset audit and compliance check\nconst input = items[0].json;\nconst auditResults = {\n  audit_timestamp: new Date().toISOString(),\n  audit_type: input.audit_type || 'full_audit',\n  compliance_score: 0,\n  findings: [],\n  recommendations: [],\n  asset_summary: {\n    total_assets: 0,\n    compliant_assets: 0,\n    non_compliant_assets: 0,\n    missing_assets: 0,\n    unauthorized_assets: 0\n  }\n};\n\n// Mock audit logic - replace with actual ServiceNow/Aruba data comparison\nconst mockAuditFindings = [\n  {\n    severity: 'high',\n    category: 'missing_asset',\n    description: 'Asset missing from ServiceNow CMDB',\n    asset_tag: 'AP001234',\n    serial_number: 'ABCD1234567',\n    location: 'Building A - Floor 3',\n    recommendation: 'Create CI record in ServiceNow CMDB'\n  },\n  {\n    severity: 'medium',\n    category: 'outdated_info',\n    description: 'Asset information out of sync',\n    asset_tag: 'SW005678',\n    serial_number: 'EFGH7890123',\n    field: 'firmware_version',\n    cmdb_value: '8.10.0.1',\n    actual_value: '8.10.0.3',\n    recommendation: 'Update CMDB with current firmware version'\n  },\n  {\n    severity: 'low',\n    category: 'warranty_expiring',\n    description: 'Asset warranty expiring within 90 days',\n    asset_tag: 'GW009876',\n    warranty_expiration: '2025-04-15',\n    recommendation: 'Review warranty renewal options'\n  }\n];\n\n// Process audit findings\nauditResults.findings = mockAuditFindings;\nauditResults.asset_summary.total_assets = 150;\nauditResults.asset_summary.compliant_assets = 145;\nauditResults.asset_summary.non_compliant_assets = 3;\nauditResults.asset_summary.missing_assets = 1;\nauditResults.asset_summary.unauthorized_assets = 1;\n\n// Calculate compliance score\nauditResults.compliance_score = Math.round(\n  (auditResults.asset_summary.compliant_assets / auditResults.asset_summary.total_assets) * 100\n);\n\n// Generate recommendations\nauditResults.recommendations = [\n  {\n    priority: 'high',\n    action: 'Create missing CI records',\n    description: 'Add missing Aruba devices to ServiceNow CMDB',\n    estimated_effort: '2 hours',\n    business_impact: 'Improves asset visibility and compliance'\n  },\n  {\n    priority: 'medium',\n    action: 'Synchronize asset data',\n    description: 'Update outdated information in ServiceNow',\n    estimated_effort: '1 hour',\n    business_impact: 'Ensures accurate inventory tracking'\n  },\n  {\n    priority: 'low',\n    action: 'Review warranty renewals',\n    description: 'Evaluate warranty status for expiring assets',\n    estimated_effort: '4 hours',\n    business_impact: 'Prevents service disruption from expired warranties'\n  }\n];\n\n// Add compliance status\nauditResults.compliance_status = auditResults.compliance_score >= 95 ? 'excellent' :\n                                auditResults.compliance_score >= 90 ? 'good' :\n                                auditResults.compliance_score >= 80 ? 'fair' : 'poor';\n\nreturn [{ json: auditResults }];"
      }
    },
    {
      "id": "process-asset-results",
      "name": "Process Asset Results",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1350, 300],
      "parameters": {
        "functionCode": "// Process asset management operation results\nconst input = items[0].json;\nconst originalRequest = $('Validate Asset Request').first().json;\n\nlet result = {\n  request_id: originalRequest.request_id,\n  operation: originalRequest.operation,\n  timestamp: new Date().toISOString(),\n  status: 'success',\n  message: 'Asset management operation completed successfully',\n  source_system: 'aruba_central',\n  target_system: 'servicenow'\n};\n\ntry {\n  if (input.error || input.result?.error) {\n    result.status = 'error';\n    result.message = input.error || input.result.error;\n    result.error_details = input;\n  } else {\n    result.data = input;\n    \n    // Operation-specific processing\n    switch (originalRequest.operation) {\n      case 'sync_aruba_devices':\n        result.message = `Device synchronization completed successfully`;\n        result.devices_processed = input.devices ? input.devices.length : 0;\n        result.sync_summary = {\n          total_devices: input.devices?.length || 0,\n          successful_syncs: input.successful_syncs || 0,\n          failed_syncs: input.failed_syncs || 0\n        };\n        break;\n        \n      case 'create_ci':\n        result.message = `Configuration Item created successfully`;\n        result.ci_sys_id = input.result?.sys_id || input.sys_id;\n        result.ci_number = input.result?.number || input.number;\n        break;\n        \n      case 'update_ci':\n        result.message = `Configuration Item updated successfully`;\n        result.ci_sys_id = originalRequest.sys_id;\n        result.updated_fields = Object.keys(input.result || input);\n        break;\n        \n      case 'discover_devices':\n        result.message = `Device discovery completed successfully`;\n        result.discovered_count = input.discovered_count || 0;\n        result.discovery_summary = input.discovery_summary || {};\n        break;\n        \n      case 'map_relationships':\n        result.message = `Relationship mapping completed successfully`;\n        result.relationship_sys_id = input.result?.sys_id || input.sys_id;\n        result.parent_ci = originalRequest.parent_ci;\n        result.child_ci = originalRequest.child_ci;\n        break;\n        \n      case 'update_inventory':\n        result.message = `Inventory update completed successfully`;\n        result.asset_sys_id = input.result?.sys_id || originalRequest.asset_sys_id;\n        result.inventory_changes = input.changes || [];\n        break;\n        \n      case 'audit_assets':\n        result.message = `Asset audit completed successfully`;\n        result.compliance_score = input.compliance_score || 0;\n        result.compliance_status = input.compliance_status || 'unknown';\n        result.findings_count = input.findings ? input.findings.length : 0;\n        result.recommendations_count = input.recommendations ? input.recommendations.length : 0;\n        \n        // Set status based on compliance score\n        if (input.compliance_score < 80) {\n          result.status = 'warning';\n          result.message += ` - Compliance score below threshold (${input.compliance_score}%)`;\n        }\n        break;\n        \n      case 'bulk_sync':\n        result.message = `Bulk synchronization completed successfully`;\n        result.bulk_summary = {\n          total_operations: input.total_operations || 0,\n          successful_operations: input.successful_operations || 0,\n          failed_operations: input.failed_operations || 0\n        };\n        break;\n        \n      default:\n        result.message = `${originalRequest.operation} completed successfully`;\n    }\n    \n    // Add ServiceNow response details if available\n    if (input.result) {\n      result.servicenow_response = {\n        sys_id: input.result.sys_id,\n        number: input.result.number,\n        state: input.result.state,\n        updated: input.result.sys_updated_on\n      };\n    }\n    \n    // Add synchronization metrics\n    result.sync_metrics = {\n      operation_duration: Date.now() - new Date(originalRequest.timestamp).getTime(),\n      api_calls_made: input.api_calls_made || 1,\n      data_volume: JSON.stringify(input).length\n    };\n  }\n} catch (error) {\n  result.status = 'error';\n  result.message = 'Error processing asset management operation result';\n  result.error_details = error.message;\n}\n\nreturn [{ json: result }];"
      }
    },
    {
      "id": "generate-asset-alerts",
      "name": "Generate Asset Alerts",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1550, 300],
      "parameters": {
        "functionCode": "// Generate intelligent asset management alerts\nconst result = items[0].json;\nconst originalRequest = $('Validate Asset Request').first().json;\n\nlet notifications = [];\n\n// Determine alert level and channels\nlet alertLevel = 'info';\nlet channels = ['#servicenow-integration'];\n\nif (result.status === 'error') {\n  alertLevel = 'critical';\n  channels.push('#it-operations');\n} else if (result.status === 'warning' || (result.compliance_score && result.compliance_score < 80)) {\n  alertLevel = 'warning';\n  channels.push('#asset-management');\n} else if (result.operation === 'audit_assets' && result.findings_count > 0) {\n  alertLevel = 'warning';\n  channels.push('#asset-management');\n}\n\n// Create notifications for each channel\nchannels.forEach(channel => {\n  let icon = '🔧';\n  if (alertLevel === 'critical') icon = '🚨';\n  else if (alertLevel === 'warning') icon = '⚠️';\n  else if (result.status === 'success') icon = '✅';\n  \n  let message = `${icon} **ServiceNow Asset Management Report**\\\\n`;\n  message += `**Operation**: ${result.operation}\\\\n`;\n  message += `**Status**: ${result.status.toUpperCase()}\\\\n`;\n  message += `**Message**: ${result.message}\\\\n`;\n  message += `**Time**: ${result.timestamp}\\\\n`;\n  message += `**Request ID**: ${result.request_id}\\\\n`;\n  \n  // Add operation-specific details\n  if (result.devices_processed) {\n    message += `**Devices Processed**: ${result.devices_processed}\\\\n`;\n    if (result.sync_summary) {\n      message += `**Sync Success**: ${result.sync_summary.successful_syncs}/${result.sync_summary.total_devices}\\\\n`;\n    }\n  }\n  \n  if (result.ci_sys_id) {\n    message += `**CI System ID**: ${result.ci_sys_id}\\\\n`;\n    if (result.ci_number) {\n      message += `**CI Number**: ${result.ci_number}\\\\n`;\n    }\n  }\n  \n  if (result.discovered_count !== undefined) {\n    message += `**Devices Discovered**: ${result.discovered_count}\\\\n`;\n    if (result.discovery_summary) {\n      message += `**Discovery Summary**:\\\\n`;\n      Object.entries(result.discovery_summary).forEach(([type, count]) => {\n        message += `  • ${type}: ${count}\\\\n`;\n      });\n    }\n  }\n  \n  if (result.compliance_score !== undefined) {\n    message += `**Compliance Score**: ${result.compliance_score}% (${result.compliance_status})\\\\n`;\n    message += `**Findings**: ${result.findings_count || 0}\\\\n`;\n    message += `**Recommendations**: ${result.recommendations_count || 0}\\\\n`;\n  }\n  \n  if (result.bulk_summary) {\n    message += `**Bulk Operations**:\\\\n`;\n    message += `  • Total: ${result.bulk_summary.total_operations}\\\\n`;\n    message += `  • Successful: ${result.bulk_summary.successful_operations}\\\\n`;\n    message += `  • Failed: ${result.bulk_summary.failed_operations}\\\\n`;\n  }\n  \n  // Add ServiceNow details\n  if (result.servicenow_response) {\n    message += `\\\\n**ServiceNow Details**:\\\\n`;\n    if (result.servicenow_response.sys_id) {\n      message += `  • System ID: ${result.servicenow_response.sys_id}\\\\n`;\n    }\n    if (result.servicenow_response.number) {\n      message += `  • Record Number: ${result.servicenow_response.number}\\\\n`;\n    }\n  }\n  \n  // Add performance metrics\n  if (result.sync_metrics) {\n    message += `\\\\n**Performance Metrics**:\\\\n`;\n    message += `  • Duration: ${Math.round(result.sync_metrics.operation_duration / 1000)}s\\\\n`;\n    message += `  • API Calls: ${result.sync_metrics.api_calls_made}\\\\n`;\n  }\n  \n  // Add action items for critical issues\n  if (alertLevel === 'critical') {\n    message += `\\\\n**Immediate Actions Required**:\\\\n`;\n    message += `• Check ServiceNow connectivity and credentials\\\\n`;\n    message += `• Verify Aruba Central API access\\\\n`;\n    message += `• Review operation parameters and retry\\\\n`;\n  }\n  \n  // Add recommendations for audit findings\n  if (result.operation === 'audit_assets' && result.findings_count > 0) {\n    message += `\\\\n**Audit Findings Summary**:\\\\n`;\n    message += `• Review ${result.findings_count} asset discrepancies\\\\n`;\n    message += `• Implement ${result.recommendations_count} improvement recommendations\\\\n`;\n    message += `• Target compliance score: 95%+\\\\n`;\n  }\n  \n  notifications.push({\n    json: {\n      channel: channel,\n      message: message,\n      alert_level: alertLevel,\n      result: result\n    }\n  });\n});\n\nreturn notifications;"
      }
    },
    {
      "id": "send-slack-notification",
      "name": "Send Slack Notification",
      "type": "n8n-nodes-base.slack",
      "typeVersion": 1,
      "position": [1750, 300],
      "parameters": {
        "channel": "={{$json.channel}}",
        "text": "={{$json.message}}",
        "attachments": [],
        "otherOptions": {}
      }
    },
    {
      "id": "webhook-response",
      "name": "Send Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1950, 300],
      "parameters": {
        "options": {}
      }
    }
  ],
  "connections": {
    "Asset Webhook Trigger": {
      "main": [
        [
          {
            "node": "Validate Asset Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validate Asset Request": {
      "main": [
        [
          {
            "node": "Set ServiceNow Config",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set ServiceNow Config": {
      "main": [
        [
          {
            "node": "Route Asset Operation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Route Asset Operation": {
      "main": [
        [
          {
            "node": "Device Synchronization",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "CI Management",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Device Discovery",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Relationship Mapping",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Inventory Management",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Asset Audit",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Process Asset Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Device Synchronization": {
      "main": [
        [
          {
            "node": "Process Asset Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "CI Management": {
      "main": [
        [
          {
            "node": "Process Asset Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Device Discovery": {
      "main": [
        [
          {
            "node": "Process Asset Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Relationship Mapping": {
      "main": [
        [
          {
            "node": "Process Asset Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Inventory Management": {
      "main": [
        [
          {
            "node": "Process Asset Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Asset Audit": {
      "main": [
        [
          {
            "node": "Process Asset Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Asset Results": {
      "main": [
        [
          {
            "node": "Generate Asset Alerts",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Asset Alerts": {
      "main": [
        [
          {
            "node": "Send Slack Notification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send Slack Notification": {
      "main": [
        [
          {
            "node": "Send Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1",
    "saveDataErrorExecution": "all",
    "saveDataSuccessExecution": "all",
    "saveManualExecutions": true,
    "saveExecutionProgress": true
  },
  "staticData": null,
  "meta": null,
  "pinData": null,
  "createdAt": "2025-07-17T23:16:06.707Z",
  "updatedAt": "2025-07-17T23:16:06.707Z"
}