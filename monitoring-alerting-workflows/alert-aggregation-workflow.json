{
  "name": "Alert Aggregation and Correlation",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "alert-aggregation",
        "responseMode": "onReceived",
        "options": {}
      },
      "id": "e1d1c5a8-8b4e-4b5a-9c8d-1e2f3a4b5c6d",
      "name": "Alert Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        240,
        300
      ],
      "webhookId": "alert-aggregation-webhook"
    },
    {
      "parameters": {
        "jsCode": "// Alert Aggregation and Correlation Engine\n// Processes incoming alerts from multiple sources and performs intelligent correlation\n\nconst incomingAlert = $input.item(0).json;\n\n// Alert processing configuration\nconst alertConfig = {\n  // Alert sources and their characteristics\n  sources: {\n    'aruba_central': {\n      name: 'Aruba Central',\n      priority_mapping: {\n        'critical': 1,\n        'high': 2,\n        'medium': 3,\n        'low': 4,\n        'info': 5\n      },\n      typical_volume: 'medium',\n      reliability: 'high'\n    },\n    'aos_cx': {\n      name: 'AOS-CX Switches',\n      priority_mapping: {\n        'emergency': 1,\n        'alert': 2,\n        'critical': 2,\n        'error': 3,\n        'warning': 4,\n        'notice': 5,\n        'info': 5\n      },\n      typical_volume: 'high',\n      reliability: 'high'\n    },\n    'edgeconnect': {\n      name: 'EdgeConnect SD-WAN',\n      priority_mapping: {\n        'critical': 1,\n        'major': 2,\n        'minor': 3,\n        'warning': 4,\n        'info': 5\n      },\n      typical_volume: 'medium',\n      reliability: 'high'\n    },\n    'uxi': {\n      name: 'UXI Sensors',\n      priority_mapping: {\n        'critical': 1,\n        'high': 2,\n        'medium': 3,\n        'low': 4\n      },\n      typical_volume: 'low',\n      reliability: 'medium'\n    },\n    'monitoring_system': {\n      name: 'Network Monitoring',\n      priority_mapping: {\n        'critical': 1,\n        'warning': 3,\n        'info': 5\n      },\n      typical_volume: 'high',\n      reliability: 'high'\n    },\n    'external_webhook': {\n      name: 'External System',\n      priority_mapping: {\n        'critical': 1,\n        'high': 2,\n        'medium': 3,\n        'low': 4,\n        'info': 5\n      },\n      typical_volume: 'variable',\n      reliability: 'medium'\n    }\n  },\n  \n  // Alert categories and their correlation rules\n  categories: {\n    'device_health': {\n      keywords: ['cpu', 'memory', 'temperature', 'disk', 'health', 'utilization'],\n      correlation_window: 300, // 5 minutes\n      suppression_threshold: 5, // Suppress if more than 5 similar alerts\n      escalation_time: 900      // 15 minutes\n    },\n    'connectivity': {\n      keywords: ['link', 'connection', 'interface', 'port', 'down', 'up', 'connectivity'],\n      correlation_window: 180, // 3 minutes\n      suppression_threshold: 3,\n      escalation_time: 300     // 5 minutes\n    },\n    'performance': {\n      keywords: ['latency', 'throughput', 'bandwidth', 'packet_loss', 'jitter', 'slow'],\n      correlation_window: 600, // 10 minutes\n      suppression_threshold: 10,\n      escalation_time: 1800    // 30 minutes\n    },\n    'security': {\n      keywords: ['security', 'intrusion', 'threat', 'malware', 'unauthorized', 'attack'],\n      correlation_window: 60,  // 1 minute\n      suppression_threshold: 1, // No suppression for security alerts\n      escalation_time: 120     // 2 minutes\n    },\n    'configuration': {\n      keywords: ['config', 'configuration', 'policy', 'rule', 'template'],\n      correlation_window: 900, // 15 minutes\n      suppression_threshold: 5,\n      escalation_time: 1800    // 30 minutes\n    },\n    'authentication': {\n      keywords: ['auth', 'authentication', 'login', 'credential', 'certificate'],\n      correlation_window: 300, // 5 minutes\n      suppression_threshold: 3,\n      escalation_time: 600     // 10 minutes\n    }\n  },\n  \n  // Alert correlation patterns\n  correlation_patterns: {\n    'cascade_failure': {\n      description: 'Multiple devices failing in sequence',\n      pattern: 'device_health alerts from multiple devices within 5 minutes',\n      severity_multiplier: 2.0\n    },\n    'network_partition': {\n      description: 'Network connectivity issues affecting multiple segments',\n      pattern: 'connectivity alerts from multiple network segments',\n      severity_multiplier: 1.5\n    },\n    'performance_degradation': {\n      description: 'Widespread performance issues',\n      pattern: 'performance alerts from multiple monitoring points',\n      severity_multiplier: 1.3\n    },\n    'security_incident': {\n      description: 'Coordinated security event',\n      pattern: 'security alerts from multiple sources',\n      severity_multiplier: 3.0\n    }\n  },\n  \n  // Notification routing rules\n  notification_rules: {\n    'critical_immediate': {\n      conditions: ['priority <= 1', 'category = security'],\n      channels: ['slack_critical', 'email_critical', 'sms_oncall'],\n      delay: 0\n    },\n    'high_priority': {\n      conditions: ['priority <= 2', 'category != security'],\n      channels: ['slack_alerts', 'email_alerts'],\n      delay: 60 // 1 minute\n    },\n    'medium_priority': {\n      conditions: ['priority = 3'],\n      channels: ['slack_alerts'],\n      delay: 300 // 5 minutes\n    },\n    'low_priority': {\n      conditions: ['priority >= 4'],\n      channels: ['email_digest'],\n      delay: 1800 // 30 minutes\n    }\n  }\n};\n\n// Process incoming alert\nconst processedAlert = {\n  alert_id: incomingAlert.alert_id || `alert_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n  source: incomingAlert.source || 'unknown',\n  original_severity: incomingAlert.severity || incomingAlert.priority || 'unknown',\n  message: incomingAlert.message || incomingAlert.description || 'No message provided',\n  device_id: incomingAlert.device_id || incomingAlert.device_name || 'unknown',\n  timestamp: incomingAlert.timestamp || new Date().toISOString(),\n  raw_data: incomingAlert\n};\n\n// Normalize priority based on source\nconst sourceConfig = alertConfig.sources[processedAlert.source] || alertConfig.sources['external_webhook'];\nconst normalizedPriority = sourceConfig.priority_mapping[processedAlert.original_severity.toLowerCase()] || 5;\n\n// Categorize alert\nlet alertCategory = 'unknown';\nlet categoryScore = 0;\n\nObject.keys(alertConfig.categories).forEach(category => {\n  const keywords = alertConfig.categories[category].keywords;\n  const messageText = processedAlert.message.toLowerCase();\n  \n  const matchCount = keywords.filter(keyword => messageText.includes(keyword)).length;\n  const score = matchCount / keywords.length;\n  \n  if (score > categoryScore) {\n    categoryScore = score;\n    alertCategory = category;\n  }\n});\n\n// Determine alert context\nconst alertContext = {\n  location: incomingAlert.location || incomingAlert.site || 'unknown',\n  device_type: incomingAlert.device_type || 'unknown',\n  network_segment: incomingAlert.network_segment || 'unknown',\n  service_affected: incomingAlert.service_affected || 'unknown',\n  impact_level: incomingAlert.impact_level || 'unknown'\n};\n\n// Calculate alert fingerprint for deduplication\nconst alertFingerprint = require('crypto')\n  .createHash('md5')\n  .update(`${processedAlert.source}_${alertCategory}_${processedAlert.device_id}_${processedAlert.message.substring(0, 50)}`)\n  .digest('hex');\n\n// Determine notification routing\nconst notificationRouting = [];\nObject.keys(alertConfig.notification_rules).forEach(ruleName => {\n  const rule = alertConfig.notification_rules[ruleName];\n  let shouldNotify = true;\n  \n  rule.conditions.forEach(condition => {\n    if (condition.includes('priority <= 1') && normalizedPriority > 1) shouldNotify = false;\n    if (condition.includes('priority <= 2') && normalizedPriority > 2) shouldNotify = false;\n    if (condition.includes('priority = 3') && normalizedPriority !== 3) shouldNotify = false;\n    if (condition.includes('priority >= 4') && normalizedPriority < 4) shouldNotify = false;\n    if (condition.includes('category = security') && alertCategory !== 'security') shouldNotify = false;\n    if (condition.includes('category != security') && alertCategory === 'security') shouldNotify = false;\n  });\n  \n  if (shouldNotify) {\n    notificationRouting.push({\n      rule: ruleName,\n      channels: rule.channels,\n      delay: rule.delay\n    });\n  }\n});\n\n// Generate correlation data for later processing\nconst correlationData = {\n  fingerprint: alertFingerprint,\n  category: alertCategory,\n  category_score: categoryScore,\n  correlation_window: alertConfig.categories[alertCategory]?.correlation_window || 300,\n  suppression_threshold: alertConfig.categories[alertCategory]?.suppression_threshold || 5,\n  escalation_time: alertConfig.categories[alertCategory]?.escalation_time || 900\n};\n\n// Generate alert summary\nconst alertSummary = {\n  alert_id: processedAlert.alert_id,\n  source: processedAlert.source,\n  source_name: sourceConfig.name,\n  category: alertCategory,\n  normalized_priority: normalizedPriority,\n  priority_label: ['critical', 'high', 'medium', 'low', 'info'][normalizedPriority - 1] || 'unknown',\n  device_id: processedAlert.device_id,\n  message: processedAlert.message,\n  timestamp: processedAlert.timestamp,\n  context: alertContext,\n  notification_routing: notificationRouting,\n  correlation_data: correlationData,\n  processing_time: new Date().toISOString()\n};\n\n// Add alert enrichment data\nconst enrichmentData = {\n  alert_age: 0, // Will be calculated when processing\n  similar_alerts_count: 0, // Will be populated from correlation\n  affected_users_estimate: 0, // Will be calculated based on device/location\n  business_impact: 'unknown', // Will be determined based on device criticality\n  recommended_actions: [], // Will be populated based on category and severity\n  escalation_required: false, // Will be determined by correlation engine\n  auto_remediation_available: false // Will be checked against remediation catalog\n};\n\n// Generate recommended actions based on category and severity\nconst recommendedActions = [];\n\nif (alertCategory === 'device_health' && normalizedPriority <= 2) {\n  recommendedActions.push({\n    action: 'check_device_status',\n    description: 'Verify device connectivity and basic health',\n    priority: 'immediate',\n    estimated_time: '2-5 minutes'\n  });\n  \n  if (processedAlert.message.toLowerCase().includes('cpu')) {\n    recommendedActions.push({\n      action: 'analyze_cpu_usage',\n      description: 'Analyze CPU utilization patterns and identify high-usage processes',\n      priority: 'high',\n      estimated_time: '5-10 minutes'\n    });\n  }\n  \n  if (processedAlert.message.toLowerCase().includes('memory')) {\n    recommendedActions.push({\n      action: 'check_memory_usage',\n      description: 'Check memory utilization and identify memory leaks',\n      priority: 'high',\n      estimated_time: '3-7 minutes'\n    });\n  }\n}\n\nif (alertCategory === 'connectivity' && normalizedPriority <= 2) {\n  recommendedActions.push({\n    action: 'verify_physical_connectivity',\n    description: 'Check physical cable connections and port status',\n    priority: 'immediate',\n    estimated_time: '1-3 minutes'\n  });\n  \n  recommendedActions.push({\n    action: 'check_spanning_tree',\n    description: 'Verify spanning tree protocol status and topology',\n    priority: 'high',\n    estimated_time: '5-10 minutes'\n  });\n}\n\nif (alertCategory === 'security') {\n  recommendedActions.push({\n    action: 'isolate_threat',\n    description: 'Isolate affected device/segment to prevent threat spread',\n    priority: 'critical',\n    estimated_time: '1-2 minutes'\n  });\n  \n  recommendedActions.push({\n    action: 'analyze_security_logs',\n    description: 'Analyze security logs for attack patterns and indicators',\n    priority: 'critical',\n    estimated_time: '10-15 minutes'\n  });\n}\n\nif (alertCategory === 'performance' && normalizedPriority <= 3) {\n  recommendedActions.push({\n    action: 'analyze_traffic_patterns',\n    description: 'Analyze network traffic patterns and identify bottlenecks',\n    priority: 'medium',\n    estimated_time: '5-10 minutes'\n  });\n  \n  recommendedActions.push({\n    action: 'check_qos_policies',\n    description: 'Verify QoS policies and traffic prioritization',\n    priority: 'medium',\n    estimated_time: '3-7 minutes'\n  });\n}\n\nenrichmentData.recommended_actions = recommendedActions;\n\n// Final processed alert object\nconst finalAlert = {\n  ...alertSummary,\n  enrichment: enrichmentData,\n  requires_correlation: true,\n  requires_notification: notificationRouting.length > 0,\n  processing_metadata: {\n    processed_at: new Date().toISOString(),\n    processing_version: '1.0.0',\n    correlation_required: true,\n    notification_required: notificationRouting.length > 0\n  }\n};\n\nreturn [{ json: finalAlert }];"
      },
      "id": "f2e3d6c9-9c5f-5c6a-ad9e-2f3a4b5c6d7e",
      "name": "Process Alert",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        460,
        300
      ]
    },
    {
      "parameters": {
        "url": "https://your-alert-database.com/api/v1/alerts/search",
        "method": "GET",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer your-alert-db-token"
            },
            {
              "name": "Accept",
              "value": "application/json"
            }
          ]
        },
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "fingerprint",
              "value": "={{$json.correlation_data.fingerprint}}"
            },
            {
              "name": "category",
              "value": "={{$json.category}}"
            },
            {
              "name": "device_id",
              "value": "={{$json.device_id}}"
            },
            {
              "name": "time_window",
              "value": "={{$json.correlation_data.correlation_window}}"
            },
            {
              "name": "limit",
              "value": "50"
            }
          ]
        },
        "options": {
          "timeout": 10000,
          "retry": {
            "maxTries": 3,
            "waitBetweenTries": 1000
          }
        }
      },
      "id": "a3b4c5d6-ad5f-6d7a-be8f-3a4b5c6d7e8f",
      "name": "Get Similar Alerts",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        680,
        200
      ]
    },
    {
      "parameters": {
        "url": "https://your-alert-database.com/api/v1/alerts/correlate",
        "method": "POST",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "Authorization",
              "value": "Bearer your-alert-db-token"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "alert_id",
              "value": "={{$json.alert_id}}"
            },
            {
              "name": "category",
              "value": "={{$json.category}}"
            },
            {
              "name": "device_id",
              "value": "={{$json.device_id}}"
            },
            {
              "name": "location",
              "value": "={{$json.context.location}}"
            },
            {
              "name": "network_segment",
              "value": "={{$json.context.network_segment}}"
            },
            {
              "name": "correlation_window",
              "value": "={{$json.correlation_data.correlation_window}}"
            }
          ]
        },
        "options": {
          "timeout": 15000,
          "retry": {
            "maxTries": 3,
            "waitBetweenTries": 2000
          }
        }
      },
      "id": "b4c5d6e7-be8f-7e8f-cf9a-4b5c6d7e8f9a",
      "name": "Correlate Alerts",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        680,
        300
      ]
    },
    {
      "parameters": {
        "url": "https://your-alert-database.com/api/v1/alerts",
        "method": "POST",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "Authorization",
              "value": "Bearer your-alert-db-token"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "alert",
              "value": "={{JSON.stringify($json)}}"
            }
          ]
        },
        "options": {
          "timeout": 10000,
          "retry": {
            "maxTries": 3,
            "waitBetweenTries": 1000
          }
        }
      },
      "id": "c5d6e7f8-cf9a-8f9a-da0b-5c6d7e8f9a0b",
      "name": "Store Alert",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        680,
        400
      ]
    },
    {
      "parameters": {
        "jsCode": "// Advanced Alert Correlation and Analysis\nconst currentAlert = $input.first().json;\nconst similarAlerts = $input.all()[1]?.json?.alerts || [];\nconst correlationResults = $input.all()[2]?.json || {};\n\n// Analyze similar alerts for patterns\nconst alertAnalysis = {\n  similar_alerts_count: similarAlerts.length,\n  duplicate_alerts: similarAlerts.filter(a => a.fingerprint === currentAlert.correlation_data.fingerprint).length,\n  related_alerts: similarAlerts.filter(a => a.fingerprint !== currentAlert.correlation_data.fingerprint).length,\n  time_pattern: 'none',\n  severity_escalation: false,\n  geographic_spread: 'none',\n  device_type_pattern: 'none'\n};\n\n// Analyze timing patterns\nif (similarAlerts.length > 0) {\n  const alertTimes = similarAlerts.map(a => new Date(a.timestamp).getTime());\n  const currentTime = new Date(currentAlert.timestamp).getTime();\n  const timeDifferences = alertTimes.map(t => Math.abs(currentTime - t));\n  \n  // Check for burst pattern (multiple alerts within 5 minutes)\n  const burstAlerts = timeDifferences.filter(diff => diff < 300000).length;\n  if (burstAlerts > 3) {\n    alertAnalysis.time_pattern = 'burst';\n  }\n  \n  // Check for steady pattern (alerts spread over time)\n  const avgTimeDiff = timeDifferences.reduce((sum, diff) => sum + diff, 0) / timeDifferences.length;\n  if (avgTimeDiff > 600000 && burstAlerts === 0) {\n    alertAnalysis.time_pattern = 'steady';\n  }\n}\n\n// Analyze severity escalation\nif (similarAlerts.length > 0) {\n  const severities = similarAlerts.map(a => a.normalized_priority);\n  const avgSeverity = severities.reduce((sum, sev) => sum + sev, 0) / severities.length;\n  \n  if (currentAlert.normalized_priority < avgSeverity) {\n    alertAnalysis.severity_escalation = true;\n  }\n}\n\n// Analyze geographic spread\nconst locations = similarAlerts.map(a => a.context?.location).filter(loc => loc && loc !== 'unknown');\nconst uniqueLocations = [...new Set(locations)];\nif (uniqueLocations.length > 1) {\n  if (uniqueLocations.length > 5) {\n    alertAnalysis.geographic_spread = 'widespread';\n  } else if (uniqueLocations.length > 2) {\n    alertAnalysis.geographic_spread = 'multi_site';\n  } else {\n    alertAnalysis.geographic_spread = 'local';\n  }\n}\n\n// Analyze device type patterns\nconst deviceTypes = similarAlerts.map(a => a.context?.device_type).filter(type => type && type !== 'unknown');\nconst uniqueDeviceTypes = [...new Set(deviceTypes)];\nif (uniqueDeviceTypes.length > 1) {\n  alertAnalysis.device_type_pattern = 'multi_device_type';\n} else if (uniqueDeviceTypes.length === 1) {\n  alertAnalysis.device_type_pattern = 'single_device_type';\n}\n\n// Determine correlation patterns\nconst correlationPatterns = [];\n\n// Check for cascade failure pattern\nif (alertAnalysis.time_pattern === 'burst' && \n    alertAnalysis.geographic_spread === 'widespread' && \n    currentAlert.category === 'device_health') {\n  correlationPatterns.push({\n    pattern: 'cascade_failure',\n    confidence: 0.85,\n    description: 'Multiple devices failing in rapid succession across different locations',\n    severity_multiplier: 2.0\n  });\n}\n\n// Check for network partition pattern\nif (alertAnalysis.time_pattern === 'burst' && \n    currentAlert.category === 'connectivity' && \n    alertAnalysis.geographic_spread === 'multi_site') {\n  correlationPatterns.push({\n    pattern: 'network_partition',\n    confidence: 0.75,\n    description: 'Network connectivity issues affecting multiple sites',\n    severity_multiplier: 1.5\n  });\n}\n\n// Check for performance degradation pattern\nif (alertAnalysis.time_pattern === 'steady' && \n    currentAlert.category === 'performance' && \n    alertAnalysis.similar_alerts_count > 10) {\n  correlationPatterns.push({\n    pattern: 'performance_degradation',\n    confidence: 0.70,\n    description: 'Gradual performance degradation across multiple network points',\n    severity_multiplier: 1.3\n  });\n}\n\n// Check for security incident pattern\nif (currentAlert.category === 'security' && \n    alertAnalysis.similar_alerts_count > 0) {\n  correlationPatterns.push({\n    pattern: 'security_incident',\n    confidence: 0.90,\n    description: 'Coordinated security event affecting multiple systems',\n    severity_multiplier: 3.0\n  });\n}\n\n// Calculate adjusted priority based on correlation\nlet adjustedPriority = currentAlert.normalized_priority;\nlet adjustmentReason = 'no_adjustment';\n\nif (correlationPatterns.length > 0) {\n  const maxSeverityMultiplier = Math.max(...correlationPatterns.map(p => p.severity_multiplier));\n  const originalPriority = adjustedPriority;\n  adjustedPriority = Math.max(1, Math.round(adjustedPriority / maxSeverityMultiplier));\n  \n  if (adjustedPriority < originalPriority) {\n    adjustmentReason = 'escalated_due_to_correlation';\n  }\n}\n\n// Check for alert suppression\nlet suppressAlert = false;\nlet suppressionReason = 'none';\n\nif (alertAnalysis.duplicate_alerts > currentAlert.correlation_data.suppression_threshold) {\n  suppressAlert = true;\n  suppressionReason = 'duplicate_threshold_exceeded';\n}\n\n// Determine business impact\nlet businessImpact = 'low';\nlet impactReason = 'standard_assessment';\n\nif (correlationPatterns.some(p => p.pattern === 'cascade_failure')) {\n  businessImpact = 'critical';\n  impactReason = 'cascade_failure_detected';\n} else if (correlationPatterns.some(p => p.pattern === 'security_incident')) {\n  businessImpact = 'critical';\n  impactReason = 'security_incident_detected';\n} else if (correlationPatterns.some(p => p.pattern === 'network_partition')) {\n  businessImpact = 'high';\n  impactReason = 'network_partition_detected';\n} else if (adjustedPriority <= 2) {\n  businessImpact = 'medium';\n  impactReason = 'high_priority_alert';\n}\n\n// Estimate affected users\nlet affectedUsersEstimate = 0;\nif (currentAlert.context.location !== 'unknown') {\n  // Simplified estimation based on location and device type\n  const locationMultiplier = {\n    'headquarters': 500,\n    'main_office': 300,\n    'branch_office': 100,\n    'remote_site': 50,\n    'data_center': 1000\n  };\n  \n  const deviceMultiplier = {\n    'core_switch': 0.8,\n    'distribution_switch': 0.6,\n    'access_switch': 0.3,\n    'wireless_controller': 0.7,\n    'access_point': 0.2,\n    'gateway': 0.9\n  };\n  \n  const basePeople = locationMultiplier[currentAlert.context.location] || 100;\n  const deviceImpact = deviceMultiplier[currentAlert.context.device_type] || 0.1;\n  \n  affectedUsersEstimate = Math.round(basePeople * deviceImpact);\n  \n  // Apply correlation multiplier\n  if (correlationPatterns.length > 0) {\n    const correlationMultiplier = Math.max(...correlationPatterns.map(p => p.severity_multiplier));\n    affectedUsersEstimate = Math.round(affectedUsersEstimate * correlationMultiplier);\n  }\n}\n\n// Generate enhanced recommended actions\nconst enhancedActions = [...currentAlert.enrichment.recommended_actions];\n\n// Add correlation-based actions\nif (correlationPatterns.some(p => p.pattern === 'cascade_failure')) {\n  enhancedActions.unshift({\n    action: 'activate_incident_response',\n    description: 'Activate incident response team for cascade failure',\n    priority: 'critical',\n    estimated_time: '5-10 minutes',\n    automation_available: true\n  });\n}\n\nif (correlationPatterns.some(p => p.pattern === 'security_incident')) {\n  enhancedActions.unshift({\n    action: 'security_incident_response',\n    description: 'Initiate security incident response procedures',\n    priority: 'critical',\n    estimated_time: '2-5 minutes',\n    automation_available: true\n  });\n}\n\nif (alertAnalysis.similar_alerts_count > 10) {\n  enhancedActions.push({\n    action: 'analyze_root_cause',\n    description: 'Perform root cause analysis for recurring issue',\n    priority: 'high',\n    estimated_time: '15-30 minutes',\n    automation_available: false\n  });\n}\n\n// Create final correlated alert\nconst correlatedAlert = {\n  ...currentAlert,\n  correlation_analysis: alertAnalysis,\n  correlation_patterns: correlationPatterns,\n  adjusted_priority: adjustedPriority,\n  priority_adjustment_reason: adjustmentReason,\n  business_impact: businessImpact,\n  business_impact_reason: impactReason,\n  affected_users_estimate: affectedUsersEstimate,\n  suppress_alert: suppressAlert,\n  suppression_reason: suppressionReason,\n  enrichment: {\n    ...currentAlert.enrichment,\n    similar_alerts_count: alertAnalysis.similar_alerts_count,\n    business_impact: businessImpact,\n    recommended_actions: enhancedActions,\n    escalation_required: adjustedPriority < currentAlert.normalized_priority,\n    auto_remediation_available: enhancedActions.some(a => a.automation_available)\n  },\n  correlation_metadata: {\n    correlation_completed_at: new Date().toISOString(),\n    correlation_confidence: correlationPatterns.length > 0 ? Math.max(...correlationPatterns.map(p => p.confidence)) : 0,\n    patterns_detected: correlationPatterns.length,\n    similar_alerts_analyzed: similarAlerts.length\n  }\n};\n\nreturn [{ json: correlatedAlert }];"
      },
      "id": "d6e7f8a9-da0b-9a0b-eb1c-6d7e8f9a0b1c",
      "name": "Correlate and Analyze",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        900,
        300
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "condition1",
              "leftValue": "={{$json.suppress_alert}}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "true"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "e7f8a9b0-eb1c-a0b1-fc2d-7e8f9a0b1c2d",
      "name": "Check Suppression",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        1120,
        300
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "condition1",
              "leftValue": "={{$json.adjusted_priority}}",
              "rightValue": 1,
              "operator": {
                "type": "number",
                "operation": "equals"
              }
            }
          ],
          "combinator": "or",
          "conditions2": [
            {
              "id": "condition2",
              "leftValue": "={{$json.category}}",
              "rightValue": "security",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ]
        },
        "options": {}
      },
      "id": "f8a9b0c1-fc2d-b1c2-ad3e-8f9a0b1c2d3e",
      "name": "Check Critical Priority",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        1340,
        200
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "condition1",
              "leftValue": "={{$json.adjusted_priority}}",
              "rightValue": 2,
              "operator": {
                "type": "number",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "a9b0c1d2-ad3e-c2d3-be4f-9a0b1c2d3e4f",
      "name": "Check High Priority",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        1340,
        400
      ]
    },
    {
      "parameters": {
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "slackApi",
        "select": "channel",
        "channelId": {
          "__rl": true,
          "value": "C06TQSQMKQM",
          "mode": "id"
        },
        "text": "🚨 **CRITICAL ALERT** 🚨\\n\\n**Alert ID:** {{$json.alert_id}}\\n**Source:** {{$json.source_name}}\\n**Category:** {{$json.category.toUpperCase()}}\\n**Priority:** {{$json.priority_label.toUpperCase()}} ({{$json.adjusted_priority < $json.normalized_priority ? 'ESCALATED' : 'NORMAL'}})\\n**Business Impact:** {{$json.business_impact.toUpperCase()}}\\n\\n**Device:** {{$json.device_id}}\\n**Location:** {{$json.context.location}}\\n**Message:** {{$json.message}}\\n\\n**Correlation Analysis:**\\n{{$json.correlation_patterns.map(p => `• ${p.description} (${Math.round(p.confidence * 100)}% confidence)`).join('\\n')}}\\n\\n**Impact Assessment:**\\n• Affected Users: ~{{$json.affected_users_estimate}}\\n• Similar Alerts: {{$json.correlation_analysis.similar_alerts_count}}\\n• Business Impact: {{$json.business_impact_reason}}\\n\\n**Immediate Actions Required:**\\n{{$json.enrichment.recommended_actions.filter(a => a.priority === 'critical').map(a => `• ${a.description} (${a.estimated_time})`).join('\\n')}}\\n\\n**Timestamp:** {{$json.timestamp}}\\n**Escalation Required:** {{$json.enrichment.escalation_required ? 'YES' : 'NO'}}",
        "otherOptions": {
          "mrkdwn": true,
          "unfurl_links": false,
          "unfurl_media": false
        }
      },
      "id": "b0c1d2e3-be4f-d3e4-cf5a-0b1c2d3e4f5a",
      "name": "Critical Alert Notification",
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2,
      "position": [
        1560,
        100
      ]
    },
    {
      "parameters": {
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "slackApi",
        "select": "channel",
        "channelId": {
          "__rl": true,
          "value": "C06TQSQMKQM",
          "mode": "id"
        },
        "text": "⚠️ **High Priority Alert** ⚠️\\n\\n**Alert ID:** {{$json.alert_id}}\\n**Source:** {{$json.source_name}}\\n**Category:** {{$json.category.toUpperCase()}}\\n**Priority:** {{$json.priority_label.toUpperCase()}}\\n**Business Impact:** {{$json.business_impact.toUpperCase()}}\\n\\n**Device:** {{$json.device_id}}\\n**Location:** {{$json.context.location}}\\n**Message:** {{$json.message}}\\n\\n**Analysis:**\\n• Similar Alerts: {{$json.correlation_analysis.similar_alerts_count}}\\n• Time Pattern: {{$json.correlation_analysis.time_pattern}}\\n• Geographic Spread: {{$json.correlation_analysis.geographic_spread}}\\n• Estimated Impact: ~{{$json.affected_users_estimate}} users\\n\\n**Recommended Actions:**\\n{{$json.enrichment.recommended_actions.slice(0, 3).map(a => `• ${a.description} (${a.estimated_time})`).join('\\n')}}\\n\\n**Timestamp:** {{$json.timestamp}}",
        "otherOptions": {
          "mrkdwn": true,
          "unfurl_links": false,
          "unfurl_media": false
        }
      },
      "id": "c1d2e3f4-cf5a-e4f5-da6b-1c2d3e4f5a6b",
      "name": "High Priority Alert Notification",
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2,
      "position": [
        1560,
        300
      ]
    },
    {
      "parameters": {
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "slackApi",
        "select": "channel",
        "channelId": {
          "__rl": true,
          "value": "C06TQSQMKQM",
          "mode": "id"
        },
        "text": "ℹ️ **Alert Suppressed** ℹ️\\n\\n**Alert ID:** {{$json.alert_id}}\\n**Source:** {{$json.source_name}}\\n**Category:** {{$json.category}}\\n**Suppression Reason:** {{$json.suppression_reason}}\\n\\n**Message:** {{$json.message}}\\n**Device:** {{$json.device_id}}\\n\\n**Suppression Details:**\\n• Similar Alerts: {{$json.correlation_analysis.similar_alerts_count}}\\n• Suppression Threshold: {{$json.correlation_data.suppression_threshold}}\\n• Duplicate Alerts: {{$json.correlation_analysis.duplicate_alerts}}\\n\\n**Note:** This alert has been suppressed to reduce noise. The underlying issue may still require attention.\\n\\n**Timestamp:** {{$json.timestamp}}",
        "otherOptions": {
          "mrkdwn": true,
          "unfurl_links": false,
          "unfurl_media": false
        }
      },
      "id": "d2e3f4a5-da6b-f5a6-eb7c-2d3e4f5a6b7c",
      "name": "Suppressed Alert Notification",
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2,
      "position": [
        1560,
        500
      ]
    },
    {
      "parameters": {
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "slackApi",
        "select": "channel",
        "channelId": {
          "__rl": true,
          "value": "C06TQSQMKQM",
          "mode": "id"
        },
        "text": "📊 **Medium Priority Alert** 📊\\n\\n**Alert ID:** {{$json.alert_id}}\\n**Source:** {{$json.source_name}}\\n**Category:** {{$json.category}}\\n**Priority:** {{$json.priority_label}}\\n\\n**Device:** {{$json.device_id}}\\n**Message:** {{$json.message}}\\n\\n**Context:**\\n• Location: {{$json.context.location}}\\n• Similar Alerts: {{$json.correlation_analysis.similar_alerts_count}}\\n• Business Impact: {{$json.business_impact}}\\n\\n**Recommended Actions:**\\n{{$json.enrichment.recommended_actions.slice(0, 2).map(a => `• ${a.description}`).join('\\n')}}\\n\\n**Timestamp:** {{$json.timestamp}}",
        "otherOptions": {
          "mrkdwn": true,
          "unfurl_links": false,
          "unfurl_media": false
        }
      },
      "id": "e3f4a5b6-eb7c-a6b7-fc8d-3e4f5a6b7c8d",
      "name": "Medium Priority Alert Notification",
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2,
      "position": [
        1560,
        700
      ]
    },
    {
      "parameters": {
        "respondWith": "allIncomingItems",
        "options": {}
      },
      "id": "f4a5b6c7-fc8d-b7c8-ad9e-4f5a6b7c8d9e",
      "name": "Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        1780,
        300
      ]
    }
  ],
  "connections": {
    "Alert Webhook": {
      "main": [
        [
          {
            "node": "Process Alert",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Alert": {
      "main": [
        [
          {
            "node": "Get Similar Alerts",
            "type": "main",
            "index": 0
          },
          {
            "node": "Correlate Alerts",
            "type": "main",
            "index": 0
          },
          {
            "node": "Store Alert",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Similar Alerts": {
      "main": [
        [
          {
            "node": "Correlate and Analyze",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Correlate Alerts": {
      "main": [
        [
          {
            "node": "Correlate and Analyze",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Store Alert": {
      "main": [
        [
          {
            "node": "Correlate and Analyze",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Correlate and Analyze": {
      "main": [
        [
          {
            "node": "Check Suppression",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Suppression": {
      "main": [
        [
          {
            "node": "Suppressed Alert Notification",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Check Critical Priority",
            "type": "main",
            "index": 0
          },
          {
            "node": "Check High Priority",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Critical Priority": {
      "main": [
        [
          {
            "node": "Critical Alert Notification",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Check High Priority",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check High Priority": {
      "main": [
        [
          {
            "node": "High Priority Alert Notification",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Medium Priority Alert Notification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Critical Alert Notification": {
      "main": [
        [
          {
            "node": "Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "High Priority Alert Notification": {
      "main": [
        [
          {
            "node": "Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Suppressed Alert Notification": {
      "main": [
        [
          {
            "node": "Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Medium Priority Alert Notification": {
      "main": [
        [
          {
            "node": "Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "versionId": "1.0.0",
  "meta": {
    "templateCreatedBy": "Claude Code",
    "description": "Advanced alert aggregation and correlation workflow that processes alerts from multiple sources, performs intelligent correlation analysis, detects patterns (cascade failures, network partitions, security incidents), and routes notifications based on priority and business impact. Includes alert suppression, escalation, and automated remediation suggestions.",
    "tags": ["alerting", "correlation", "aggregation", "incident-response", "security", "automation", "notification", "escalation"]
  }
}