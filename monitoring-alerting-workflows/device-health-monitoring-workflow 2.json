{
  "name": "Device Health Monitoring",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "minutes",
              "minutesInterval": 5
            }
          ]
        }
      },
      "id": "e1d1c5a8-8b4e-4b5a-9c8d-1e2f3a4b5c6d",
      "name": "Every 5 Minutes",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1,
      "position": [
        240,
        300
      ]
    },
    {
      "parameters": {
        "jsCode": "// Device Health Monitoring Configuration\n// Monitors CPU, Memory, Temperature, Link Status, and Performance Metrics\n\nconst monitoringConfig = {\n  // Device types to monitor\n  device_types: ['switch', 'access_point', 'gateway', 'controller', 'sensor'],\n  \n  // Health check intervals\n  intervals: {\n    critical_devices: '1m',\n    standard_devices: '5m',\n    low_priority_devices: '15m'\n  },\n  \n  // Health thresholds\n  thresholds: {\n    cpu: {\n      warning: 70,\n      critical: 85,\n      unit: 'percentage'\n    },\n    memory: {\n      warning: 75,\n      critical: 90,\n      unit: 'percentage'\n    },\n    temperature: {\n      warning: 60,\n      critical: 75,\n      unit: 'celsius'\n    },\n    disk_usage: {\n      warning: 80,\n      critical: 95,\n      unit: 'percentage'\n    },\n    uptime: {\n      minimum: 300,\n      unit: 'seconds'\n    },\n    link_utilization: {\n      warning: 80,\n      critical: 95,\n      unit: 'percentage'\n    },\n    packet_loss: {\n      warning: 1,\n      critical: 5,\n      unit: 'percentage'\n    },\n    latency: {\n      warning: 100,\n      critical: 500,\n      unit: 'milliseconds'\n    }\n  },\n  \n  // Device priorities\n  device_priorities: {\n    'core_switch': 'critical',\n    'distribution_switch': 'high',\n    'access_switch': 'medium',\n    'wireless_controller': 'critical',\n    'access_point': 'medium',\n    'gateway': 'critical',\n    'sensor': 'low'\n  },\n  \n  // Notification settings\n  notifications: {\n    immediate_alerts: ['critical'],\n    batch_alerts: ['warning'],\n    suppression_time: 300, // 5 minutes\n    escalation_time: 1800  // 30 minutes\n  },\n  \n  timestamp: new Date().toISOString()\n};\n\n// API endpoints for different device types\nconst apiEndpoints = {\n  aruba_central: {\n    base_url: 'https://apigw-uswest4.central.arubanetworks.com',\n    devices: '/api/v2/devices',\n    monitoring: '/api/v2/monitoring',\n    alerts: '/api/v2/alerts'\n  },\n  aos_cx: {\n    base_url: 'https://switch-ip:443',\n    system: '/rest/v10.08/system',\n    interfaces: '/rest/v10.08/system/interfaces',\n    monitoring: '/rest/v10.08/monitoring'\n  },\n  edgeconnect: {\n    base_url: 'https://orchestrator.example.com',\n    appliances: '/api/v1/appliances',\n    health: '/api/v1/health',\n    metrics: '/api/v1/metrics'\n  },\n  uxi: {\n    base_url: 'https://api.uxi.aruba.com',\n    sensors: '/api/v1/sensors',\n    tests: '/api/v1/tests',\n    metrics: '/api/v1/metrics'\n  }\n};\n\n// Generate monitoring tasks\nconst monitoringTasks = [\n  {\n    task_id: 'central_devices',\n    type: 'aruba_central',\n    description: 'Monitor Aruba Central managed devices',\n    endpoint: apiEndpoints.aruba_central.devices,\n    priority: 'high',\n    interval: monitoringConfig.intervals.critical_devices\n  },\n  {\n    task_id: 'switches_health',\n    type: 'aos_cx',\n    description: 'Monitor AOS-CX switch health',\n    endpoint: apiEndpoints.aos_cx.system,\n    priority: 'critical',\n    interval: monitoringConfig.intervals.critical_devices\n  },\n  {\n    task_id: 'wan_appliances',\n    type: 'edgeconnect',\n    description: 'Monitor EdgeConnect appliances',\n    endpoint: apiEndpoints.edgeconnect.appliances,\n    priority: 'high',\n    interval: monitoringConfig.intervals.standard_devices\n  },\n  {\n    task_id: 'uxi_sensors',\n    type: 'uxi',\n    description: 'Monitor UXI sensors',\n    endpoint: apiEndpoints.uxi.sensors,\n    priority: 'medium',\n    interval: monitoringConfig.intervals.low_priority_devices\n  }\n];\n\nreturn [{\n  json: {\n    monitoring_config: monitoringConfig,\n    api_endpoints: apiEndpoints,\n    monitoring_tasks: monitoringTasks,\n    execution_time: new Date().toISOString()\n  }\n}];"
      },
      "id": "f2e3d6c9-9c5f-5c6a-ad9e-2f3a4b5c6d7e",
      "name": "Initialize Monitoring",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        460,
        300
      ]
    },
    {
      "parameters": {
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "arubaNetworkingCentralApi",
        "url": "={{$json.api_endpoints.aruba_central.base_url}}{{$json.api_endpoints.aruba_central.devices}}",
        "method": "GET",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer {{$credentials.accessToken}}"
            },
            {
              "name": "Accept",
              "value": "application/json"
            }
          ]
        },
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "limit",
              "value": "1000"
            },
            {
              "name": "offset",
              "value": "0"
            },
            {
              "name": "calculate_total",
              "value": "true"
            }
          ]
        },
        "options": {
          "timeout": 30000,
          "retry": {
            "maxTries": 3,
            "waitBetweenTries": 2000
          }
        }
      },
      "id": "a3b4c5d6-ad5f-6d7a-be8f-3a4b5c6d7e8f",
      "name": "Get Central Devices",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        680,
        200
      ]
    },
    {
      "parameters": {
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "arubaNetworkingCentralApi",
        "url": "={{$json.api_endpoints.aruba_central.base_url}}{{$json.api_endpoints.aruba_central.monitoring}}/stats",
        "method": "GET",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer {{$credentials.accessToken}}"
            },
            {
              "name": "Accept",
              "value": "application/json"
            }
          ]
        },
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "device_type",
              "value": "all"
            },
            {
              "name": "timeframe",
              "value": "5m"
            },
            {
              "name": "stats",
              "value": "cpu,memory,temperature,uptime"
            }
          ]
        },
        "options": {
          "timeout": 30000,
          "retry": {
            "maxTries": 3,
            "waitBetweenTries": 2000
          }
        }
      },
      "id": "b4c5d6e7-be8f-7e8f-cf9a-4b5c6d7e8f9a",
      "name": "Get Device Stats",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        680,
        300
      ]
    },
    {
      "parameters": {
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "arubaNetworkingCentralApi",
        "url": "={{$json.api_endpoints.aruba_central.base_url}}{{$json.api_endpoints.aruba_central.alerts}}",
        "method": "GET",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer {{$credentials.accessToken}}"
            },
            {
              "name": "Accept",
              "value": "application/json"
            }
          ]
        },
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "limit",
              "value": "100"
            },
            {
              "name": "offset",
              "value": "0"
            },
            {
              "name": "severity",
              "value": "high,critical"
            },
            {
              "name": "from_timestamp",
              "value": "={{Math.floor((Date.now() - 300000) / 1000)}}"
            }
          ]
        },
        "options": {
          "timeout": 30000,
          "retry": {
            "maxTries": 3,
            "waitBetweenTries": 2000
          }
        }
      },
      "id": "c5d6e7f8-cf9a-8f9a-da0b-5c6d7e8f9a0b",
      "name": "Get Active Alerts",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        680,
        400
      ]
    },
    {
      "parameters": {
        "jsCode": "// Process and analyze device health data\nconst devices = $input.first()?.json?.devices || [];\nconst stats = $input.all()[1]?.json?.stats || [];\nconst alerts = $input.all()[2]?.json?.alerts || [];\n\nconst thresholds = {\n  cpu: { warning: 70, critical: 85 },\n  memory: { warning: 75, critical: 90 },\n  temperature: { warning: 60, critical: 75 },\n  uptime: { minimum: 300 }\n};\n\n// Device health analysis\nconst deviceHealth = devices.map(device => {\n  const deviceStats = stats.find(s => s.device_id === device.serial) || {};\n  const deviceAlerts = alerts.filter(a => a.device_id === device.serial);\n  \n  // Calculate health score (0-100)\n  let healthScore = 100;\n  const issues = [];\n  \n  // CPU check\n  if (deviceStats.cpu_usage > thresholds.cpu.critical) {\n    healthScore -= 30;\n    issues.push({ type: 'cpu', severity: 'critical', value: deviceStats.cpu_usage });\n  } else if (deviceStats.cpu_usage > thresholds.cpu.warning) {\n    healthScore -= 15;\n    issues.push({ type: 'cpu', severity: 'warning', value: deviceStats.cpu_usage });\n  }\n  \n  // Memory check\n  if (deviceStats.memory_usage > thresholds.memory.critical) {\n    healthScore -= 25;\n    issues.push({ type: 'memory', severity: 'critical', value: deviceStats.memory_usage });\n  } else if (deviceStats.memory_usage > thresholds.memory.warning) {\n    healthScore -= 10;\n    issues.push({ type: 'memory', severity: 'warning', value: deviceStats.memory_usage });\n  }\n  \n  // Temperature check\n  if (deviceStats.temperature > thresholds.temperature.critical) {\n    healthScore -= 20;\n    issues.push({ type: 'temperature', severity: 'critical', value: deviceStats.temperature });\n  } else if (deviceStats.temperature > thresholds.temperature.warning) {\n    healthScore -= 10;\n    issues.push({ type: 'temperature', severity: 'warning', value: deviceStats.temperature });\n  }\n  \n  // Uptime check\n  if (deviceStats.uptime < thresholds.uptime.minimum) {\n    healthScore -= 15;\n    issues.push({ type: 'uptime', severity: 'warning', value: deviceStats.uptime });\n  }\n  \n  // Active alerts impact\n  deviceAlerts.forEach(alert => {\n    if (alert.severity === 'critical') {\n      healthScore -= 20;\n    } else if (alert.severity === 'high') {\n      healthScore -= 10;\n    }\n  });\n  \n  // Ensure health score doesn't go below 0\n  healthScore = Math.max(0, healthScore);\n  \n  // Determine overall health status\n  let healthStatus = 'healthy';\n  if (healthScore < 30) {\n    healthStatus = 'critical';\n  } else if (healthScore < 60) {\n    healthStatus = 'warning';\n  } else if (healthScore < 90) {\n    healthStatus = 'degraded';\n  }\n  \n  return {\n    device_id: device.serial,\n    device_name: device.name,\n    device_type: device.type,\n    model: device.model,\n    site: device.site,\n    health_score: healthScore,\n    health_status: healthStatus,\n    issues: issues,\n    stats: {\n      cpu_usage: deviceStats.cpu_usage || 0,\n      memory_usage: deviceStats.memory_usage || 0,\n      temperature: deviceStats.temperature || 0,\n      uptime: deviceStats.uptime || 0\n    },\n    active_alerts: deviceAlerts.length,\n    last_seen: deviceStats.last_seen || device.last_modified,\n    online: device.status === 'Up'\n  };\n});\n\n// Generate summary statistics\nconst summary = {\n  total_devices: deviceHealth.length,\n  healthy_devices: deviceHealth.filter(d => d.health_status === 'healthy').length,\n  degraded_devices: deviceHealth.filter(d => d.health_status === 'degraded').length,\n  warning_devices: deviceHealth.filter(d => d.health_status === 'warning').length,\n  critical_devices: deviceHealth.filter(d => d.health_status === 'critical').length,\n  offline_devices: deviceHealth.filter(d => !d.online).length,\n  average_health_score: deviceHealth.reduce((sum, d) => sum + d.health_score, 0) / deviceHealth.length || 0,\n  total_issues: deviceHealth.reduce((sum, d) => sum + d.issues.length, 0),\n  total_alerts: deviceHealth.reduce((sum, d) => sum + d.active_alerts, 0)\n};\n\n// Identify devices requiring immediate attention\nconst criticalDevices = deviceHealth.filter(d => d.health_status === 'critical');\nconst warningDevices = deviceHealth.filter(d => d.health_status === 'warning');\nconst offlineDevices = deviceHealth.filter(d => !d.online);\n\n// Generate recommendations\nconst recommendations = [];\n\nif (criticalDevices.length > 0) {\n  recommendations.push({\n    priority: 'high',\n    action: 'immediate_attention',\n    description: `${criticalDevices.length} devices require immediate attention`,\n    devices: criticalDevices.map(d => d.device_name)\n  });\n}\n\nif (warningDevices.length > 0) {\n  recommendations.push({\n    priority: 'medium',\n    action: 'scheduled_maintenance',\n    description: `${warningDevices.length} devices should be scheduled for maintenance`,\n    devices: warningDevices.map(d => d.device_name)\n  });\n}\n\nif (offlineDevices.length > 0) {\n  recommendations.push({\n    priority: 'high',\n    action: 'connectivity_check',\n    description: `${offlineDevices.length} devices are offline and need connectivity verification`,\n    devices: offlineDevices.map(d => d.device_name)\n  });\n}\n\n// Check for trending issues\nconst issueTypes = {};\ndeviceHealth.forEach(device => {\n  device.issues.forEach(issue => {\n    if (!issueTypes[issue.type]) {\n      issueTypes[issue.type] = { count: 0, severity: [] };\n    }\n    issueTypes[issue.type].count++;\n    issueTypes[issue.type].severity.push(issue.severity);\n  });\n});\n\nObject.keys(issueTypes).forEach(issueType => {\n  if (issueTypes[issueType].count > 5) {\n    recommendations.push({\n      priority: 'medium',\n      action: 'investigate_trending',\n      description: `${issueType} issues detected on ${issueTypes[issueType].count} devices - investigate trending problem`,\n      issue_type: issueType\n    });\n  }\n});\n\nreturn [{\n  json: {\n    timestamp: new Date().toISOString(),\n    summary: summary,\n    device_health: deviceHealth,\n    critical_devices: criticalDevices,\n    warning_devices: warningDevices,\n    offline_devices: offlineDevices,\n    recommendations: recommendations,\n    issue_trends: issueTypes,\n    monitoring_interval: '5m',\n    next_check: new Date(Date.now() + 300000).toISOString()\n  }\n}];"
      },
      "id": "d6e7f8a9-da0b-9a0b-eb1c-6d7e8f9a0b1c",
      "name": "Analyze Device Health",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        900,
        300
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "condition1",
              "leftValue": "={{$json.critical_devices.length}}",
              "rightValue": 0,
              "operator": {
                "type": "number",
                "operation": "gt"
              }
            }
          ],
          "combinator": "or",
          "conditions2": [
            {
              "id": "condition2",
              "leftValue": "={{$json.offline_devices.length}}",
              "rightValue": 0,
              "operator": {
                "type": "number",
                "operation": "gt"
              }
            }
          ]
        },
        "options": {}
      },
      "id": "e7f8a9b0-eb1c-a0b1-fc2d-7e8f9a0b1c2d",
      "name": "Check Critical Issues",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        1120,
        300
      ]
    },
    {
      "parameters": {
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "slackApi",
        "select": "channel",
        "channelId": {
          "__rl": true,
          "value": "C06TQSQMKQM",
          "mode": "id"
        },
        "text": "🚨 **CRITICAL DEVICE HEALTH ALERT** 🚨\\n\\n**Summary:**\\n• Total Devices: {{$json.summary.total_devices}}\\n• Critical Devices: {{$json.summary.critical_devices}}\\n• Offline Devices: {{$json.summary.offline_devices}}\\n• Average Health Score: {{Math.round($json.summary.average_health_score)}}%\\n\\n**Critical Devices:**\\n{{$json.critical_devices.map(d => `• ${d.device_name} (${d.device_type}) - Score: ${d.health_score}% - Issues: ${d.issues.map(i => i.type).join(', ')}`).join('\\n')}}\\n\\n**Offline Devices:**\\n{{$json.offline_devices.map(d => `• ${d.device_name} (${d.device_type}) - Last seen: ${d.last_seen}`).join('\\n')}}\\n\\n**Immediate Actions Required:**\\n{{$json.recommendations.filter(r => r.priority === 'high').map(r => `• ${r.description}`).join('\\n')}}\\n\\n**Timestamp:** {{$json.timestamp}}",
        "otherOptions": {
          "mrkdwn": true,
          "unfurl_links": false,
          "unfurl_media": false
        }
      },
      "id": "f8a9b0c1-fc2d-b1c2-ad3e-8f9a0b1c2d3e",
      "name": "Critical Alert Notification",
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2,
      "position": [
        1340,
        200
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "condition1",
              "leftValue": "={{$json.warning_devices.length}}",
              "rightValue": 0,
              "operator": {
                "type": "number",
                "operation": "gt"
              }
            }
          ],
          "combinator": "or",
          "conditions2": [
            {
              "id": "condition2",
              "leftValue": "={{$json.summary.average_health_score}}",
              "rightValue": 80,
              "operator": {
                "type": "number",
                "operation": "lt"
              }
            }
          ]
        },
        "options": {}
      },
      "id": "a9b0c1d2-ad3e-c2d3-be4f-9a0b1c2d3e4f",
      "name": "Check Warning Issues",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        1120,
        500
      ]
    },
    {
      "parameters": {
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "slackApi",
        "select": "channel",
        "channelId": {
          "__rl": true,
          "value": "C06TQSQMKQM",
          "mode": "id"
        },
        "text": "⚠️ **Device Health Warning** ⚠️\\n\\n**Summary:**\\n• Total Devices: {{$json.summary.total_devices}}\\n• Warning Devices: {{$json.summary.warning_devices}}\\n• Degraded Devices: {{$json.summary.degraded_devices}}\\n• Average Health Score: {{Math.round($json.summary.average_health_score)}}%\\n\\n**Warning Devices:**\\n{{$json.warning_devices.slice(0, 5).map(d => `• ${d.device_name} (${d.device_type}) - Score: ${d.health_score}% - Issues: ${d.issues.map(i => i.type).join(', ')}`).join('\\n')}}\\n{{$json.warning_devices.length > 5 ? `\\n... and ${$json.warning_devices.length - 5} more devices` : ''}}\\n\\n**Recommended Actions:**\\n{{$json.recommendations.filter(r => r.priority === 'medium').map(r => `• ${r.description}`).join('\\n')}}\\n\\n**Timestamp:** {{$json.timestamp}}",
        "otherOptions": {
          "mrkdwn": true,
          "unfurl_links": false,
          "unfurl_media": false
        }
      },
      "id": "b0c1d2e3-be4f-d3e4-cf5a-0b1c2d3e4f5a",
      "name": "Warning Alert Notification",
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2,
      "position": [
        1340,
        400
      ]
    },
    {
      "parameters": {
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "slackApi",
        "select": "channel",
        "channelId": {
          "__rl": true,
          "value": "C06TQSQMKQM",
          "mode": "id"
        },
        "text": "✅ **Device Health Status - All Good** ✅\\n\\n**Summary:**\\n• Total Devices: {{$json.summary.total_devices}}\\n• Healthy Devices: {{$json.summary.healthy_devices}}\\n• Average Health Score: {{Math.round($json.summary.average_health_score)}}%\\n\\n**Network Status:** All devices are operating within normal parameters\\n\\n**Timestamp:** {{$json.timestamp}}",
        "otherOptions": {
          "mrkdwn": true,
          "unfurl_links": false,
          "unfurl_media": false
        }
      },
      "id": "c1d2e3f4-cf5a-e4f5-da6b-1c2d3e4f5a6b",
      "name": "Healthy Status Notification",
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2,
      "position": [
        1340,
        600
      ]
    },
    {
      "parameters": {
        "url": "https://your-metrics-database.com/api/v1/metrics",
        "method": "POST",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "Authorization",
              "value": "Bearer your-metrics-api-key"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "timestamp",
              "value": "={{$json.timestamp}}"
            },
            {
              "name": "metrics",
              "value": "={{JSON.stringify($json.summary)}}"
            },
            {
              "name": "device_health",
              "value": "={{JSON.stringify($json.device_health)}}"
            },
            {
              "name": "source",
              "value": "device_health_monitoring"
            }
          ]
        },
        "options": {
          "timeout": 30000,
          "retry": {
            "maxTries": 3,
            "waitBetweenTries": 2000
          }
        }
      },
      "id": "d2e3f4a5-da6b-f5a6-eb7c-2d3e4f5a6b7c",
      "name": "Store Metrics",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        1560,
        300
      ]
    },
    {
      "parameters": {
        "jsCode": "// Generate automated remediation actions for critical issues\nconst criticalDevices = $json.critical_devices || [];\nconst warningDevices = $json.warning_devices || [];\nconst offlineDevices = $json.offline_devices || [];\n\nconst remediationActions = [];\n\n// Process critical devices\ncriticalDevices.forEach(device => {\n  device.issues.forEach(issue => {\n    let action = null;\n    \n    switch (issue.type) {\n      case 'cpu':\n        if (issue.severity === 'critical') {\n          action = {\n            device_id: device.device_id,\n            device_name: device.device_name,\n            action_type: 'restart_high_cpu_processes',\n            priority: 'high',\n            description: `Restart high CPU processes on ${device.device_name}`,\n            api_call: {\n              endpoint: '/api/v2/devices/' + device.device_id + '/commands',\n              method: 'POST',\n              payload: {\n                command: 'restart_processes',\n                parameters: { cpu_threshold: 80 }\n              }\n            }\n          };\n        }\n        break;\n        \n      case 'memory':\n        if (issue.severity === 'critical') {\n          action = {\n            device_id: device.device_id,\n            device_name: device.device_name,\n            action_type: 'clear_memory_cache',\n            priority: 'high',\n            description: `Clear memory cache on ${device.device_name}`,\n            api_call: {\n              endpoint: '/api/v2/devices/' + device.device_id + '/commands',\n              method: 'POST',\n              payload: {\n                command: 'clear_cache',\n                parameters: { cache_type: 'memory' }\n              }\n            }\n          };\n        }\n        break;\n        \n      case 'temperature':\n        if (issue.severity === 'critical') {\n          action = {\n            device_id: device.device_id,\n            device_name: device.device_name,\n            action_type: 'increase_fan_speed',\n            priority: 'high',\n            description: `Increase fan speed on ${device.device_name}`,\n            api_call: {\n              endpoint: '/api/v2/devices/' + device.device_id + '/commands',\n              method: 'POST',\n              payload: {\n                command: 'set_fan_speed',\n                parameters: { speed: 'maximum' }\n              }\n            }\n          };\n        }\n        break;\n    }\n    \n    if (action) {\n      remediationActions.push(action);\n    }\n  });\n});\n\n// Process offline devices\nofflineDevices.forEach(device => {\n  remediationActions.push({\n    device_id: device.device_id,\n    device_name: device.device_name,\n    action_type: 'connectivity_check',\n    priority: 'high',\n    description: `Perform connectivity check for ${device.device_name}`,\n    api_call: {\n      endpoint: '/api/v2/devices/' + device.device_id + '/ping',\n      method: 'POST',\n      payload: {\n        count: 5,\n        timeout: 10\n      }\n    }\n  });\n});\n\n// Process warning devices for preventive actions\nwarningDevices.forEach(device => {\n  const highCpuIssues = device.issues.filter(i => i.type === 'cpu' && i.severity === 'warning');\n  const highMemoryIssues = device.issues.filter(i => i.type === 'memory' && i.severity === 'warning');\n  \n  if (highCpuIssues.length > 0) {\n    remediationActions.push({\n      device_id: device.device_id,\n      device_name: device.device_name,\n      action_type: 'schedule_maintenance',\n      priority: 'medium',\n      description: `Schedule maintenance for ${device.device_name} - High CPU usage`,\n      api_call: {\n        endpoint: '/api/v2/maintenance/schedule',\n        method: 'POST',\n        payload: {\n          device_id: device.device_id,\n          maintenance_type: 'cpu_optimization',\n          schedule: 'next_maintenance_window'\n        }\n      }\n    });\n  }\n  \n  if (highMemoryIssues.length > 0) {\n    remediationActions.push({\n      device_id: device.device_id,\n      device_name: device.device_name,\n      action_type: 'memory_optimization',\n      priority: 'medium',\n      description: `Optimize memory usage on ${device.device_name}`,\n      api_call: {\n        endpoint: '/api/v2/devices/' + device.device_id + '/optimize',\n        method: 'POST',\n        payload: {\n          optimization_type: 'memory',\n          aggressive: false\n        }\n      }\n    });\n  }\n});\n\n// Generate summary\nconst summary = {\n  total_actions: remediationActions.length,\n  high_priority_actions: remediationActions.filter(a => a.priority === 'high').length,\n  medium_priority_actions: remediationActions.filter(a => a.priority === 'medium').length,\n  action_types: {\n    restart_processes: remediationActions.filter(a => a.action_type === 'restart_high_cpu_processes').length,\n    clear_cache: remediationActions.filter(a => a.action_type === 'clear_memory_cache').length,\n    increase_fan_speed: remediationActions.filter(a => a.action_type === 'increase_fan_speed').length,\n    connectivity_check: remediationActions.filter(a => a.action_type === 'connectivity_check').length,\n    schedule_maintenance: remediationActions.filter(a => a.action_type === 'schedule_maintenance').length,\n    memory_optimization: remediationActions.filter(a => a.action_type === 'memory_optimization').length\n  }\n};\n\nreturn [{\n  json: {\n    timestamp: new Date().toISOString(),\n    remediation_actions: remediationActions,\n    summary: summary,\n    auto_execute: false, // Set to true for automatic execution\n    requires_approval: true\n  }\n}];"
      },
      "id": "e3f4a5b6-eb7c-a6b7-fc8d-3e4f5a6b7c8d",
      "name": "Generate Remediation Actions",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1560,
        500
      ]
    }
  ],
  "connections": {
    "Every 5 Minutes": {
      "main": [
        [
          {
            "node": "Initialize Monitoring",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Initialize Monitoring": {
      "main": [
        [
          {
            "node": "Get Central Devices",
            "type": "main",
            "index": 0
          },
          {
            "node": "Get Device Stats",
            "type": "main",
            "index": 0
          },
          {
            "node": "Get Active Alerts",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Central Devices": {
      "main": [
        [
          {
            "node": "Analyze Device Health",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Device Stats": {
      "main": [
        [
          {
            "node": "Analyze Device Health",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Active Alerts": {
      "main": [
        [
          {
            "node": "Analyze Device Health",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Analyze Device Health": {
      "main": [
        [
          {
            "node": "Check Critical Issues",
            "type": "main",
            "index": 0
          },
          {
            "node": "Check Warning Issues",
            "type": "main",
            "index": 0
          },
          {
            "node": "Store Metrics",
            "type": "main",
            "index": 0
          },
          {
            "node": "Generate Remediation Actions",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Critical Issues": {
      "main": [
        [
          {
            "node": "Critical Alert Notification",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Check Warning Issues",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Warning Issues": {
      "main": [
        [
          {
            "node": "Warning Alert Notification",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Healthy Status Notification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "versionId": "1.0.0",
  "meta": {
    "templateCreatedBy": "Claude Code",
    "description": "Comprehensive device health monitoring workflow that tracks CPU, memory, temperature, and connectivity status across all Aruba network devices. Includes intelligent alerting, health scoring, and automated remediation suggestions.",
    "tags": ["monitoring", "health", "alerting", "aruba", "devices", "cpu", "memory", "temperature", "proactive"]
  }
}