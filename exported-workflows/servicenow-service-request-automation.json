{
  "name": "ServiceNow Service Request Automation",
  "nodes": [
    {
      "id": "webhook-trigger",
      "name": "ServiceNow Service Request Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2.1,
      "position": [
        250,
        300
      ],
      "parameters": {
        "httpMethod": "POST",
        "path": "servicenow-service-request",
        "responseMode": "responseNode"
      },
      "onError": "continueRegularOutput"
    },
    {
      "id": "validate-input",
      "name": "Validate Service Request",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        450,
        300
      ],
      "parameters": {
        "jsCode": "// ServiceNow Service Request Input Validation\nconst input = items[0].json;\n\n// Required fields validation\nconst requiredFields = ['operation', 'request_type'];\nfor (const field of requiredFields) {\n  if (!input[field]) {\n    throw new Error(`Missing required field: ${field}`);\n  }\n}\n\n// Valid operations\nconst validOperations = [\n  'submit_request', 'get_request_status', 'update_request', 'cancel_request',\n  'approve_request', 'reject_request', 'fulfill_request', 'get_catalog_items',\n  'get_approval_status', 'add_request_comments'\n];\n\nif (!validOperations.includes(input.operation)) {\n  throw new Error(`Invalid operation: ${input.operation}`);\n}\n\n// Valid request types\nconst validRequestTypes = ['network_access', 'hardware_provision', 'software_install', 'access_rights', 'network_config'];\nif (!validRequestTypes.includes(input.request_type)) {\n  throw new Error(`Invalid request type: ${input.request_type}`);\n}\n\n// Operation-specific validation\nif (input.operation === 'submit_request') {\n  if (!input.catalog_item && !input.short_description) {\n    throw new Error('submit_request requires catalog_item or short_description');\n  }\n  if (!input.requested_for) {\n    throw new Error('submit_request requires requested_for field');\n  }\n}\n\nif (input.operation === 'approve_request' || input.operation === 'reject_request') {\n  if (!input.request_id && !input.approval_id) {\n    throw new Error('Approval operations require request_id or approval_id');\n  }\n}\n\n// Set defaults and prepare request\nconst validatedInput = {\n  ...input,\n  timestamp: new Date().toISOString(),\n  request_id: input.request_id || `snow-req-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n  validation_status: 'passed',\n  \n  // Set ServiceNow defaults\n  priority: input.priority || '3',\n  urgency: input.urgency || '3',\n  requested_for: input.requested_for || 'network.admin@company.com',\n  opened_by: input.opened_by || 'aruba.automation@company.com',\n  assignment_group: input.assignment_group || 'Network Operations',\n  approval_required: input.approval_required !== false, // Default to true\n  state: input.state || 'open'\n};\n\nreturn [{ json: validatedInput }];"
      },
      "onError": "continueRegularOutput"
    },
    {
      "id": "set-servicenow-config",
      "name": "Set ServiceNow Config",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        650,
        300
      ],
      "parameters": {
        "jsCode": "// Set ServiceNow configuration from input\nconst input = items[0].json;\n\nconst config = {\n  ...input,\n  snow_base_url: input.instance_url || 'https://company.service-now.com',\n  snow_username: input.username || 'aruba_automation',\n  snow_password: input.password || 'default-password',\n  catalog_id: input.catalog_id || 'network_services_catalog'\n};\n\nreturn [{ json: config }];"
      },
      "onError": "continueRegularOutput"
    },
    {
      "id": "route-request-operation",
      "name": "Route Service Request Operation",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        850,
        300
      ],
      "parameters": {
        "mode": "expression",
        "output": "single",
        "rules": {
          "rules": [
            {
              "conditions": {
                "any": [
                  {
                    "leftValue": "={{ $json.operation }}",
                    "rightValue": "submit_request",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ]
              },
              "renameOutput": false
            },
            {
              "conditions": {
                "any": [
                  {
                    "leftValue": "={{ $json.operation }}",
                    "rightValue": "catalog",
                    "operator": {
                      "type": "string",
                      "operation": "contains"
                    }
                  }
                ]
              },
              "renameOutput": false
            },
            {
              "conditions": {
                "any": [
                  {
                    "leftValue": "={{ $json.operation }}",
                    "rightValue": "status",
                    "operator": {
                      "type": "string",
                      "operation": "contains"
                    }
                  }
                ]
              },
              "renameOutput": false
            },
            {
              "conditions": {
                "any": [
                  {
                    "leftValue": "={{ $json.operation }}",
                    "rightValue": "approve",
                    "operator": {
                      "type": "string",
                      "operation": "contains"
                    }
                  }
                ]
              },
              "renameOutput": false
            },
            {
              "conditions": {
                "any": [
                  {
                    "leftValue": "={{ $json.operation }}",
                    "rightValue": "fulfill_request",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ]
              },
              "renameOutput": false
            }
          ]
        }
      }
    },
    {
      "id": "submit-service-request",
      "name": "Submit Service Request",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1100,
        100
      ],
      "parameters": {
        "url": "={{ $json.snow_base_url }}/api/sn_sc/servicecatalog/items/{{ $json.catalog_item_id || 'network_access_request' }}/order_now",
        "method": "POST",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBasicAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "Accept",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"sysparm_quantity\": {{ JSON.stringify($json.quantity || \"1\") }},\n  \"variables\": {\n    \"u_network_location\": {{ JSON.stringify($json.location || \"Default Location\") }},\n    \"u_access_point_model\": {{ JSON.stringify($json.device_model) }},\n    \"u_vlan_requirement\": {{ JSON.stringify($json.vlan_id) }},\n    \"u_ssid_configuration\": {{ JSON.stringify($json.ssid_name) }},\n    \"u_business_justification\": {{ JSON.stringify($json.justification || \"Network infrastructure request\") }},\n    \"u_requested_by\": {{ JSON.stringify($json.requested_for) }},\n    \"u_priority\": {{ JSON.stringify($json.priority) }},\n    \"u_urgency\": {{ JSON.stringify($json.urgency) }},\n    \"u_device_type\": {{ JSON.stringify($json.device_type) }},\n    \"u_ip_requirements\": {{ JSON.stringify($json.ip_requirements) }},\n    \"u_security_requirements\": {{ JSON.stringify($json.security_requirements) }},\n    \"u_compliance_needed\": {{ JSON.stringify($json.compliance_needed || false) }},\n    \"u_aruba_central_group\": {{ JSON.stringify($json.central_group) }},\n    \"u_deployment_timeline\": {{ JSON.stringify($json.deployment_timeline) }}\n  }\n}",
        "options": {
          "timeout": 30000,
          "retry": {
            "enabled": true,
            "maxTries": 3,
            "waitBetweenTries": 2000
          },
          "response": {
            "response": {
              "neverError": true,
              "responseFormat": "json"
            }
          }
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "id": "get-catalog-items",
      "name": "Get Service Catalog Items",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1100,
        200
      ],
      "parameters": {
        "url": "={{ $json.snow_base_url }}/api/sn_sc/servicecatalog/items?sysparm_category={{ $json.category || 'Network Services' }}&sysparm_limit={{ $json.limit || 50 }}",
        "method": "GET",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBasicAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Accept",
              "value": "application/json"
            }
          ]
        },
        "options": {
          "timeout": 30000,
          "retry": {
            "enabled": true,
            "maxTries": 3,
            "waitBetweenTries": 2000
          },
          "response": {
            "response": {
              "neverError": true,
              "responseFormat": "json"
            }
          }
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "id": "get-request-status",
      "name": "Get Request Status",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1100,
        300
      ],
      "parameters": {
        "url": "={{ $json.snow_base_url }}/api/now/table/sc_request/{{ $json.request_id || $json.sys_id }}",
        "method": "GET",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBasicAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Accept",
              "value": "application/json"
            }
          ]
        },
        "options": {
          "timeout": 30000,
          "retry": {
            "enabled": true,
            "maxTries": 3,
            "waitBetweenTries": 2000
          },
          "response": {
            "response": {
              "neverError": true,
              "responseFormat": "json"
            }
          }
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "id": "process-approval",
      "name": "Process Request Approval",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1100,
        400
      ],
      "parameters": {
        "url": "={{ $json.snow_base_url }}/api/now/table/sysapproval_approver/{{ $json.approval_id }}",
        "method": "PUT",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBasicAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "Accept",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"state\": {{ JSON.stringify($json.operation === 'approve_request' ? 'approved' : 'rejected') }},\n  \"comments\": {{ JSON.stringify($json.approval_comments || `Request ${$json.operation === 'approve_request' ? 'approved' : 'rejected'} via automation`) }},\n  \"approver\": {{ JSON.stringify($json.approver || 'aruba.automation@company.com') }},\n  \"approval_date\": {{ JSON.stringify(new Date().toISOString()) }}\n}",
        "options": {
          "timeout": 30000,
          "retry": {
            "enabled": true,
            "maxTries": 3,
            "waitBetweenTries": 2000
          },
          "response": {
            "response": {
              "neverError": true,
              "responseFormat": "json"
            }
          }
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "id": "fulfill-request",
      "name": "Fulfill Service Request",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1100,
        500
      ],
      "parameters": {
        "url": "={{ $json.snow_base_url }}/api/now/table/sc_req_item/{{ $json.request_item_id }}",
        "method": "PUT",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBasicAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "Accept",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"state\": \"3\",\n  \"work_notes\": {{ JSON.stringify($json.fulfillment_notes || `Request fulfilled via Aruba automation at ${new Date().toISOString()}`) }},\n  \"u_deployment_status\": {{ JSON.stringify($json.deployment_status || \"Completed\") }},\n  \"u_aruba_device_serial\": {{ JSON.stringify($json.device_serial) }},\n  \"u_aruba_device_ip\": {{ JSON.stringify($json.device_ip) }},\n  \"u_aruba_central_url\": {{ JSON.stringify($json.central_url) }},\n  \"u_configuration_applied\": {{ JSON.stringify($json.configuration_applied || true) }},\n  \"u_fulfillment_timestamp\": {{ JSON.stringify(new Date().toISOString()) }},\n  \"close_notes\": {{ JSON.stringify($json.close_notes || \"Request completed successfully\") }}\n}",
        "options": {
          "timeout": 30000,
          "retry": {
            "enabled": true,
            "maxTries": 3,
            "waitBetweenTries": 2000
          },
          "response": {
            "response": {
              "neverError": true,
              "responseFormat": "json"
            }
          }
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "id": "process-request-results",
      "name": "Process Request Results",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1350,
        300
      ],
      "parameters": {
        "jsCode": "// Process ServiceNow service request operation results\nconst input = items[0].json;\nconst originalRequest = $('Validate Service Request').first().json;\n\nlet result = {\n  request_id: originalRequest.request_id,\n  operation: originalRequest.operation,\n  request_type: originalRequest.request_type,\n  timestamp: new Date().toISOString(),\n  status: 'success',\n  message: 'ServiceNow service request operation completed successfully'\n};\n\ntry {\n  if (input.error) {\n    result.status = 'error';\n    result.message = input.error.message || input.error;\n    result.error_details = input.error;\n  } else {\n    result.data = input;\n    \n    // Operation-specific processing\n    switch (originalRequest.operation) {\n      case 'submit_request':\n        result.message = `Service request submitted successfully: ${input.result?.number || 'Unknown'}`;\n        result.request_number = input.result?.number;\n        result.request_sys_id = input.result?.sys_id;\n        result.request_state = input.result?.state;\n        result.requested_for = originalRequest.requested_for;\n        break;\n        \n      case 'get_request_status':\n        result.message = `Request status retrieved: ${input.result?.state || 'Unknown'}`;\n        result.request_sys_id = originalRequest.request_id;\n        result.current_state = input.result?.state;\n        result.approval_status = input.result?.approval;\n        result.stage = input.result?.stage;\n        break;\n        \n      case 'get_catalog_items':\n        result.message = `Found ${input.result?.length || 0} catalog items`;\n        result.catalog_count = input.result?.length || 0;\n        result.catalog_items = input.result?.map(item => ({\n          sys_id: item.sys_id,\n          name: item.name,\n          short_description: item.short_description,\n          category: item.category,\n          price: item.price\n        })) || [];\n        break;\n        \n      case 'approve_request':\n      case 'reject_request':\n        const action = originalRequest.operation === 'approve_request' ? 'approved' : 'rejected';\n        result.message = `Request ${action} successfully`;\n        result.approval_id = originalRequest.approval_id;\n        result.approval_action = action;\n        result.approver = originalRequest.approver;\n        break;\n        \n      case 'fulfill_request':\n        result.message = `Request ${originalRequest.request_item_id} fulfilled successfully`;\n        result.request_item_id = originalRequest.request_item_id;\n        result.deployment_status = originalRequest.deployment_status;\n        result.device_serial = originalRequest.device_serial;\n        result.device_ip = originalRequest.device_ip;\n        break;\n        \n      default:\n        result.message = `${originalRequest.operation} completed successfully`;\n    }\n    \n    // Add request details if available\n    if (originalRequest.device_type || originalRequest.location) {\n      result.request_details = {\n        device_type: originalRequest.device_type,\n        location: originalRequest.location,\n        vlan_id: originalRequest.vlan_id,\n        ssid_name: originalRequest.ssid_name,\n        justification: originalRequest.justification\n      };\n    }\n  }\n} catch (error) {\n  result.status = 'error';\n  result.message = 'Error processing ServiceNow service request operation result';\n  result.error_details = error.message;\n}\n\nreturn [{ json: result }];"
      },
      "onError": "continueRegularOutput"
    },
    {
      "id": "send-notification",
      "name": "Send Notification",
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2.3,
      "position": [
        1550,
        300
      ],
      "parameters": {
        "channel": "#servicenow-automation",
        "username": "n8n-servicenow-bot",
        "text": "📋 **ServiceNow Service Request Operation**\\n\\n**Operation:** {{ $json.operation }}\\n**Status:** {{ $json.status.toUpperCase() }}\\n**Message:** {{ $json.message }}\\n**Time:** {{ $json.timestamp }}\\n**Request ID:** {{ $json.request_id }}\\n\\n{{ $json.request_number ? '**Request Number:** ' + $json.request_number + '\\\\n' : '' }}{{ $json.requested_for ? '**Requested For:** ' + $json.requested_for + '\\\\n' : '' }}{{ $json.approval_action ? '**Approval Action:** ' + $json.approval_action.toUpperCase() + '\\\\n' : '' }}{{ $json.catalog_count !== undefined ? '**Catalog Items Found:** ' + $json.catalog_count + '\\\\n' : '' }}\\n{{ $json.status === 'success' ? '✅ Operation completed successfully' : '❌ Operation failed - check ServiceNow logs' }}"
      },
      "onError": "continueRegularOutput"
    },
    {
      "id": "webhook-response",
      "name": "Send Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.5,
      "position": [
        1750,
        300
      ],
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ JSON.stringify($json, null, 2) }}"
      },
      "onError": "continueRegularOutput"
    }
  ],
  "connections": {
    "ServiceNow Service Request Webhook": {
      "main": [
        [
          {
            "node": "Validate Service Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validate Service Request": {
      "main": [
        [
          {
            "node": "Set ServiceNow Config",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set ServiceNow Config": {
      "main": [
        [
          {
            "node": "Route Service Request Operation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Route Service Request Operation": {
      "main": [
        [
          {
            "node": "Submit Service Request",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Get Service Catalog Items",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Get Request Status",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Process Request Approval",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Fulfill Service Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Submit Service Request": {
      "main": [
        [
          {
            "node": "Process Request Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Service Catalog Items": {
      "main": [
        [
          {
            "node": "Process Request Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Request Status": {
      "main": [
        [
          {
            "node": "Process Request Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Request Approval": {
      "main": [
        [
          {
            "node": "Process Request Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fulfill Service Request": {
      "main": [
        [
          {
            "node": "Process Request Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Request Results": {
      "main": [
        [
          {
            "node": "Send Notification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send Notification": {
      "main": [
        [
          {
            "node": "Send Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1",
    "timezone": "UTC",
    "saveDataErrorExecution": "all",
    "saveDataSuccessExecution": "all",
    "saveManualExecutions": true,
    "saveExecutionProgress": true
  },
  "staticData": null,
  "meta": null,
  "pinData": null
}