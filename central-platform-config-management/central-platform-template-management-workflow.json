{
  "name": "Central Platform Template Management",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "central-template-management",
        "responseMode": "responseNode",
        "options": {}
      },
      "name": "Template Management Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [200, 300],
      "webhookId": "template-management-webhook"
    },
    {
      "parameters": {
        "functionCode": "// Central Platform Template Management Workflow\n// Parse and validate incoming request\n\nconst operation = items[0].json.operation;\nconst templateData = items[0].json.template_data || {};\nconst options = items[0].json.options || {};\n\n// Validate required fields\nif (!operation) {\n  throw new Error('Operation is required');\n}\n\n// Supported operations\nconst supportedOps = [\n  'create_template',\n  'update_template', \n  'delete_template',\n  'list_templates',\n  'deploy_template',\n  'validate_template',\n  'backup_template',\n  'restore_template',\n  'clone_template',\n  'bulk_deploy'\n];\n\nif (!supportedOps.includes(operation)) {\n  throw new Error(`Unsupported operation: ${operation}. Supported: ${supportedOps.join(', ')}`);\n}\n\n// Operation-specific validation\nif (['create_template', 'update_template', 'deploy_template'].includes(operation)) {\n  if (!templateData.name) {\n    throw new Error('Template name is required');\n  }\n  if (!templateData.type) {\n    throw new Error('Template type is required');\n  }\n}\n\nif (operation === 'update_template' && !templateData.template_id) {\n  throw new Error('Template ID is required for update operations');\n}\n\nif (operation === 'deploy_template' && !templateData.target_devices) {\n  throw new Error('Target devices are required for deployment');\n}\n\n// Add timestamp and execution ID\nconst executionData = {\n  operation,\n  template_data: templateData,\n  options,\n  timestamp: new Date().toISOString(),\n  execution_id: `template-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`\n};\n\nconsole.log(`Template Management: ${operation} - ${executionData.execution_id}`);\n\nreturn [{ json: executionData }];"
      },
      "name": "Parse Template Request",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [400, 300]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{$json.operation}}",
              "value2": "create_template"
            }
          ]
        }
      },
      "name": "Check Operation Type",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [600, 300]
    },
    {
      "parameters": {
        "functionCode": "// Create Template Operation\nconst data = items[0].json;\nconst templateData = data.template_data;\n\n// Template creation payload\nconst createPayload = {\n  name: templateData.name,\n  type: templateData.type,\n  description: templateData.description || `Template created via automation - ${data.timestamp}`,\n  version: templateData.version || '1.0.0',\n  configuration: templateData.configuration || {},\n  variables: templateData.variables || {},\n  metadata: {\n    created_by: 'Central Platform Automation',\n    created_at: data.timestamp,\n    execution_id: data.execution_id,\n    source: 'n8n-workflow'\n  }\n};\n\n// Template type-specific configuration\nswitch (templateData.type) {\n  case 'device_config':\n    createPayload.device_types = templateData.device_types || ['switch', 'ap'];\n    createPayload.config_sections = templateData.config_sections || ['network', 'security'];\n    break;\n  case 'network_policy':\n    createPayload.policy_rules = templateData.policy_rules || [];\n    createPayload.enforcement_mode = templateData.enforcement_mode || 'monitor';\n    break;\n  case 'security_profile':\n    createPayload.security_settings = templateData.security_settings || {};\n    createPayload.compliance_standards = templateData.compliance_standards || [];\n    break;\n  case 'service_config':\n    createPayload.service_settings = templateData.service_settings || {};\n    createPayload.dependencies = templateData.dependencies || [];\n    break;\n}\n\n// Add validation rules\ncreatePayload.validation_rules = {\n  required_fields: templateData.required_fields || [],\n  format_validation: templateData.format_validation || {},\n  dependency_checks: templateData.dependency_checks || []\n};\n\n// Return API request data\nreturn [{ \n  json: {\n    ...data,\n    api_payload: createPayload,\n    api_endpoint: '/api/v2/templates',\n    api_method: 'POST'\n  }\n}];"
      },
      "name": "Create Template",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [800, 200]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{$json.operation}}",
              "value2": "update_template"
            }
          ]
        }
      },
      "name": "Check Update Operation",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [800, 300]
    },
    {
      "parameters": {
        "functionCode": "// Update Template Operation\nconst data = items[0].json;\nconst templateData = data.template_data;\n\n// Get current template first\nconst getCurrentPayload = {\n  template_id: templateData.template_id\n};\n\n// Update payload\nconst updatePayload = {\n  name: templateData.name,\n  description: templateData.description,\n  version: templateData.version,\n  configuration: templateData.configuration,\n  variables: templateData.variables,\n  metadata: {\n    updated_by: 'Central Platform Automation',\n    updated_at: data.timestamp,\n    execution_id: data.execution_id,\n    previous_version: templateData.current_version\n  }\n};\n\n// Remove undefined fields\nObject.keys(updatePayload).forEach(key => {\n  if (updatePayload[key] === undefined) {\n    delete updatePayload[key];\n  }\n});\n\nreturn [{ \n  json: {\n    ...data,\n    api_payload: updatePayload,\n    api_endpoint: `/api/v2/templates/${templateData.template_id}`,\n    api_method: 'PUT',\n    template_id: templateData.template_id\n  }\n}];"
      },
      "name": "Update Template",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1000, 300]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{$json.operation}}",
              "value2": "deploy_template"
            }
          ]
        }
      },
      "name": "Check Deploy Operation",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [800, 400]
    },
    {
      "parameters": {
        "functionCode": "// Deploy Template Operation\nconst data = items[0].json;\nconst templateData = data.template_data;\n\n// Deployment configuration\nconst deployPayload = {\n  template_id: templateData.template_id || templateData.name,\n  target_devices: templateData.target_devices,\n  deployment_settings: {\n    mode: templateData.deployment_mode || 'staged',\n    batch_size: templateData.batch_size || 10,\n    delay_between_batches: templateData.delay_between_batches || 30,\n    rollback_on_failure: templateData.rollback_on_failure !== false,\n    pre_deployment_validation: templateData.pre_deployment_validation !== false\n  },\n  variable_overrides: templateData.variable_overrides || {},\n  deployment_schedule: templateData.deployment_schedule || 'immediate',\n  notification_settings: {\n    notify_on_success: true,\n    notify_on_failure: true,\n    notify_on_completion: true\n  }\n};\n\n// Add deployment metadata\ndeployPayload.metadata = {\n  initiated_by: 'Central Platform Automation',\n  initiated_at: data.timestamp,\n  execution_id: data.execution_id,\n  expected_completion: new Date(Date.now() + (deployPayload.target_devices.length * 60000)).toISOString()\n};\n\n// Validation for deployment\nif (!Array.isArray(deployPayload.target_devices) || deployPayload.target_devices.length === 0) {\n  throw new Error('Target devices must be a non-empty array');\n}\n\nreturn [{ \n  json: {\n    ...data,\n    api_payload: deployPayload,\n    api_endpoint: '/api/v2/templates/deploy',\n    api_method: 'POST',\n    target_count: deployPayload.target_devices.length\n  }\n}];"
      },
      "name": "Deploy Template",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1000, 400]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{$json.operation}}",
              "value2": "list_templates"
            }
          ]
        }
      },
      "name": "Check List Operation",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [800, 500]
    },
    {
      "parameters": {
        "functionCode": "// List Templates Operation\nconst data = items[0].json;\nconst options = data.options;\n\n// Query parameters for listing\nconst queryParams = {\n  limit: options.limit || 50,\n  offset: options.offset || 0,\n  sort_by: options.sort_by || 'created_at',\n  sort_order: options.sort_order || 'desc'\n};\n\n// Filters\nif (options.template_type) {\n  queryParams.type = options.template_type;\n}\nif (options.name_filter) {\n  queryParams.name_contains = options.name_filter;\n}\nif (options.created_after) {\n  queryParams.created_after = options.created_after;\n}\nif (options.status) {\n  queryParams.status = options.status;\n}\n\n// Build query string\nconst queryString = Object.keys(queryParams)\n  .map(key => `${key}=${encodeURIComponent(queryParams[key])}`)\n  .join('&');\n\nreturn [{ \n  json: {\n    ...data,\n    api_payload: null,\n    api_endpoint: `/api/v2/templates?${queryString}`,\n    api_method: 'GET',\n    query_params: queryParams\n  }\n}];"
      },
      "name": "List Templates",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1000, 500]
    },
    {
      "parameters": {
        "functionCode": "// Handle other operations\nconst data = items[0].json;\nconst operation = data.operation;\n\nlet apiEndpoint = '';\nlet apiMethod = 'GET';\nlet apiPayload = null;\n\nswitch (operation) {\n  case 'delete_template':\n    apiEndpoint = `/api/v2/templates/${data.template_data.template_id}`;\n    apiMethod = 'DELETE';\n    break;\n  case 'validate_template':\n    apiEndpoint = `/api/v2/templates/${data.template_data.template_id}/validate`;\n    apiMethod = 'POST';\n    apiPayload = {\n      validation_level: data.options.validation_level || 'full',\n      target_devices: data.template_data.target_devices || []\n    };\n    break;\n  case 'backup_template':\n    apiEndpoint = `/api/v2/templates/${data.template_data.template_id}/backup`;\n    apiMethod = 'POST';\n    apiPayload = {\n      backup_name: data.options.backup_name || `backup-${Date.now()}`,\n      include_metadata: data.options.include_metadata !== false\n    };\n    break;\n  case 'restore_template':\n    apiEndpoint = `/api/v2/templates/${data.template_data.template_id}/restore`;\n    apiMethod = 'POST';\n    apiPayload = {\n      backup_id: data.template_data.backup_id,\n      restore_mode: data.options.restore_mode || 'replace'\n    };\n    break;\n  case 'clone_template':\n    apiEndpoint = `/api/v2/templates/${data.template_data.template_id}/clone`;\n    apiMethod = 'POST';\n    apiPayload = {\n      new_name: data.template_data.new_name,\n      new_description: data.template_data.new_description\n    };\n    break;\n  case 'bulk_deploy':\n    apiEndpoint = '/api/v2/templates/bulk-deploy';\n    apiMethod = 'POST';\n    apiPayload = {\n      deployments: data.template_data.deployments || [],\n      deployment_settings: data.options.deployment_settings || {}\n    };\n    break;\n  default:\n    throw new Error(`Unsupported operation: ${operation}`);\n}\n\nreturn [{ \n  json: {\n    ...data,\n    api_payload: apiPayload,\n    api_endpoint: apiEndpoint,\n    api_method: apiMethod\n  }\n}];"
      },
      "name": "Handle Other Operations",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1000, 600]
    },
    {
      "parameters": {
        "url": "={{$json.api_endpoint}}",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "arubaApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "Authorization",
              "value": "Bearer {{$credentials.arubaApi.accessToken}}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "data",
              "value": "={{JSON.stringify($json.api_payload)}}"
            }
          ]
        },
        "options": {
          "timeout": 30000,
          "retry": {
            "maxTries": 3,
            "waitBetweenTries": 2000
          }
        }
      },
      "name": "Execute API Request",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [1200, 400]
    },
    {
      "parameters": {
        "functionCode": "// Process API Response\nconst data = items[0].json;\nconst originalRequest = data.originalRequest || {};\n\n// Extract response data\nconst responseData = data.response || data;\nconst statusCode = data.statusCode || 200;\nconst operation = originalRequest.operation;\n\n// Success response processing\nlet processedResponse = {\n  success: true,\n  operation: operation,\n  timestamp: new Date().toISOString(),\n  execution_id: originalRequest.execution_id,\n  status_code: statusCode,\n  data: responseData\n};\n\n// Operation-specific response processing\nswitch (operation) {\n  case 'create_template':\n    processedResponse.template_id = responseData.template_id || responseData.id;\n    processedResponse.template_name = responseData.name;\n    processedResponse.message = `Template '${responseData.name}' created successfully`;\n    break;\n  case 'update_template':\n    processedResponse.template_id = responseData.template_id || responseData.id;\n    processedResponse.version = responseData.version;\n    processedResponse.message = `Template updated to version ${responseData.version}`;\n    break;\n  case 'deploy_template':\n    processedResponse.deployment_id = responseData.deployment_id;\n    processedResponse.target_count = responseData.target_count;\n    processedResponse.message = `Template deployment started for ${responseData.target_count} devices`;\n    break;\n  case 'list_templates':\n    processedResponse.total_count = responseData.total_count || responseData.length;\n    processedResponse.templates = responseData.templates || responseData;\n    processedResponse.message = `Retrieved ${processedResponse.total_count} templates`;\n    break;\n  case 'delete_template':\n    processedResponse.message = 'Template deleted successfully';\n    break;\n  case 'validate_template':\n    processedResponse.validation_result = responseData.validation_result;\n    processedResponse.errors = responseData.errors || [];\n    processedResponse.warnings = responseData.warnings || [];\n    processedResponse.message = `Template validation completed - ${responseData.errors?.length || 0} errors, ${responseData.warnings?.length || 0} warnings`;\n    break;\n  case 'backup_template':\n    processedResponse.backup_id = responseData.backup_id;\n    processedResponse.message = `Template backup created: ${responseData.backup_id}`;\n    break;\n  case 'restore_template':\n    processedResponse.message = 'Template restored successfully';\n    break;\n  case 'clone_template':\n    processedResponse.new_template_id = responseData.template_id;\n    processedResponse.message = `Template cloned successfully: ${responseData.template_id}`;\n    break;\n  case 'bulk_deploy':\n    processedResponse.deployment_ids = responseData.deployment_ids || [];\n    processedResponse.message = `Bulk deployment started for ${responseData.deployment_ids?.length || 0} templates`;\n    break;\n}\n\n// Add performance metrics\nprocessedResponse.metrics = {\n  response_time: data.response_time || 'N/A',\n  api_calls: 1,\n  success_rate: '100%'\n};\n\nconsole.log(`Template Management Success: ${operation} - ${processedResponse.execution_id}`);\n\nreturn [{ json: processedResponse }];"
      },
      "name": "Process Success Response",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1400, 400]
    },
    {
      "parameters": {
        "functionCode": "// Process Error Response\nconst error = items[0].json.error || items[0].json;\nconst originalRequest = items[0].json.originalRequest || {};\n\n// Extract error details\nconst errorResponse = {\n  success: false,\n  operation: originalRequest.operation,\n  timestamp: new Date().toISOString(),\n  execution_id: originalRequest.execution_id,\n  error: {\n    code: error.code || error.statusCode || 'UNKNOWN_ERROR',\n    message: error.message || 'Unknown error occurred',\n    details: error.details || error.response || {},\n    stack: error.stack\n  }\n};\n\n// Error categorization\nconst errorCode = errorResponse.error.code;\nif (errorCode >= 400 && errorCode < 500) {\n  errorResponse.error.category = 'CLIENT_ERROR';\n  errorResponse.error.retry_recommended = false;\n} else if (errorCode >= 500) {\n  errorResponse.error.category = 'SERVER_ERROR';\n  errorResponse.error.retry_recommended = true;\n} else {\n  errorResponse.error.category = 'UNKNOWN_ERROR';\n  errorResponse.error.retry_recommended = false;\n}\n\n// Operation-specific error handling\nswitch (originalRequest.operation) {\n  case 'create_template':\n    if (errorCode === 409) {\n      errorResponse.error.message = 'Template with this name already exists';\n    }\n    break;\n  case 'update_template':\n    if (errorCode === 404) {\n      errorResponse.error.message = 'Template not found';\n    }\n    break;\n  case 'deploy_template':\n    if (errorCode === 422) {\n      errorResponse.error.message = 'Template validation failed before deployment';\n    }\n    break;\n}\n\nconsole.error(`Template Management Error: ${originalRequest.operation} - ${errorResponse.execution_id}`, errorResponse.error);\n\nreturn [{ json: errorResponse }];"
      },
      "name": "Process Error Response",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1400, 600]
    },
    {
      "parameters": {
        "channel": "={{$json.notification_settings?.slack?.channel || '#central-platform-automation'}}",
        "text": "🎯 **Central Platform Template Management**\\n\\n**Operation**: {{$json.operation}}\\n**Status**: {{$json.success ? '✅ Success' : '❌ Failed'}}\\n**Execution ID**: {{$json.execution_id}}\\n**Message**: {{$json.message || $json.error?.message}}\\n**Timestamp**: {{$json.timestamp}}\\n\\n{{$json.success ? '**Details**: ' + JSON.stringify($json.data, null, 2) : '**Error Code**: ' + $json.error?.code}}",
        "username": "Central Platform Bot",
        "iconEmoji": ":gear:"
      },
      "name": "Send Slack Notification",
      "type": "n8n-nodes-base.slack",
      "typeVersion": 1,
      "position": [1600, 400]
    },
    {
      "parameters": {
        "functionCode": "// Final Response Formatter\nconst data = items[0].json;\n\n// Format final response\nconst finalResponse = {\n  success: data.success,\n  operation: data.operation,\n  execution_id: data.execution_id,\n  timestamp: data.timestamp,\n  message: data.message\n};\n\n// Add operation-specific data\nif (data.success) {\n  finalResponse.data = data.data;\n  finalResponse.metrics = data.metrics;\n  \n  // Add specific fields based on operation\n  if (data.template_id) finalResponse.template_id = data.template_id;\n  if (data.deployment_id) finalResponse.deployment_id = data.deployment_id;\n  if (data.backup_id) finalResponse.backup_id = data.backup_id;\n  if (data.total_count) finalResponse.total_count = data.total_count;\n} else {\n  finalResponse.error = data.error;\n  finalResponse.retry_recommended = data.error?.retry_recommended;\n}\n\n// Add execution summary\nfinalResponse.execution_summary = {\n  workflow: 'Central Platform Template Management',\n  version: '1.0.0',\n  executed_at: data.timestamp,\n  duration: 'N/A' // Could be calculated if needed\n};\n\nreturn [{ json: finalResponse }];"
      },
      "name": "Format Final Response",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1800, 400]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{JSON.stringify($json, null, 2)}}"
      },
      "name": "Return Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [2000, 400]
    }
  ],
  "connections": {
    "Template Management Webhook": {
      "main": [
        [
          {
            "node": "Parse Template Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Template Request": {
      "main": [
        [
          {
            "node": "Check Operation Type",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Operation Type": {
      "main": [
        [
          {
            "node": "Create Template",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Check Update Operation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Template": {
      "main": [
        [
          {
            "node": "Execute API Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Update Operation": {
      "main": [
        [
          {
            "node": "Update Template",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Check Deploy Operation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Template": {
      "main": [
        [
          {
            "node": "Execute API Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Deploy Operation": {
      "main": [
        [
          {
            "node": "Deploy Template",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Check List Operation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Deploy Template": {
      "main": [
        [
          {
            "node": "Execute API Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check List Operation": {
      "main": [
        [
          {
            "node": "List Templates",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Handle Other Operations",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "List Templates": {
      "main": [
        [
          {
            "node": "Execute API Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Handle Other Operations": {
      "main": [
        [
          {
            "node": "Execute API Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute API Request": {
      "main": [
        [
          {
            "node": "Process Success Response",
            "type": "main",
            "index": 0
          }
        ]
      ],
      "error": [
        [
          {
            "node": "Process Error Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Success Response": {
      "main": [
        [
          {
            "node": "Send Slack Notification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Error Response": {
      "main": [
        [
          {
            "node": "Send Slack Notification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send Slack Notification": {
      "main": [
        [
          {
            "node": "Format Final Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Final Response": {
      "main": [
        [
          {
            "node": "Return Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  }
}