{
  "name": "Central Platform Device Group Management",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "central-device-groups",
        "responseMode": "responseNode",
        "options": {}
      },
      "name": "Device Group Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [200, 300],
      "webhookId": "device-group-webhook"
    },
    {
      "parameters": {
        "functionCode": "// Central Platform Device Group Management\n// Parse and validate incoming request\n\nconst operation = items[0].json.operation;\nconst groupData = items[0].json.group_data || {};\nconst options = items[0].json.options || {};\n\n// Validate required fields\nif (!operation) {\n  throw new Error('Operation is required');\n}\n\n// Supported operations\nconst supportedOps = [\n  'create_group',\n  'update_group',\n  'delete_group',\n  'list_groups',\n  'add_devices',\n  'remove_devices',\n  'move_devices',\n  'group_status',\n  'group_inventory',\n  'apply_configuration',\n  'sync_group',\n  'group_analytics'\n];\n\nif (!supportedOps.includes(operation)) {\n  throw new Error(`Unsupported operation: ${operation}. Supported: ${supportedOps.join(', ')}`);\n}\n\n// Operation-specific validation\nif (['create_group', 'update_group'].includes(operation)) {\n  if (!groupData.group_name) {\n    throw new Error('Group name is required');\n  }\n  if (operation === 'create_group' && !groupData.group_type) {\n    throw new Error('Group type is required for creating groups');\n  }\n}\n\nif (operation === 'update_group' && !groupData.group_id) {\n  throw new Error('Group ID is required for update operations');\n}\n\nif (['add_devices', 'remove_devices', 'move_devices'].includes(operation) && !groupData.device_ids) {\n  throw new Error('Device IDs are required for device operations');\n}\n\n// Add timestamp and execution ID\nconst executionData = {\n  operation,\n  group_data: groupData,\n  options,\n  timestamp: new Date().toISOString(),\n  execution_id: `device-group-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`\n};\n\nconsole.log(`Device Group Management: ${operation} - ${executionData.execution_id}`);\n\nreturn [{ json: executionData }];"
      },
      "name": "Parse Group Request",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [400, 300]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{$json.operation}}",
              "value2": "create_group"
            }
          ]
        }
      },
      "name": "Check Create Operation",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [600, 300]
    },
    {
      "parameters": {
        "functionCode": "// Create Device Group Operation\nconst data = items[0].json;\nconst groupData = data.group_data;\n\n// Group creation payload\nconst createPayload = {\n  group_name: groupData.group_name,\n  group_type: groupData.group_type,\n  description: groupData.description || `Device group created via automation - ${data.timestamp}`,\n  parent_group_id: groupData.parent_group_id || null,\n  group_properties: groupData.group_properties || {},\n  metadata: {\n    created_by: 'Central Platform Automation',\n    created_at: data.timestamp,\n    execution_id: data.execution_id,\n    source: 'n8n-workflow'\n  }\n};\n\n// Group type-specific configuration\nswitch (groupData.group_type) {\n  case 'static':\n    createPayload.static_config = {\n      device_ids: groupData.device_ids || [],\n      auto_add_rules: groupData.auto_add_rules || [],\n      membership_locked: groupData.membership_locked || false\n    };\n    break;\n    \n  case 'dynamic':\n    createPayload.dynamic_config = {\n      membership_rules: groupData.membership_rules || [],\n      evaluation_frequency: groupData.evaluation_frequency || 'hourly',\n      auto_update: groupData.auto_update !== false,\n      rule_logic: groupData.rule_logic || 'AND'\n    };\n    // Example membership rules\n    if (!createPayload.dynamic_config.membership_rules.length) {\n      createPayload.dynamic_config.membership_rules = [\n        {\n          attribute: 'device_type',\n          operator: 'equals',\n          value: 'switch'\n        },\n        {\n          attribute: 'location',\n          operator: 'contains',\n          value: 'branch'\n        }\n      ];\n    }\n    break;\n    \n  case 'location_based':\n    createPayload.location_config = {\n      location_hierarchy: groupData.location_hierarchy || [],\n      include_sublocations: groupData.include_sublocations !== false,\n      location_attributes: groupData.location_attributes || {},\n      geo_boundaries: groupData.geo_boundaries || null\n    };\n    break;\n    \n  case 'template_based':\n    createPayload.template_config = {\n      template_id: groupData.template_id,\n      template_parameters: groupData.template_parameters || {},\n      auto_apply_template: groupData.auto_apply_template !== false,\n      template_version: groupData.template_version || 'latest'\n    };\n    break;\n    \n  case 'role_based':\n    createPayload.role_config = {\n      device_roles: groupData.device_roles || [],\n      service_types: groupData.service_types || [],\n      capability_requirements: groupData.capability_requirements || [],\n      role_priority: groupData.role_priority || 'high'\n    };\n    break;\n}\n\n// Add group policies\nif (groupData.policies) {\n  createPayload.policies = {\n    configuration_policies: groupData.policies.configuration || [],\n    security_policies: groupData.policies.security || [],\n    compliance_policies: groupData.policies.compliance || [],\n    monitoring_policies: groupData.policies.monitoring || []\n  };\n}\n\n// Add group permissions\nif (groupData.permissions) {\n  createPayload.permissions = {\n    read_users: groupData.permissions.read_users || [],\n    write_users: groupData.permissions.write_users || [],\n    admin_users: groupData.permissions.admin_users || [],\n    inherit_parent: groupData.permissions.inherit_parent !== false\n  };\n}\n\n// Add automation settings\nif (groupData.automation) {\n  createPayload.automation = {\n    auto_provision: groupData.automation.auto_provision || false,\n    auto_configure: groupData.automation.auto_configure || false,\n    auto_monitor: groupData.automation.auto_monitor !== false,\n    auto_remediate: groupData.automation.auto_remediate || false,\n    notification_settings: groupData.automation.notification_settings || {}\n  };\n}\n\n// Return API request data\nreturn [{ \n  json: {\n    ...data,\n    api_payload: createPayload,\n    api_endpoint: '/api/v2/device-groups',\n    api_method: 'POST'\n  }\n}];"
      },
      "name": "Create Group",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [800, 200]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{$json.operation}}",
              "value2": "add_devices"
            }
          ]
        }
      },
      "name": "Check Add Devices Operation",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [800, 300]
    },
    {
      "parameters": {
        "functionCode": "// Add Devices to Group Operation\nconst data = items[0].json;\nconst groupData = data.group_data;\n\n// Add devices payload\nconst addDevicesPayload = {\n  group_id: groupData.group_id,\n  device_ids: groupData.device_ids || [],\n  operation_mode: groupData.operation_mode || 'add', // add, replace, merge\n  validation_settings: {\n    validate_compatibility: groupData.validate_compatibility !== false,\n    check_duplicates: groupData.check_duplicates !== false,\n    verify_device_status: groupData.verify_device_status !== false,\n    reject_invalid: groupData.reject_invalid !== false\n  },\n  device_configuration: {\n    apply_group_config: groupData.apply_group_config !== false,\n    inherit_policies: groupData.inherit_policies !== false,\n    preserve_device_config: groupData.preserve_device_config || false,\n    config_merge_strategy: groupData.config_merge_strategy || 'group_priority'\n  },\n  notification_settings: {\n    notify_on_success: true,\n    notify_on_failure: true,\n    notify_device_owners: groupData.notify_device_owners || false\n  }\n};\n\n// Add device filters if provided\nif (groupData.device_filters) {\n  addDevicesPayload.device_filters = {\n    device_types: groupData.device_filters.device_types || [],\n    models: groupData.device_filters.models || [],\n    firmware_versions: groupData.device_filters.firmware_versions || [],\n    locations: groupData.device_filters.locations || [],\n    tags: groupData.device_filters.tags || []\n  };\n}\n\n// Add bulk operation settings for large device sets\nif (groupData.device_ids.length > 100) {\n  addDevicesPayload.bulk_settings = {\n    batch_size: groupData.batch_size || 50,\n    batch_delay: groupData.batch_delay || 5,\n    parallel_batches: groupData.parallel_batches || 2,\n    continue_on_error: groupData.continue_on_error !== false\n  };\n}\n\n// Validate device count\nif (!addDevicesPayload.device_ids || addDevicesPayload.device_ids.length === 0) {\n  throw new Error('At least one device ID must be specified');\n}\n\n// Add estimated completion time\nconst estimatedTime = addDevicesPayload.device_ids.length * 2; // 2 seconds per device\naddDevicesPayload.estimated_completion_time = new Date(Date.now() + (estimatedTime * 1000)).toISOString();\n\nreturn [{ \n  json: {\n    ...data,\n    api_payload: addDevicesPayload,\n    api_endpoint: `/api/v2/device-groups/${groupData.group_id}/devices`,\n    api_method: 'POST',\n    device_count: addDevicesPayload.device_ids.length\n  }\n}];"
      },
      "name": "Add Devices to Group",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1000, 300]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{$json.operation}}",
              "value2": "apply_configuration"
            }
          ]
        }
      },
      "name": "Check Apply Config Operation",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [800, 400]
    },
    {
      "parameters": {
        "functionCode": "// Apply Configuration to Group Operation\nconst data = items[0].json;\nconst groupData = data.group_data;\n\n// Apply configuration payload\nconst applyConfigPayload = {\n  group_id: groupData.group_id,\n  configuration_type: groupData.configuration_type || 'template',\n  configuration_data: groupData.configuration_data || {},\n  application_settings: {\n    mode: groupData.application_mode || 'staged',\n    schedule: groupData.schedule || 'immediate',\n    rollback_enabled: groupData.rollback_enabled !== false,\n    backup_before_apply: groupData.backup_before_apply !== false,\n    test_mode: groupData.test_mode || false\n  },\n  deployment_options: {\n    batch_size: groupData.batch_size || 25,\n    batch_delay: groupData.batch_delay || 60,\n    priority_order: groupData.priority_order || 'alphabetical',\n    failure_threshold: groupData.failure_threshold || 10,\n    continue_on_error: groupData.continue_on_error || false\n  },\n  validation_settings: {\n    pre_validation: groupData.pre_validation !== false,\n    syntax_check: groupData.syntax_check !== false,\n    compatibility_check: groupData.compatibility_check !== false,\n    simulation_mode: groupData.simulation_mode || false\n  }\n};\n\n// Configuration type-specific settings\nswitch (groupData.configuration_type) {\n  case 'template':\n    applyConfigPayload.template_config = {\n      template_id: groupData.template_id,\n      template_version: groupData.template_version || 'latest',\n      variable_overrides: groupData.variable_overrides || {},\n      merge_with_existing: groupData.merge_with_existing !== false\n    };\n    break;\n    \n  case 'policy':\n    applyConfigPayload.policy_config = {\n      policy_ids: groupData.policy_ids || [],\n      policy_priority: groupData.policy_priority || [],\n      enforcement_mode: groupData.enforcement_mode || 'enforce',\n      conflict_resolution: groupData.conflict_resolution || 'newest_wins'\n    };\n    break;\n    \n  case 'direct':\n    applyConfigPayload.direct_config = {\n      configuration_commands: groupData.configuration_commands || [],\n      configuration_format: groupData.configuration_format || 'cli',\n      atomic_operation: groupData.atomic_operation !== false,\n      transaction_mode: groupData.transaction_mode || 'commit_on_success'\n    };\n    break;\n    \n  case 'service':\n    applyConfigPayload.service_config = {\n      service_ids: groupData.service_ids || [],\n      service_parameters: groupData.service_parameters || {},\n      service_dependencies: groupData.service_dependencies || [],\n      startup_order: groupData.startup_order || 'parallel'\n    };\n    break;\n}\n\n// Add compliance requirements\nif (groupData.compliance_requirements) {\n  applyConfigPayload.compliance = {\n    standards: groupData.compliance_requirements.standards || [],\n    validation_required: groupData.compliance_requirements.validation_required !== false,\n    audit_trail: groupData.compliance_requirements.audit_trail !== false,\n    approval_required: groupData.compliance_requirements.approval_required || false\n  };\n}\n\n// Add notification settings\napplyConfigPayload.notifications = {\n  channels: data.options.notification_channels || ['slack'],\n  notify_on_start: true,\n  notify_on_progress: groupData.notify_on_progress || false,\n  notify_on_completion: true,\n  include_summary: true\n};\n\nreturn [{ \n  json: {\n    ...data,\n    api_payload: applyConfigPayload,\n    api_endpoint: `/api/v2/device-groups/${groupData.group_id}/apply-configuration`,\n    api_method: 'POST'\n  }\n}];"
      },
      "name": "Apply Configuration",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1000, 400]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{$json.operation}}",
              "value2": "group_inventory"
            }
          ]
        }
      },
      "name": "Check Inventory Operation",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [800, 500]
    },
    {
      "parameters": {
        "functionCode": "// Group Inventory Operation\nconst data = items[0].json;\nconst groupData = data.group_data;\n\n// Inventory query parameters\nconst inventoryParams = {\n  include_devices: data.options.include_devices !== false,\n  include_subgroups: data.options.include_subgroups !== false,\n  include_statistics: data.options.include_statistics !== false,\n  include_health: data.options.include_health || false,\n  include_compliance: data.options.include_compliance || false,\n  device_fields: data.options.device_fields || ['id', 'name', 'type', 'status', 'location'],\n  sort_by: data.options.sort_by || 'name',\n  sort_order: data.options.sort_order || 'asc'\n};\n\n// Add filters if provided\nif (groupData.filters) {\n  inventoryParams.filters = {\n    device_status: groupData.filters.device_status || [],\n    device_types: groupData.filters.device_types || [],\n    locations: groupData.filters.locations || [],\n    tags: groupData.filters.tags || [],\n    last_seen: groupData.filters.last_seen || null\n  };\n}\n\n// Build query string\nconst queryString = Object.keys(inventoryParams)\n  .filter(key => inventoryParams[key] !== undefined && inventoryParams[key] !== null)\n  .map(key => {\n    if (Array.isArray(inventoryParams[key])) {\n      return `${key}=${inventoryParams[key].join(',')}`;\n    }\n    return `${key}=${encodeURIComponent(inventoryParams[key])}`;\n  })\n  .join('&');\n\nreturn [{ \n  json: {\n    ...data,\n    api_payload: null,\n    api_endpoint: `/api/v2/device-groups/${groupData.group_id}/inventory?${queryString}`,\n    api_method: 'GET'\n  }\n}];"
      },
      "name": "Get Group Inventory",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1000, 500]
    },
    {
      "parameters": {
        "functionCode": "// Handle other device group operations\nconst data = items[0].json;\nconst operation = data.operation;\nconst groupData = data.group_data;\n\nlet apiEndpoint = '';\nlet apiMethod = 'GET';\nlet apiPayload = null;\n\nswitch (operation) {\n  case 'update_group':\n    apiEndpoint = `/api/v2/device-groups/${groupData.group_id}`;\n    apiMethod = 'PUT';\n    apiPayload = {\n      group_name: groupData.group_name,\n      description: groupData.description,\n      group_properties: groupData.group_properties,\n      policies: groupData.policies,\n      permissions: groupData.permissions,\n      automation: groupData.automation,\n      metadata: {\n        updated_by: 'Central Platform Automation',\n        updated_at: data.timestamp,\n        execution_id: data.execution_id\n      }\n    };\n    // Remove undefined fields\n    Object.keys(apiPayload).forEach(key => {\n      if (apiPayload[key] === undefined) delete apiPayload[key];\n    });\n    break;\n    \n  case 'delete_group':\n    apiEndpoint = `/api/v2/device-groups/${groupData.group_id}`;\n    apiMethod = 'DELETE';\n    apiPayload = {\n      force_delete: groupData.force_delete || false,\n      reassign_devices_to: groupData.reassign_devices_to || null,\n      delete_policies: groupData.delete_policies || false\n    };\n    break;\n    \n  case 'list_groups':\n    const listParams = {\n      limit: data.options.limit || 100,\n      offset: data.options.offset || 0,\n      group_type: data.options.group_type,\n      parent_group_id: data.options.parent_group_id,\n      include_device_count: data.options.include_device_count !== false,\n      include_subgroups: data.options.include_subgroups || false,\n      sort_by: data.options.sort_by || 'name'\n    };\n    const queryString = Object.keys(listParams)\n      .filter(key => listParams[key] !== undefined)\n      .map(key => `${key}=${encodeURIComponent(listParams[key])}`)\n      .join('&');\n    apiEndpoint = `/api/v2/device-groups?${queryString}`;\n    break;\n    \n  case 'remove_devices':\n    apiEndpoint = `/api/v2/device-groups/${groupData.group_id}/devices`;\n    apiMethod = 'DELETE';\n    apiPayload = {\n      device_ids: groupData.device_ids || [],\n      remove_from_subgroups: groupData.remove_from_subgroups || false,\n      preserve_device_config: groupData.preserve_device_config !== false\n    };\n    break;\n    \n  case 'move_devices':\n    apiEndpoint = `/api/v2/device-groups/move-devices`;\n    apiMethod = 'POST';\n    apiPayload = {\n      device_ids: groupData.device_ids || [],\n      source_group_id: groupData.source_group_id,\n      target_group_id: groupData.target_group_id,\n      move_options: {\n        preserve_config: groupData.preserve_config !== false,\n        apply_target_policies: groupData.apply_target_policies !== false,\n        remove_source_policies: groupData.remove_source_policies || false,\n        validate_move: groupData.validate_move !== false\n      }\n    };\n    break;\n    \n  case 'group_status':\n    apiEndpoint = `/api/v2/device-groups/${groupData.group_id}/status`;\n    if (data.options.include_metrics) {\n      apiEndpoint += '?include_metrics=true';\n    }\n    break;\n    \n  case 'sync_group':\n    apiEndpoint = `/api/v2/device-groups/${groupData.group_id}/sync`;\n    apiMethod = 'POST';\n    apiPayload = {\n      sync_type: groupData.sync_type || 'full',\n      sync_options: {\n        update_membership: groupData.update_membership !== false,\n        update_configuration: groupData.update_configuration !== false,\n        update_policies: groupData.update_policies !== false,\n        force_sync: groupData.force_sync || false\n      }\n    };\n    break;\n    \n  case 'group_analytics':\n    const analyticsParams = {\n      metrics: groupData.metrics || ['device_count', 'health_score', 'compliance_rate'],\n      time_range: groupData.time_range || '24h',\n      aggregation: groupData.aggregation || 'avg',\n      group_by: groupData.group_by || 'hour'\n    };\n    const analyticsQuery = Object.keys(analyticsParams)\n      .map(key => `${key}=${encodeURIComponent(analyticsParams[key])}`)\n      .join('&');\n    apiEndpoint = `/api/v2/device-groups/${groupData.group_id}/analytics?${analyticsQuery}`;\n    break;\n    \n  default:\n    throw new Error(`Unsupported operation: ${operation}`);\n}\n\nreturn [{ \n  json: {\n    ...data,\n    api_payload: apiPayload,\n    api_endpoint: apiEndpoint,\n    api_method: apiMethod\n  }\n}];"
      },
      "name": "Handle Other Operations",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1000, 600]
    },
    {
      "parameters": {
        "url": "={{$json.api_endpoint}}",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "arubaApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "Authorization",
              "value": "Bearer {{$credentials.arubaApi.accessToken}}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "data",
              "value": "={{JSON.stringify($json.api_payload)}}"
            }
          ]
        },
        "options": {
          "timeout": 30000,
          "retry": {
            "maxTries": 3,
            "waitBetweenTries": 2000
          }
        }
      },
      "name": "Execute API Request",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [1200, 400]
    },
    {
      "parameters": {
        "functionCode": "// Process API Success Response\nconst data = items[0].json;\nconst originalRequest = data.originalRequest || {};\n\n// Extract response data\nconst responseData = data.response || data;\nconst statusCode = data.statusCode || 200;\nconst operation = originalRequest.operation;\n\n// Success response processing\nlet processedResponse = {\n  success: true,\n  operation: operation,\n  timestamp: new Date().toISOString(),\n  execution_id: originalRequest.execution_id,\n  status_code: statusCode,\n  data: responseData\n};\n\n// Operation-specific response processing\nswitch (operation) {\n  case 'create_group':\n    processedResponse.group_id = responseData.group_id || responseData.id;\n    processedResponse.group_name = responseData.group_name;\n    processedResponse.group_type = responseData.group_type;\n    processedResponse.message = `Device group '${responseData.group_name}' created successfully`;\n    break;\n    \n  case 'update_group':\n    processedResponse.group_id = responseData.group_id || responseData.id;\n    processedResponse.group_name = responseData.group_name;\n    processedResponse.message = `Device group '${responseData.group_name}' updated successfully`;\n    break;\n    \n  case 'add_devices':\n    processedResponse.group_id = responseData.group_id;\n    processedResponse.devices_added = responseData.devices_added || responseData.added_count;\n    processedResponse.devices_failed = responseData.devices_failed || 0;\n    processedResponse.total_devices = responseData.total_devices;\n    processedResponse.message = `Added ${processedResponse.devices_added} devices to group`;\n    break;\n    \n  case 'remove_devices':\n    processedResponse.group_id = responseData.group_id;\n    processedResponse.devices_removed = responseData.devices_removed || responseData.removed_count;\n    processedResponse.message = `Removed ${processedResponse.devices_removed} devices from group`;\n    break;\n    \n  case 'move_devices':\n    processedResponse.devices_moved = responseData.devices_moved || responseData.moved_count;\n    processedResponse.source_group = responseData.source_group;\n    processedResponse.target_group = responseData.target_group;\n    processedResponse.message = `Moved ${processedResponse.devices_moved} devices between groups`;\n    break;\n    \n  case 'apply_configuration':\n    processedResponse.application_id = responseData.application_id;\n    processedResponse.target_devices = responseData.target_devices;\n    processedResponse.status = responseData.status;\n    processedResponse.message = `Configuration application started for ${responseData.target_devices} devices`;\n    break;\n    \n  case 'list_groups':\n    processedResponse.total_count = responseData.total_count || responseData.length;\n    processedResponse.groups = responseData.groups || responseData;\n    processedResponse.message = `Retrieved ${processedResponse.total_count} device groups`;\n    break;\n    \n  case 'delete_group':\n    processedResponse.message = 'Device group deleted successfully';\n    if (responseData.reassigned_devices) {\n      processedResponse.reassigned_devices = responseData.reassigned_devices;\n    }\n    break;\n    \n  case 'group_status':\n    processedResponse.group_id = responseData.group_id;\n    processedResponse.status = responseData.status;\n    processedResponse.device_count = responseData.device_count;\n    processedResponse.health_score = responseData.health_score;\n    processedResponse.message = `Group status: ${responseData.status}`;\n    break;\n    \n  case 'group_inventory':\n    processedResponse.group_id = responseData.group_id;\n    processedResponse.total_devices = responseData.total_devices || 0;\n    processedResponse.devices = responseData.devices || [];\n    processedResponse.subgroups = responseData.subgroups || [];\n    processedResponse.statistics = responseData.statistics || {};\n    processedResponse.message = `Retrieved inventory for ${responseData.total_devices} devices`;\n    break;\n    \n  case 'sync_group':\n    processedResponse.group_id = responseData.group_id;\n    processedResponse.sync_status = responseData.sync_status;\n    processedResponse.devices_synced = responseData.devices_synced;\n    processedResponse.sync_duration = responseData.sync_duration;\n    processedResponse.message = `Group sync completed: ${responseData.devices_synced} devices synchronized`;\n    break;\n    \n  case 'group_analytics':\n    processedResponse.group_id = responseData.group_id;\n    processedResponse.metrics = responseData.metrics;\n    processedResponse.time_range = responseData.time_range;\n    processedResponse.analytics_data = responseData.analytics_data;\n    processedResponse.message = `Analytics data retrieved for group`;\n    break;\n}\n\n// Add performance metrics\nprocessedResponse.metrics = {\n  response_time: data.response_time || 'N/A',\n  api_calls: 1,\n  success_rate: '100%'\n};\n\nconsole.log(`Device Group Success: ${operation} - ${processedResponse.execution_id}`);\n\nreturn [{ json: processedResponse }];"
      },
      "name": "Process Success Response",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1400, 400]
    },
    {
      "parameters": {
        "functionCode": "// Process Error Response\nconst error = items[0].json.error || items[0].json;\nconst originalRequest = items[0].json.originalRequest || {};\n\n// Extract error details\nconst errorResponse = {\n  success: false,\n  operation: originalRequest.operation,\n  timestamp: new Date().toISOString(),\n  execution_id: originalRequest.execution_id,\n  error: {\n    code: error.code || error.statusCode || 'UNKNOWN_ERROR',\n    message: error.message || 'Unknown error occurred',\n    details: error.details || error.response || {},\n    stack: error.stack\n  }\n};\n\n// Error categorization\nconst errorCode = errorResponse.error.code;\nif (errorCode >= 400 && errorCode < 500) {\n  errorResponse.error.category = 'CLIENT_ERROR';\n  errorResponse.error.retry_recommended = false;\n} else if (errorCode >= 500) {\n  errorResponse.error.category = 'SERVER_ERROR';\n  errorResponse.error.retry_recommended = true;\n} else {\n  errorResponse.error.category = 'UNKNOWN_ERROR';\n  errorResponse.error.retry_recommended = false;\n}\n\n// Operation-specific error handling\nswitch (originalRequest.operation) {\n  case 'create_group':\n    if (errorCode === 409) {\n      errorResponse.error.message = 'Device group with this name already exists';\n    } else if (errorCode === 400) {\n      errorResponse.error.message = 'Invalid group configuration';\n    }\n    break;\n    \n  case 'add_devices':\n    if (errorCode === 404) {\n      errorResponse.error.message = 'Device group not found';\n    } else if (errorCode === 422) {\n      errorResponse.error.message = 'One or more devices are invalid or incompatible';\n    }\n    break;\n    \n  case 'move_devices':\n    if (errorCode === 409) {\n      errorResponse.error.message = 'Device move conflict - devices may already be in target group';\n    } else if (errorCode === 403) {\n      errorResponse.error.message = 'Insufficient permissions to move devices between groups';\n    }\n    break;\n    \n  case 'apply_configuration':\n    if (errorCode === 422) {\n      errorResponse.error.message = 'Configuration validation failed';\n    } else if (errorCode === 503) {\n      errorResponse.error.message = 'Configuration service temporarily unavailable';\n    }\n    break;\n    \n  case 'delete_group':\n    if (errorCode === 409) {\n      errorResponse.error.message = 'Cannot delete group - it contains devices or subgroups';\n    } else if (errorCode === 404) {\n      errorResponse.error.message = 'Device group not found';\n    }\n    break;\n}\n\nconsole.error(`Device Group Error: ${originalRequest.operation} - ${errorResponse.execution_id}`, errorResponse.error);\n\nreturn [{ json: errorResponse }];"
      },
      "name": "Process Error Response",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1400, 600]
    },
    {
      "parameters": {
        "channel": "={{$json.notification_settings?.slack?.channel || '#central-platform-automation'}}",
        "text": "👥 **Central Platform Device Group Management**\\n\\n**Operation**: {{$json.operation}}\\n**Status**: {{$json.success ? '✅ Success' : '❌ Failed'}}\\n**Group**: {{$json.group_name || $json.group_id}}\\n**Execution ID**: {{$json.execution_id}}\\n**Message**: {{$json.message || $json.error?.message}}\\n**Timestamp**: {{$json.timestamp}}\\n\\n{{$json.success ? ($json.device_count ? '**Devices**: ' + $json.device_count : ($json.devices_added ? '**Devices Added**: ' + $json.devices_added : '')) : '**Error Code**: ' + $json.error?.code}}",
        "username": "Device Group Bot",
        "iconEmoji": ":busts_in_silhouette:"
      },
      "name": "Send Slack Notification",
      "type": "n8n-nodes-base.slack",
      "typeVersion": 1,
      "position": [1600, 400]
    },
    {
      "parameters": {
        "functionCode": "// Final Response Formatter\nconst data = items[0].json;\n\n// Format final response\nconst finalResponse = {\n  success: data.success,\n  operation: data.operation,\n  execution_id: data.execution_id,\n  timestamp: data.timestamp,\n  message: data.message\n};\n\n// Add operation-specific data\nif (data.success) {\n  finalResponse.data = data.data;\n  finalResponse.metrics = data.metrics;\n  \n  // Add specific fields based on operation\n  if (data.group_id) finalResponse.group_id = data.group_id;\n  if (data.group_name) finalResponse.group_name = data.group_name;\n  if (data.devices_added !== undefined) finalResponse.devices_added = data.devices_added;\n  if (data.devices_removed !== undefined) finalResponse.devices_removed = data.devices_removed;\n  if (data.devices_moved !== undefined) finalResponse.devices_moved = data.devices_moved;\n  if (data.total_count !== undefined) finalResponse.total_count = data.total_count;\n  if (data.total_devices !== undefined) finalResponse.total_devices = data.total_devices;\n} else {\n  finalResponse.error = data.error;\n  finalResponse.retry_recommended = data.error?.retry_recommended;\n}\n\n// Add execution summary\nfinalResponse.execution_summary = {\n  workflow: 'Central Platform Device Group Management',\n  version: '1.0.0',\n  executed_at: data.timestamp,\n  duration: 'N/A' // Could be calculated if needed\n};\n\nreturn [{ json: finalResponse }];"
      },
      "name": "Format Final Response",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1800, 400]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{JSON.stringify($json, null, 2)}}"
      },
      "name": "Return Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [2000, 400]
    }
  ],
  "connections": {
    "Device Group Webhook": {
      "main": [
        [
          {
            "node": "Parse Group Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Group Request": {
      "main": [
        [
          {
            "node": "Check Create Operation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Create Operation": {
      "main": [
        [
          {
            "node": "Create Group",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Check Add Devices Operation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Group": {
      "main": [
        [
          {
            "node": "Execute API Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Add Devices Operation": {
      "main": [
        [
          {
            "node": "Add Devices to Group",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Check Apply Config Operation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Add Devices to Group": {
      "main": [
        [
          {
            "node": "Execute API Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Apply Config Operation": {
      "main": [
        [
          {
            "node": "Apply Configuration",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Check Inventory Operation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Apply Configuration": {
      "main": [
        [
          {
            "node": "Execute API Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Inventory Operation": {
      "main": [
        [
          {
            "node": "Get Group Inventory",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Handle Other Operations",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Group Inventory": {
      "main": [
        [
          {
            "node": "Execute API Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Handle Other Operations": {
      "main": [
        [
          {
            "node": "Execute API Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute API Request": {
      "main": [
        [
          {
            "node": "Process Success Response",
            "type": "main",
            "index": 0
          }
        ]
      ],
      "error": [
        [
          {
            "node": "Process Error Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Success Response": {
      "main": [
        [
          {
            "node": "Send Slack Notification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Error Response": {
      "main": [
        [
          {
            "node": "Send Slack Notification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send Slack Notification": {
      "main": [
        [
          {
            "node": "Format Final Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Final Response": {
      "main": [
        [
          {
            "node": "Return Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  }
}