{
  "templates": {
    "device_health_monitoring": {
      "name": "HPE Aruba Device Health Monitor",
      "description": "Monitors device health and sends alerts for issues",
      "trigger": "schedule",
      "nodes": [
        {
          "name": "Health Check Schedule",
          "type": "n8n-nodes-base.scheduleTrigger",
          "parameters": {
            "rule": {
              "interval": [{"field": "minutes", "minutesInterval": 5}]
            }
          },
          "position": [250, 300]
        },
        {
          "name": "Get All Devices",
          "type": "n8n-nodes-base.httpRequest",
          "parameters": {
            "method": "GET",
            "url": "https://{{aruba_central_domain}}/api/v2/devices",
            "authentication": "predefinedCredentialType",
            "nodeCredentialType": "arubaNetworkingApi",
            "options": {
              "timeout": 30000,
              "retry": {"maxTries": 3, "waitBetweenTries": 2000}
            }
          },
          "position": [450, 300]
        },
        {
          "name": "Process Each Device",
          "type": "n8n-nodes-base.itemLists",
          "parameters": {"operation": "splitOutItems"},
          "position": [650, 300]
        },
        {
          "name": "Get Device Health",
          "type": "n8n-nodes-base.httpRequest",
          "parameters": {
            "method": "GET",
            "url": "https://{{aruba_central_domain}}/api/v2/devices/{{$json.serial}}/status",
            "authentication": "predefinedCredentialType",
            "nodeCredentialType": "arubaNetworkingApi"
          },
          "position": [850, 300]
        },
        {
          "name": "Check Health Thresholds",
          "type": "n8n-nodes-base.if",
          "parameters": {
            "conditions": {
              "options": {
                "caseSensitive": true,
                "leftValue": "",
                "typeValidation": "strict"
              },
              "conditions": [
                {
                  "leftValue": "={{$json.cpu_usage}}",
                  "rightValue": "80",
                  "operator": {"type": "number", "operation": "gt"}
                }
              ],
              "combinator": "or"
            }
          },
          "position": [1050, 300]
        },
        {
          "name": "Send Alert",
          "type": "n8n-nodes-base.slack",
          "parameters": {
            "channel": "#network-alerts",
            "text": "ðŸš¨ High resource usage detected on {{$json.device_name}}:\nâ€¢ CPU: {{$json.cpu_usage}}%\nâ€¢ Memory: {{$json.memory_usage}}%\nâ€¢ Temperature: {{$json.temperature}}Â°C",
            "username": "Aruba Monitor"
          },
          "position": [1250, 200]
        }
      ],
      "connections": {
        "Health Check Schedule": {"main": [["Get All Devices"]]},
        "Get All Devices": {"main": [["Process Each Device"]]},
        "Process Each Device": {"main": [["Get Device Health"]]},
        "Get Device Health": {"main": [["Check Health Thresholds"]]},
        "Check Health Thresholds": {"main": [["Send Alert"], []]}
      }
    },
    "bulk_device_configuration": {
      "name": "HPE Aruba Bulk Device Configuration",
      "description": "Apply configuration templates to multiple devices",
      "trigger": "webhook",
      "nodes": [
        {
          "name": "Configuration Request",
          "type": "n8n-nodes-base.webhook",
          "parameters": {
            "path": "aruba-bulk-config",
            "method": "POST",
            "responseMode": "responseNode"
          },
          "position": [250, 300]
        },
        {
          "name": "Validate Input",
          "type": "n8n-nodes-base.function",
          "parameters": {
            "functionCode": "const requiredFields = ['devices', 'template_id', 'variables'];\nconst input = items[0].json;\n\nfor (const field of requiredFields) {\n  if (!input[field]) {\n    throw new Error(`Missing required field: ${field}`);\n  }\n}\n\nif (!Array.isArray(input.devices) || input.devices.length === 0) {\n  throw new Error('devices must be a non-empty array');\n}\n\nreturn items;"
          },
          "position": [450, 300]
        },
        {
          "name": "Get Template",
          "type": "n8n-nodes-base.httpRequest",
          "parameters": {
            "method": "GET",
            "url": "https://{{aruba_central_domain}}/api/v2/configuration/templates/{{$json.template_id}}",
            "authentication": "predefinedCredentialType",
            "nodeCredentialType": "arubaNetworkingApi"
          },
          "position": [650, 300]
        },
        {
          "name": "Process Device List",
          "type": "n8n-nodes-base.function",
          "parameters": {
            "functionCode": "const devices = items[0].json.devices;\nconst template = items[0].json.template;\nconst variables = items[0].json.variables;\n\nconst results = [];\n\n// Process devices in batches of 10\nconst batchSize = 10;\nfor (let i = 0; i < devices.length; i += batchSize) {\n  const batch = devices.slice(i, i + batchSize);\n  results.push({\n    json: {\n      batch_number: Math.floor(i / batchSize) + 1,\n      devices: batch,\n      template: template,\n      variables: variables\n    }\n  });\n}\n\nreturn results;"
          },
          "position": [850, 300]
        },
        {
          "name": "Apply Config to Batch",
          "type": "n8n-nodes-base.httpRequest",
          "parameters": {
            "method": "POST",
            "url": "https://{{aruba_central_domain}}/api/v2/configuration/apply",
            "authentication": "predefinedCredentialType",
            "nodeCredentialType": "arubaNetworkingApi",
            "sendBody": true,
            "bodyContentType": "json",
            "jsonBody": "{\n  \"devices\": \"={{$json.devices}}\",\n  \"template_id\": \"={{$json.template.id}}\",\n  \"variables\": \"={{$json.variables}}\"\n}"
          },
          "position": [1050, 300]
        },
        {
          "name": "Wait Between Batches",
          "type": "n8n-nodes-base.wait",
          "parameters": {
            "time": 5,
            "unit": "seconds"
          },
          "position": [1250, 300]
        },
        {
          "name": "Success Response",
          "type": "n8n-nodes-base.respondToWebhook",
          "parameters": {
            "responseBody": "{\n  \"status\": \"success\",\n  \"message\": \"Configuration applied to all devices\",\n  \"timestamp\": \"={{$now}}\"\n}",
            "responseContentType": "application/json"
          },
          "position": [1450, 300]
        }
      ]
    },
    "device_provisioning": {
      "name": "HPE Aruba Device Provisioning",
      "description": "Automatically provision new devices when they come online",
      "trigger": "webhook",
      "nodes": [
        {
          "name": "Device Online Event",
          "type": "n8n-nodes-base.webhook",
          "parameters": {
            "path": "aruba-device-online",
            "method": "POST"
          },
          "position": [250, 300]
        },
        {
          "name": "Validate Device Info",
          "type": "n8n-nodes-base.function",
          "parameters": {
            "functionCode": "const device = items[0].json;\n\nif (!device.serial || !device.mac_address) {\n  throw new Error('Device serial and MAC address required');\n}\n\n// Determine device type from model\nlet deviceType = 'unknown';\nif (device.model && device.model.includes('AP')) {\n  deviceType = 'access_point';\n} else if (device.model && device.model.includes('CX')) {\n  deviceType = 'switch';\n} else if (device.model && device.model.includes('GW')) {\n  deviceType = 'gateway';\n}\n\nreturn [{\n  json: {\n    ...device,\n    device_type: deviceType,\n    provisioning_needed: true\n  }\n}];"
          },
          "position": [450, 300]
        },
        {
          "name": "Check if Already Provisioned",
          "type": "n8n-nodes-base.httpRequest",
          "parameters": {
            "method": "GET",
            "url": "https://{{aruba_central_domain}}/api/v2/devices/{{$json.serial}}",
            "authentication": "predefinedCredentialType",
            "nodeCredentialType": "arubaNetworkingApi",
            "options": {
              "ignoreHttpStatusErrors": true
            }
          },
          "position": [650, 300]
        },
        {
          "name": "Device Already Exists?",
          "type": "n8n-nodes-base.if",
          "parameters": {
            "conditions": {
              "number": [
                {
                  "value1": "={{$httpStatusCode}}",
                  "operation": "equal",
                  "value2": 200
                }
              ]
            }
          },
          "position": [850, 300]
        },
        {
          "name": "Provision Device",
          "type": "n8n-nodes-base.httpRequest",
          "parameters": {
            "method": "POST",
            "url": "https://{{aruba_central_domain}}/api/v2/devices/provision",
            "authentication": "predefinedCredentialType",
            "nodeCredentialType": "arubaNetworkingApi",
            "sendBody": true,
            "bodyContentType": "json",
            "jsonBody": "{\n  \"serial\": \"={{$json.serial}}\",\n  \"mac_address\": \"={{$json.mac_address}}\",\n  \"device_type\": \"={{$json.device_type}}\",\n  \"group\": \"default\",\n  \"location\": {\n    \"building\": \"{{$json.building || 'Unknown'}}\",\n    \"floor\": \"{{$json.floor || 'Unknown'}}\"\n  }\n}"
          },
          "position": [1050, 200]
        },
        {
          "name": "Apply Default Template",
          "type": "n8n-nodes-base.httpRequest",
          "parameters": {
            "method": "POST",
            "url": "https://{{aruba_central_domain}}/api/v2/configuration/apply",
            "authentication": "predefinedCredentialType",
            "nodeCredentialType": "arubaNetworkingApi",
            "sendBody": true,
            "bodyContentType": "json",
            "jsonBody": "{\n  \"devices\": [\"={{$json.serial}}\"],\n  \"template_id\": \"{{$json.device_type}}_default\",\n  \"variables\": {\n    \"device_location\": \"={{$json.location}}\"\n  }\n}"
          },
          "position": [1250, 200]
        },
        {
          "name": "Send Provisioning Alert",
          "type": "n8n-nodes-base.slack",
          "parameters": {
            "channel": "#network-provisioning",
            "text": "âœ… Device provisioned successfully:\nâ€¢ Serial: {{$json.serial}}\nâ€¢ Type: {{$json.device_type}}\nâ€¢ Location: {{$json.location}}\nâ€¢ Status: Ready for use"
          },
          "position": [1450, 200]
        },
        {
          "name": "Device Exists - Skip",
          "type": "n8n-nodes-base.function",
          "parameters": {
            "functionCode": "return [{\n  json: {\n    message: 'Device already provisioned',\n    serial: items[0].json.serial,\n    action: 'skipped'\n  }\n}];"
          },
          "position": [1050, 400]
        }
      ]
    },
    "firmware_update_workflow": {
      "name": "HPE Aruba Firmware Update Management",
      "description": "Manages firmware updates across device groups",
      "trigger": "manual",
      "nodes": [
        {
          "name": "Manual Trigger",
          "type": "n8n-nodes-base.manualTrigger",
          "parameters": {},
          "position": [250, 300]
        },
        {
          "name": "Get Available Firmware",
          "type": "n8n-nodes-base.httpRequest",
          "parameters": {
            "method": "GET",
            "url": "https://{{aruba_central_domain}}/api/v2/firmware/versions",
            "authentication": "predefinedCredentialType",
            "nodeCredentialType": "arubaNetworkingApi"
          },
          "position": [450, 300]
        },
        {
          "name": "Get Devices for Update",
          "type": "n8n-nodes-base.httpRequest",
          "parameters": {
            "method": "GET",
            "url": "https://{{aruba_central_domain}}/api/v2/devices?group={{$parameter.device_group}}",
            "authentication": "predefinedCredentialType",
            "nodeCredentialType": "arubaNetworkingApi"
          },
          "position": [650, 300]
        },
        {
          "name": "Filter Outdated Devices",
          "type": "n8n-nodes-base.function",
          "parameters": {
            "functionCode": "const latestFirmware = items[0].json.latest_version;\nconst devices = items[1].json.devices;\n\nconst outdatedDevices = devices.filter(device => {\n  return device.firmware_version !== latestFirmware;\n});\n\nreturn outdatedDevices.map(device => ({\n  json: {\n    ...device,\n    target_firmware: latestFirmware,\n    needs_update: true\n  }\n}));"
          },
          "position": [850, 300]
        },
        {
          "name": "Create Update Batches",
          "type": "n8n-nodes-base.function",
          "parameters": {
            "functionCode": "const devices = items;\nconst batchSize = 5; // Update 5 devices at a time\nconst batches = [];\n\nfor (let i = 0; i < devices.length; i += batchSize) {\n  const batch = devices.slice(i, i + batchSize);\n  batches.push({\n    json: {\n      batch_number: Math.floor(i / batchSize) + 1,\n      devices: batch.map(d => d.json),\n      total_batches: Math.ceil(devices.length / batchSize)\n    }\n  });\n}\n\nreturn batches;"
          },
          "position": [1050, 300]
        },
        {
          "name": "Schedule Firmware Update",
          "type": "n8n-nodes-base.httpRequest",
          "parameters": {
            "method": "POST",
            "url": "https://{{aruba_central_domain}}/api/v2/firmware/schedule",
            "authentication": "predefinedCredentialType",
            "nodeCredentialType": "arubaNetworkingApi",
            "sendBody": true,
            "bodyContentType": "json",
            "jsonBody": "{\n  \"devices\": \"={{$json.devices.map(d => d.serial)}}\",\n  \"firmware_version\": \"={{$json.devices[0].target_firmware}}\",\n  \"schedule_time\": \"={{$now.plus({hours: 1}).toISO()}}\",\n  \"reboot_required\": true\n}"
          },
          "position": [1250, 300]
        },
        {
          "name": "Wait Between Batches",
          "type": "n8n-nodes-base.wait",
          "parameters": {
            "time": 10,
            "unit": "minutes"
          },
          "position": [1450, 300]
        },
        {
          "name": "Update Progress Notification",
          "type": "n8n-nodes-base.slack",
          "parameters": {
            "channel": "#network-updates",
            "text": "ðŸ“¡ Firmware update batch {{$json.batch_number}}/{{$json.total_batches}} scheduled:\nâ€¢ Devices: {{$json.devices.length}}\nâ€¢ Target firmware: {{$json.devices[0].target_firmware}}\nâ€¢ Scheduled for: {{$now.plus({hours: 1}).toFormat('yyyy-MM-dd HH:mm')}}"
          },
          "position": [1650, 300]
        }
      ]
    },
    "network_compliance_check": {
      "name": "HPE Aruba Network Compliance Monitor",
      "description": "Monitors network configuration compliance against standards",
      "trigger": "schedule",
      "nodes": [
        {
          "name": "Daily Compliance Check",
          "type": "n8n-nodes-base.scheduleTrigger",
          "parameters": {
            "rule": {
              "interval": [{"field": "days", "daysInterval": 1}],
              "time": {"hour": 6, "minute": 0}
            }
          },
          "position": [250, 300]
        },
        {
          "name": "Get All Device Groups",
          "type": "n8n-nodes-base.httpRequest",
          "parameters": {
            "method": "GET",
            "url": "https://{{aruba_central_domain}}/api/v2/configuration/groups",
            "authentication": "predefinedCredentialType",
            "nodeCredentialType": "arubaNetworkingApi"
          },
          "position": [450, 300]
        },
        {
          "name": "Process Each Group",
          "type": "n8n-nodes-base.itemLists",
          "parameters": {"operation": "splitOutItems"},
          "position": [650, 300]
        },
        {
          "name": "Get Group Devices",
          "type": "n8n-nodes-base.httpRequest",
          "parameters": {
            "method": "GET",
            "url": "https://{{aruba_central_domain}}/api/v2/configuration/groups/{{$json.id}}/devices",
            "authentication": "predefinedCredentialType",
            "nodeCredentialType": "arubaNetworkingApi"
          },
          "position": [850, 300]
        },
        {
          "name": "Check Compliance Rules",
          "type": "n8n-nodes-base.function",
          "parameters": {
            "functionCode": "const devices = items[0].json.devices;\nconst complianceRules = {\n  required_vlans: [1, 100, 200],\n  min_password_length: 12,\n  required_snmp_version: '3',\n  max_unused_ports: 5\n};\n\nconst violations = [];\n\ndevices.forEach(device => {\n  // Check VLAN compliance\n  const deviceVlans = device.vlans || [];\n  const missingVlans = complianceRules.required_vlans.filter(\n    vlan => !deviceVlans.includes(vlan)\n  );\n  \n  if (missingVlans.length > 0) {\n    violations.push({\n      device: device.serial,\n      type: 'missing_vlans',\n      details: missingVlans,\n      severity: 'medium'\n    });\n  }\n  \n  // Check password policy\n  if (device.admin_password_length < complianceRules.min_password_length) {\n    violations.push({\n      device: device.serial,\n      type: 'weak_password',\n      details: `Password length: ${device.admin_password_length}`,\n      severity: 'high'\n    });\n  }\n});\n\nreturn [{\n  json: {\n    group: items[0].json.group_name,\n    violations: violations,\n    compliance_score: ((devices.length * complianceRules.length - violations.length) / (devices.length * complianceRules.length) * 100).toFixed(1)\n  }\n}];"
          },
          "position": [1050, 300]
        },
        {
          "name": "Generate Compliance Report",
          "type": "n8n-nodes-base.function",
          "parameters": {
            "functionCode": "const reports = items;\nlet totalViolations = 0;\nlet highSeverityCount = 0;\n\nconst reportData = reports.map(report => {\n  const violations = report.json.violations;\n  totalViolations += violations.length;\n  highSeverityCount += violations.filter(v => v.severity === 'high').length;\n  \n  return {\n    group: report.json.group,\n    compliance_score: report.json.compliance_score,\n    violations: violations.length,\n    high_severity: violations.filter(v => v.severity === 'high').length\n  };\n});\n\nconst overallScore = reports.reduce((sum, r) => sum + parseFloat(r.json.compliance_score), 0) / reports.length;\n\nreturn [{\n  json: {\n    report_date: new Date().toISOString().split('T')[0],\n    overall_compliance_score: overallScore.toFixed(1),\n    total_violations: totalViolations,\n    high_severity_violations: highSeverityCount,\n    group_reports: reportData\n  }\n}];"
          },
          "position": [1250, 300]
        },
        {
          "name": "Send Compliance Report",
          "type": "n8n-nodes-base.emailSend",
          "parameters": {
            "toEmail": "network-team@company.com",
            "subject": "Daily Network Compliance Report - {{$json.overall_compliance_score}}% Compliant",
            "emailType": "html",
            "message": "<h2>Network Compliance Report</h2>\n<p><strong>Date:</strong> {{$json.report_date}}</p>\n<p><strong>Overall Compliance Score:</strong> {{$json.overall_compliance_score}}%</p>\n<p><strong>Total Violations:</strong> {{$json.total_violations}}</p>\n<p><strong>High Severity Violations:</strong> {{$json.high_severity_violations}}</p>\n\n<h3>Group Details:</h3>\n{{#each group_reports}}\n<div style='margin: 10px 0; padding: 10px; border: 1px solid #ddd;'>\n  <strong>{{group}}:</strong> {{compliance_score}}% compliant<br>\n  Violations: {{violations}} ({{high_severity}} high severity)\n</div>\n{{/each}}"
          },
          "position": [1450, 300]
        }
      ]
    }
  },
  "credential_templates": {
    "aruba_central_api": {
      "name": "Aruba Central API",
      "type": "httpHeaderAuth",
      "properties": {
        "name": "Authorization",
        "value": "Bearer {{access_token}}"
      }
    },
    "aos_cx_api": {
      "name": "AOS-CX Switch API",
      "type": "httpBasicAuth",
      "properties": {
        "user": "{{username}}",
        "password": "{{password}}"
      }
    }
  },
  "common_parameters": {
    "aruba_central_domain": {
      "description": "Aruba Central API domain (e.g., us-west-2.central.arubanetworks.com)",
      "type": "string",
      "default": "us-west-2.central.arubanetworks.com"
    },
    "device_group": {
      "description": "Target device group for operations",
      "type": "string",
      "default": "default"
    },
    "alert_channel": {
      "description": "Slack channel for alerts",
      "type": "string",
      "default": "#network-alerts"
    }
  }
}