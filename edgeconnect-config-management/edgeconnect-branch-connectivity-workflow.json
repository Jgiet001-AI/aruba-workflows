{
  "name": "EdgeConnect Branch Connectivity Management",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "edgeconnect-branch-connectivity",
        "responseMode": "onReceived",
        "options": {}
      },
      "id": "e1d1c5a8-8b4e-4b5a-9c8d-1e2f3a4b5c6d",
      "name": "Branch Connectivity Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        240,
        300
      ],
      "webhookId": "branch-connectivity-webhook"
    },
    {
      "parameters": {
        "jsCode": "// EdgeConnect Branch Connectivity Management Workflow\n// Operations: configure_branch, update_connectivity, failover_test, optimize_paths, monitor_links, reset_configuration\n\nconst operation = $input.item(0).json.operation;\nconst branchData = $input.item(0).json.branch_data || {};\nconst orchestratorUrl = $input.item(0).json.orchestrator_url;\nconst branchId = $input.item(0).json.branch_id;\nconst connectivityType = $input.item(0).json.connectivity_type || 'hybrid';\n\n// Validate required parameters\nif (!operation) {\n  throw new Error('Operation is required. Valid operations: configure_branch, update_connectivity, failover_test, optimize_paths, monitor_links, reset_configuration');\n}\n\nif (!orchestratorUrl) {\n  throw new Error('Orchestrator URL is required');\n}\n\nif (['configure_branch', 'update_connectivity', 'failover_test'].includes(operation) && !branchId) {\n  throw new Error('Branch ID is required for this operation');\n}\n\n// Branch connectivity templates\nconst connectivityTemplates = {\n  'small_branch': {\n    name: 'Small Branch Office',\n    wan_links: [\n      {\n        name: 'Primary MPLS',\n        type: 'mpls',\n        bandwidth: '10mbps',\n        priority: 'high',\n        cost: 100,\n        failover_enabled: true\n      },\n      {\n        name: 'Secondary Broadband',\n        type: 'broadband',\n        bandwidth: '50mbps',\n        priority: 'medium',\n        cost: 200,\n        backup_only: true\n      }\n    ],\n    traffic_policies: {\n      critical_apps: { preferred_path: 'mpls', backup_path: 'broadband' },\n      internet_traffic: { preferred_path: 'broadband', backup_path: 'mpls' },\n      voice_video: { dedicated_path: 'mpls', bandwidth_guarantee: '2mbps' }\n    },\n    failover_settings: {\n      detection_time: '5s',\n      recovery_time: '10s',\n      blackhole_detection: true\n    }\n  },\n  'medium_branch': {\n    name: 'Medium Branch Office',\n    wan_links: [\n      {\n        name: 'Primary MPLS',\n        type: 'mpls',\n        bandwidth: '50mbps',\n        priority: 'high',\n        cost: 100,\n        failover_enabled: true\n      },\n      {\n        name: 'Secondary Broadband',\n        type: 'broadband',\n        bandwidth: '100mbps',\n        priority: 'medium',\n        cost: 150,\n        load_balancing: true\n      },\n      {\n        name: 'Backup LTE',\n        type: 'lte',\n        bandwidth: '25mbps',\n        priority: 'low',\n        cost: 300,\n        backup_only: true\n      }\n    ],\n    traffic_policies: {\n      critical_apps: { preferred_path: 'mpls', backup_path: 'broadband' },\n      internet_traffic: { load_balance: ['broadband', 'mpls'], ratio: '70:30' },\n      voice_video: { dedicated_path: 'mpls', bandwidth_guarantee: '5mbps' },\n      backup_traffic: { backup_path: 'lte' }\n    },\n    failover_settings: {\n      detection_time: '3s',\n      recovery_time: '5s',\n      blackhole_detection: true,\n      path_monitoring: true\n    }\n  },\n  'large_branch': {\n    name: 'Large Branch Office',\n    wan_links: [\n      {\n        name: 'Primary MPLS',\n        type: 'mpls',\n        bandwidth: '100mbps',\n        priority: 'high',\n        cost: 100,\n        failover_enabled: true\n      },\n      {\n        name: 'Secondary MPLS',\n        type: 'mpls',\n        bandwidth: '100mbps',\n        priority: 'high',\n        cost: 110,\n        load_balancing: true\n      },\n      {\n        name: 'Broadband Primary',\n        type: 'broadband',\n        bandwidth: '200mbps',\n        priority: 'medium',\n        cost: 150,\n        load_balancing: true\n      },\n      {\n        name: 'Broadband Secondary',\n        type: 'broadband',\n        bandwidth: '200mbps',\n        priority: 'medium',\n        cost: 160,\n        load_balancing: true\n      }\n    ],\n    traffic_policies: {\n      critical_apps: { preferred_paths: ['mpls', 'mpls'], load_balance: true },\n      internet_traffic: { preferred_paths: ['broadband', 'broadband'], load_balance: true },\n      voice_video: { dedicated_paths: ['mpls'], bandwidth_guarantee: '10mbps' },\n      data_backup: { preferred_paths: ['broadband'], time_restriction: 'off_hours' }\n    },\n    failover_settings: {\n      detection_time: '2s',\n      recovery_time: '3s',\n      blackhole_detection: true,\n      path_monitoring: true,\n      load_balancing: true\n    }\n  },\n  'retail_store': {\n    name: 'Retail Store',\n    wan_links: [\n      {\n        name: 'Primary Broadband',\n        type: 'broadband',\n        bandwidth: '75mbps',\n        priority: 'high',\n        cost: 100,\n        failover_enabled: true\n      },\n      {\n        name: 'Backup LTE',\n        type: 'lte',\n        bandwidth: '25mbps',\n        priority: 'medium',\n        cost: 200,\n        backup_only: true\n      }\n    ],\n    traffic_policies: {\n      pos_systems: { preferred_path: 'broadband', backup_path: 'lte', priority: 'critical' },\n      credit_card: { preferred_path: 'broadband', backup_path: 'lte', encryption: 'required' },\n      inventory: { preferred_path: 'broadband', time_restriction: 'business_hours' },\n      guest_wifi: { preferred_path: 'broadband', bandwidth_limit: '10mbps' }\n    },\n    failover_settings: {\n      detection_time: '3s',\n      recovery_time: '5s',\n      blackhole_detection: true,\n      pos_priority: true\n    }\n  },\n  'manufacturing': {\n    name: 'Manufacturing Site',\n    wan_links: [\n      {\n        name: 'Primary Fiber',\n        type: 'fiber',\n        bandwidth: '1gbps',\n        priority: 'high',\n        cost: 100,\n        failover_enabled: true\n      },\n      {\n        name: 'Secondary MPLS',\n        type: 'mpls',\n        bandwidth: '100mbps',\n        priority: 'medium',\n        cost: 150,\n        backup_path: true\n      },\n      {\n        name: 'Emergency LTE',\n        type: 'lte',\n        bandwidth: '50mbps',\n        priority: 'low',\n        cost: 300,\n        emergency_only: true\n      }\n    ],\n    traffic_policies: {\n      scada_systems: { dedicated_path: 'fiber', backup_path: 'mpls', priority: 'critical' },\n      erp_systems: { preferred_path: 'fiber', backup_path: 'mpls', priority: 'high' },\n      internet_access: { preferred_path: 'fiber', bandwidth_limit: '100mbps' },\n      backup_systems: { emergency_path: 'lte', time_restriction: 'maintenance_window' }\n    },\n    failover_settings: {\n      detection_time: '1s',\n      recovery_time: '2s',\n      blackhole_detection: true,\n      industrial_grade: true\n    }\n  }\n};\n\n// Generate branch configuration based on connectivity type\nlet branchConfig = branchData;\nif (operation === 'configure_branch' && connectivityType && connectivityTemplates[connectivityType]) {\n  branchConfig = { ...connectivityTemplates[connectivityType], ...branchData };\n}\n\n// Prepare output data\nconst outputData = {\n  operation,\n  branch_id: branchId,\n  branch_config: branchConfig,\n  orchestrator_url: orchestratorUrl,\n  connectivity_type: connectivityType,\n  timestamp: new Date().toISOString(),\n  validation_rules: {\n    branch_id_required: ['configure_branch', 'update_connectivity', 'failover_test', 'monitor_links'].includes(operation),\n    config_required: ['configure_branch', 'update_connectivity'].includes(operation),\n    links_required: ['configure_branch', 'optimize_paths'].includes(operation)\n  }\n};\n\n// Add operation-specific data\nif (operation === 'failover_test') {\n  outputData.test_config = {\n    test_duration: branchData.test_duration || '60s',\n    test_links: branchData.test_links || 'all',\n    simulate_failure: branchData.simulate_failure || false,\n    rollback_enabled: branchData.rollback_enabled !== false\n  };\n}\n\nif (operation === 'optimize_paths') {\n  outputData.optimization_config = {\n    algorithm: branchData.algorithm || 'latency_based',\n    metrics: branchData.metrics || ['latency', 'jitter', 'packet_loss', 'bandwidth'],\n    update_frequency: branchData.update_frequency || '5m',\n    auto_apply: branchData.auto_apply !== false\n  };\n}\n\nif (operation === 'monitor_links') {\n  outputData.monitoring_config = {\n    interval: branchData.interval || '30s',\n    thresholds: branchData.thresholds || {\n      latency: '100ms',\n      jitter: '50ms',\n      packet_loss: '5%',\n      bandwidth_utilization: '80%'\n    },\n    alert_enabled: branchData.alert_enabled !== false\n  };\n}\n\nreturn [{ json: outputData }];"
      },
      "id": "f2e3d6c9-9c5f-5c6a-ad9e-2f3a4b5c6d7e",
      "name": "Prepare Branch Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        460,
        300
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "condition1",
              "leftValue": "={{$json.operation}}",
              "rightValue": "configure_branch",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "a3b4c5d6-ad5f-6d7a-be8f-3a4b5c6d7e8f",
      "name": "Route Configure",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        680,
        200
      ]
    },
    {
      "parameters": {
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "edgeConnectApi",
        "url": "={{$json.orchestrator_url}}/api/v1/branches/={{$json.branch_id}}/connectivity",
        "method": "POST",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "X-API-Version",
              "value": "1.0"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "name",
              "value": "={{$json.branch_config.name}}"
            },
            {
              "name": "connectivity_type",
              "value": "={{$json.connectivity_type}}"
            },
            {
              "name": "wan_links",
              "value": "={{JSON.stringify($json.branch_config.wan_links || [])}}"
            },
            {
              "name": "traffic_policies",
              "value": "={{JSON.stringify($json.branch_config.traffic_policies || {})}}"
            },
            {
              "name": "failover_settings",
              "value": "={{JSON.stringify($json.branch_config.failover_settings || {})}}"
            },
            {
              "name": "auto_apply",
              "value": "={{$json.branch_config.auto_apply !== undefined ? $json.branch_config.auto_apply : true}}"
            }
          ]
        },
        "options": {
          "timeout": 60000,
          "retry": {
            "maxTries": 3,
            "waitBetweenTries": 5000
          }
        }
      },
      "id": "b4c5d6e7-be8f-7e8f-cf9a-4b5c6d7e8f9a",
      "name": "Configure Branch",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        900,
        200
      ]
    },
    {
      "parameters": {
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "edgeConnectApi",
        "url": "={{$json.orchestrator_url}}/api/v1/branches/={{$json.branch_id}}/connectivity",
        "method": "PUT",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "X-API-Version",
              "value": "1.0"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "wan_links",
              "value": "={{JSON.stringify($json.branch_config.wan_links || [])}}"
            },
            {
              "name": "traffic_policies",
              "value": "={{JSON.stringify($json.branch_config.traffic_policies || {})}}"
            },
            {
              "name": "failover_settings",
              "value": "={{JSON.stringify($json.branch_config.failover_settings || {})}}"
            },
            {
              "name": "updated_by",
              "value": "n8n-automation"
            }
          ]
        },
        "options": {
          "timeout": 60000,
          "retry": {
            "maxTries": 3,
            "waitBetweenTries": 5000
          }
        }
      },
      "id": "c5d6e7f8-cf9a-8f9a-da0b-5c6d7e8f9a0b",
      "name": "Update Connectivity",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        900,
        300
      ]
    },
    {
      "parameters": {
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "edgeConnectApi",
        "url": "={{$json.orchestrator_url}}/api/v1/branches/={{$json.branch_id}}/failover/test",
        "method": "POST",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "X-API-Version",
              "value": "1.0"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "test_duration",
              "value": "={{$json.test_config.test_duration}}"
            },
            {
              "name": "test_links",
              "value": "={{$json.test_config.test_links}}"
            },
            {
              "name": "simulate_failure",
              "value": "={{$json.test_config.simulate_failure}}"
            },
            {
              "name": "rollback_enabled",
              "value": "={{$json.test_config.rollback_enabled}}"
            }
          ]
        },
        "options": {
          "timeout": 120000,
          "retry": {
            "maxTries": 2,
            "waitBetweenTries": 10000
          }
        }
      },
      "id": "d6e7f8a9-da0b-9a0b-eb1c-6d7e8f9a0b1c",
      "name": "Failover Test",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        900,
        400
      ]
    },
    {
      "parameters": {
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "edgeConnectApi",
        "url": "={{$json.orchestrator_url}}/api/v1/branches/={{$json.branch_id}}/paths/optimize",
        "method": "POST",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "X-API-Version",
              "value": "1.0"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "algorithm",
              "value": "={{$json.optimization_config.algorithm}}"
            },
            {
              "name": "metrics",
              "value": "={{JSON.stringify($json.optimization_config.metrics)}}"
            },
            {
              "name": "update_frequency",
              "value": "={{$json.optimization_config.update_frequency}}"
            },
            {
              "name": "auto_apply",
              "value": "={{$json.optimization_config.auto_apply}}"
            }
          ]
        },
        "options": {
          "timeout": 45000,
          "retry": {
            "maxTries": 3,
            "waitBetweenTries": 5000
          }
        }
      },
      "id": "e7f8a9b0-eb1c-a0b1-fc2d-7e8f9a0b1c2d",
      "name": "Optimize Paths",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        900,
        500
      ]
    },
    {
      "parameters": {
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "edgeConnectApi",
        "url": "={{$json.orchestrator_url}}/api/v1/branches/={{$json.branch_id}}/links/monitor",
        "method": "GET",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "X-API-Version",
              "value": "1.0"
            }
          ]
        },
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "interval",
              "value": "={{$json.monitoring_config.interval}}"
            },
            {
              "name": "include_metrics",
              "value": "true"
            },
            {
              "name": "alert_enabled",
              "value": "={{$json.monitoring_config.alert_enabled}}"
            }
          ]
        },
        "options": {
          "timeout": 30000,
          "retry": {
            "maxTries": 3,
            "waitBetweenTries": 2000
          }
        }
      },
      "id": "f8a9b0c1-fc2d-b1c2-ad3e-8f9a0b1c2d3e",
      "name": "Monitor Links",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        900,
        600
      ]
    },
    {
      "parameters": {
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "edgeConnectApi",
        "url": "={{$json.orchestrator_url}}/api/v1/branches/={{$json.branch_id}}/connectivity/reset",
        "method": "POST",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "X-API-Version",
              "value": "1.0"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "reset_to_default",
              "value": "={{$json.branch_config.reset_to_default !== undefined ? $json.branch_config.reset_to_default : false}}"
            },
            {
              "name": "preserve_links",
              "value": "={{$json.branch_config.preserve_links !== undefined ? $json.branch_config.preserve_links : true}}"
            },
            {
              "name": "backup_config",
              "value": "={{$json.branch_config.backup_config !== undefined ? $json.branch_config.backup_config : true}}"
            }
          ]
        },
        "options": {
          "timeout": 60000,
          "retry": {
            "maxTries": 2,
            "waitBetweenTries": 10000
          }
        }
      },
      "id": "a9b0c1d2-ad3e-c2d3-be4f-9a0b1c2d3e4f",
      "name": "Reset Configuration",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        900,
        700
      ]
    },
    {
      "parameters": {
        "jsCode": "// Process EdgeConnect Branch Connectivity response and handle errors\nconst responseData = $input.item(0).json;\nconst operation = $input.item(0).json.operation || 'unknown';\nconst timestamp = new Date().toISOString();\n\n// Determine success based on HTTP status code\nconst isSuccess = responseData.status_code ? \n  (responseData.status_code >= 200 && responseData.status_code < 300) : \n  (!responseData.error && responseData.success !== false);\n\n// Categorize errors\nlet errorCategory = 'none';\nlet errorMessage = null;\n\nif (!isSuccess) {\n  const statusCode = responseData.status_code || 0;\n  const errorText = responseData.error || responseData.message || 'Unknown error';\n  \n  if (statusCode === 400) {\n    errorCategory = 'validation_error';\n    errorMessage = `Invalid branch configuration: ${errorText}`;\n  } else if (statusCode === 401) {\n    errorCategory = 'authentication_error';\n    errorMessage = `Authentication failed: ${errorText}`;\n  } else if (statusCode === 403) {\n    errorCategory = 'authorization_error';\n    errorMessage = `Authorization failed: ${errorText}`;\n  } else if (statusCode === 404) {\n    errorCategory = 'branch_not_found';\n    errorMessage = `Branch not found: ${errorText}`;\n  } else if (statusCode === 409) {\n    errorCategory = 'configuration_conflict';\n    errorMessage = `Configuration conflict: ${errorText}`;\n  } else if (statusCode === 422) {\n    errorCategory = 'link_unavailable';\n    errorMessage = `WAN link unavailable: ${errorText}`;\n  } else if (statusCode === 429) {\n    errorCategory = 'rate_limit_error';\n    errorMessage = `Rate limit exceeded: ${errorText}`;\n  } else if (statusCode >= 500) {\n    errorCategory = 'orchestrator_error';\n    errorMessage = `Orchestrator error: ${errorText}`;\n  } else {\n    errorCategory = 'unknown_error';\n    errorMessage = `Unexpected error: ${errorText}`;\n  }\n}\n\n// Format success response\nlet result = {\n  operation,\n  success: isSuccess,\n  timestamp,\n  error_category: errorCategory,\n  error_message: errorMessage\n};\n\n// Add operation-specific success data\nif (isSuccess) {\n  switch (operation) {\n    case 'configure_branch':\n      result.branch_id = responseData.branch_id;\n      result.connectivity_type = responseData.connectivity_type;\n      result.wan_links_configured = responseData.wan_links_count || 0;\n      result.policies_applied = responseData.policies_count || 0;\n      result.message = `Branch '${responseData.branch_name || 'Unknown'}' configured successfully with ${result.wan_links_configured} WAN links`;\n      break;\n      \n    case 'update_connectivity':\n      result.branch_id = responseData.branch_id;\n      result.updated_links = responseData.updated_links || [];\n      result.policies_updated = responseData.policies_updated || [];\n      result.message = `Connectivity updated for ${result.updated_links.length} links`;\n      break;\n      \n    case 'failover_test':\n      result.test_id = responseData.test_id;\n      result.test_duration = responseData.actual_duration;\n      result.links_tested = responseData.links_tested || [];\n      result.failover_success = responseData.failover_success || false;\n      result.recovery_time = responseData.recovery_time;\n      result.message = `Failover test ${result.failover_success ? 'passed' : 'failed'} - Recovery time: ${result.recovery_time}`;\n      break;\n      \n    case 'optimize_paths':\n      result.optimization_id = responseData.optimization_id;\n      result.paths_optimized = responseData.paths_optimized || [];\n      result.performance_improvement = responseData.performance_improvement || '0%';\n      result.message = `Path optimization completed - ${result.performance_improvement} improvement achieved`;\n      break;\n      \n    case 'monitor_links':\n      result.monitoring_data = responseData.links || [];\n      result.healthy_links = result.monitoring_data.filter(link => link.status === 'healthy').length;\n      result.total_links = result.monitoring_data.length;\n      result.alerts_generated = responseData.alerts_count || 0;\n      result.message = `Monitoring: ${result.healthy_links}/${result.total_links} links healthy, ${result.alerts_generated} alerts`;\n      break;\n      \n    case 'reset_configuration':\n      result.reset_successful = responseData.reset_successful || false;\n      result.backup_created = responseData.backup_id || null;\n      result.links_preserved = responseData.links_preserved || [];\n      result.message = `Configuration reset ${result.reset_successful ? 'successful' : 'failed'}`;\n      break;\n      \n    default:\n      result.message = 'Branch connectivity operation completed successfully';\n  }\n  \n  // Add raw response data for debugging\n  result.raw_response = responseData;\n}\n\n// Determine notification level\nresult.notification_level = isSuccess ? 'success' : \n  (['authentication_error', 'authorization_error', 'orchestrator_error'].includes(errorCategory) ? 'critical' : 'warning');\n\n// Add rollback requirement for critical failures\nif (!isSuccess && ['configure_branch', 'update_connectivity'].includes(operation)) {\n  result.requires_rollback = ['configuration_conflict', 'orchestrator_error'].includes(errorCategory);\n}\n\n// Add performance metrics for monitoring operations\nif (operation === 'monitor_links' && isSuccess) {\n  result.performance_summary = {\n    average_latency: responseData.avg_latency,\n    total_bandwidth: responseData.total_bandwidth,\n    utilization_percentage: responseData.utilization_pct,\n    packet_loss_rate: responseData.packet_loss_rate\n  };\n}\n\nreturn [{ json: result }];"
      },
      "id": "b0c1d2e3-be4f-d3e4-cf5a-0b1c2d3e4f5a",
      "name": "Process Response",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1120,
        400
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "condition1",
              "leftValue": "={{$json.success}}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "true"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "c1d2e3f4-cf5a-e4f5-da6b-1c2d3e4f5a6b",
      "name": "Check Success",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        1340,
        400
      ]
    },
    {
      "parameters": {
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "slackApi",
        "select": "channel",
        "channelId": {
          "__rl": true,
          "value": "C06TQSQMKQM",
          "mode": "id"
        },
        "text": "✅ **EdgeConnect Branch Connectivity Success**\\n\\n**Operation:** {{$json.operation}}\\n**Branch:** {{$json.branch_id}}\\n**Message:** {{$json.message}}\\n**Timestamp:** {{$json.timestamp}}\\n\\n**Details:**\\n{{$json.wan_links_configured ? '• WAN Links: ' + $json.wan_links_configured : ''}}\\n{{$json.failover_success !== undefined ? '• Failover Test: ' + ($json.failover_success ? 'PASSED' : 'FAILED') : ''}}\\n{{$json.performance_improvement ? '• Performance: ' + $json.performance_improvement + ' improvement' : ''}}\\n{{$json.healthy_links !== undefined ? '• Link Health: ' + $json.healthy_links + '/' + $json.total_links + ' healthy' : ''}}",
        "otherOptions": {
          "mrkdwn": true,
          "unfurl_links": false,
          "unfurl_media": false
        }
      },
      "id": "d2e3f4a5-da6b-f5a6-eb7c-2d3e4f5a6b7c",
      "name": "Success Notification",
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2,
      "position": [
        1560,
        300
      ]
    },
    {
      "parameters": {
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "slackApi",
        "select": "channel",
        "channelId": {
          "__rl": true,
          "value": "C06TQSQMKQM",
          "mode": "id"
        },
        "text": "❌ **EdgeConnect Branch Connectivity Failed**\\n\\n**Operation:** {{$json.operation}}\\n**Branch:** {{$json.branch_id}}\\n**Error Category:** {{$json.error_category}}\\n**Error Message:** {{$json.error_message}}\\n**Timestamp:** {{$json.timestamp}}\\n\\n**Notification Level:** {{$json.notification_level}}\\n{{$json.requires_rollback ? '🔄 **Rollback Required**' : ''}}\\n\\n**Troubleshooting:**\\n• Check EdgeConnect Orchestrator connectivity\\n• Verify branch configuration syntax\\n• Ensure WAN links are operational\\n• Review appliance connectivity status\\n• Validate traffic policy rules",
        "otherOptions": {
          "mrkdwn": true,
          "unfurl_links": false,
          "unfurl_media": false
        }
      },
      "id": "e3f4a5b6-eb7c-a6b7-fc8d-3e4f5a6b7c8d",
      "name": "Error Notification",
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2,
      "position": [
        1560,
        500
      ]
    },
    {
      "parameters": {
        "respondWith": "allIncomingItems",
        "options": {}
      },
      "id": "f4a5b6c7-fc8d-b7c8-ad9e-4f5a6b7c8d9e",
      "name": "Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        1780,
        400
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "condition1",
              "leftValue": "={{$json.operation}}",
              "rightValue": "update_connectivity",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "a5b6c7d8-ad9e-c8d9-be0f-5a6b7c8d9e0f",
      "name": "Route Update",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        680,
        300
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "condition1",
              "leftValue": "={{$json.operation}}",
              "rightValue": "failover_test",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "b6c7d8e9-be0f-d9e0-cf1a-6b7c8d9e0f1a",
      "name": "Route Failover",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        680,
        400
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "condition1",
              "leftValue": "={{$json.operation}}",
              "rightValue": "optimize_paths",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "c7d8e9f0-cf1a-e0f1-da2b-7c8d9e0f1a2b",
      "name": "Route Optimize",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        680,
        500
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "condition1",
              "leftValue": "={{$json.operation}}",
              "rightValue": "monitor_links",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "d8e9f0a1-da2b-f1a2-eb3c-8d9e0f1a2b3c",
      "name": "Route Monitor",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        680,
        600
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "condition1",
              "leftValue": "={{$json.operation}}",
              "rightValue": "reset_configuration",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "e9f0a1b2-eb3c-a2b3-fc4d-9e0f1a2b3c4d",
      "name": "Route Reset",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        680,
        700
      ]
    }
  ],
  "connections": {
    "Branch Connectivity Webhook": {
      "main": [
        [
          {
            "node": "Prepare Branch Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Branch Data": {
      "main": [
        [
          {
            "node": "Route Configure",
            "type": "main",
            "index": 0
          },
          {
            "node": "Route Update",
            "type": "main",
            "index": 0
          },
          {
            "node": "Route Failover",
            "type": "main",
            "index": 0
          },
          {
            "node": "Route Optimize",
            "type": "main",
            "index": 0
          },
          {
            "node": "Route Monitor",
            "type": "main",
            "index": 0
          },
          {
            "node": "Route Reset",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Route Configure": {
      "main": [
        [
          {
            "node": "Configure Branch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Route Update": {
      "main": [
        [
          {
            "node": "Update Connectivity",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Route Failover": {
      "main": [
        [
          {
            "node": "Failover Test",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Route Optimize": {
      "main": [
        [
          {
            "node": "Optimize Paths",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Route Monitor": {
      "main": [
        [
          {
            "node": "Monitor Links",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Route Reset": {
      "main": [
        [
          {
            "node": "Reset Configuration",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Configure Branch": {
      "main": [
        [
          {
            "node": "Process Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Connectivity": {
      "main": [
        [
          {
            "node": "Process Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Failover Test": {
      "main": [
        [
          {
            "node": "Process Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Optimize Paths": {
      "main": [
        [
          {
            "node": "Process Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Monitor Links": {
      "main": [
        [
          {
            "node": "Process Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Reset Configuration": {
      "main": [
        [
          {
            "node": "Process Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Response": {
      "main": [
        [
          {
            "node": "Check Success",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Success": {
      "main": [
        [
          {
            "node": "Success Notification",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Error Notification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Success Notification": {
      "main": [
        [
          {
            "node": "Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Error Notification": {
      "main": [
        [
          {
            "node": "Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "active": false,
  "settings": {
    "executionOrder": "v1",
    "saveManualExecutions": false,
    "saveExecutionProgress": false,
    "saveDataErrorExecution": "all",
    "saveDataSuccessExecution": "all",
    "timezone": "UTC"
  },
  "versionId": "1.0.0",
  "meta": {
    "templateCreatedBy": "Claude Code",
    "description": "Comprehensive EdgeConnect Branch Connectivity Management workflow with support for multiple branch types (small, medium, large, retail, manufacturing). Includes WAN link configuration, failover testing, path optimization, and real-time monitoring.",
    "tags": ["edgeconnect", "sd-wan", "branch", "connectivity", "failover", "optimization", "monitoring"]
  }
}