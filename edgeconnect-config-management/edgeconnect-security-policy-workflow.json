{
  "name": "EdgeConnect Security Policy Management",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "edgeconnect-security-policy",
        "responseMode": "onReceived",
        "options": {}
      },
      "id": "e1d1c5a8-8b4e-4b5a-9c8d-1e2f3a4b5c6d",
      "name": "Security Policy Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        240,
        300
      ],
      "webhookId": "security-policy-webhook"
    },
    {
      "parameters": {
        "jsCode": "// EdgeConnect Security Policy Management Workflow\n// Operations: create_security_policy, update_security_policy, delete_security_policy, deploy_security_policy, audit_security, threat_response\n\nconst operation = $input.item(0).json.operation;\nconst securityData = $input.item(0).json.security_data || {};\nconst orchestratorUrl = $input.item(0).json.orchestrator_url;\nconst policyId = $input.item(0).json.policy_id;\nconst securityProfile = $input.item(0).json.security_profile || 'standard';\n\n// Validate required parameters\nif (!operation) {\n  throw new Error('Operation is required. Valid operations: create_security_policy, update_security_policy, delete_security_policy, deploy_security_policy, audit_security, threat_response');\n}\n\nif (!orchestratorUrl) {\n  throw new Error('Orchestrator URL is required');\n}\n\nif (['update_security_policy', 'delete_security_policy', 'deploy_security_policy'].includes(operation) && !policyId) {\n  throw new Error('Policy ID is required for this operation');\n}\n\n// Security policy templates\nconst securityTemplates = {\n  'basic': {\n    name: 'Basic Security Policy',\n    security_level: 'basic',\n    firewall: {\n      enabled: true,\n      default_action: 'allow',\n      stateful_inspection: true,\n      application_control: false\n    },\n    intrusion_prevention: {\n      enabled: false,\n      sensitivity: 'low',\n      block_threats: false,\n      alert_only: true\n    },\n    antivirus: {\n      enabled: false,\n      real_time_scanning: false,\n      quarantine: false\n    },\n    web_filtering: {\n      enabled: false,\n      categories: [],\n      block_malware: false\n    },\n    ssl_inspection: {\n      enabled: false,\n      decrypt_traffic: false,\n      certificate_validation: false\n    }\n  },\n  'standard': {\n    name: 'Standard Security Policy',\n    security_level: 'standard',\n    firewall: {\n      enabled: true,\n      default_action: 'deny',\n      stateful_inspection: true,\n      application_control: true,\n      geo_blocking: false\n    },\n    intrusion_prevention: {\n      enabled: true,\n      sensitivity: 'medium',\n      block_threats: true,\n      alert_enabled: true,\n      signature_updates: 'daily'\n    },\n    antivirus: {\n      enabled: true,\n      real_time_scanning: true,\n      quarantine: true,\n      cloud_lookup: true\n    },\n    web_filtering: {\n      enabled: true,\n      categories: ['malware', 'phishing', 'gambling', 'adult'],\n      block_malware: true,\n      safe_search: true\n    },\n    ssl_inspection: {\n      enabled: false,\n      decrypt_traffic: false,\n      certificate_validation: true\n    }\n  },\n  'high_security': {\n    name: 'High Security Policy',\n    security_level: 'high',\n    firewall: {\n      enabled: true,\n      default_action: 'deny',\n      stateful_inspection: true,\n      application_control: true,\n      geo_blocking: true,\n      advanced_threats: true\n    },\n    intrusion_prevention: {\n      enabled: true,\n      sensitivity: 'high',\n      block_threats: true,\n      alert_enabled: true,\n      signature_updates: 'real_time',\n      behavioral_analysis: true\n    },\n    antivirus: {\n      enabled: true,\n      real_time_scanning: true,\n      quarantine: true,\n      cloud_lookup: true,\n      advanced_heuristics: true\n    },\n    web_filtering: {\n      enabled: true,\n      categories: ['malware', 'phishing', 'gambling', 'adult', 'social_media', 'entertainment'],\n      block_malware: true,\n      safe_search: true,\n      ssl_scanning: true\n    },\n    ssl_inspection: {\n      enabled: true,\n      decrypt_traffic: true,\n      certificate_validation: true,\n      deep_packet_inspection: true\n    },\n    data_loss_prevention: {\n      enabled: true,\n      scan_uploads: true,\n      scan_downloads: true,\n      block_sensitive_data: true\n    }\n  },\n  'compliance_focused': {\n    name: 'Compliance-Focused Security Policy',\n    security_level: 'compliance',\n    firewall: {\n      enabled: true,\n      default_action: 'deny',\n      stateful_inspection: true,\n      application_control: true,\n      geo_blocking: true,\n      compliance_logging: true\n    },\n    intrusion_prevention: {\n      enabled: true,\n      sensitivity: 'high',\n      block_threats: true,\n      alert_enabled: true,\n      signature_updates: 'real_time',\n      compliance_reporting: true\n    },\n    antivirus: {\n      enabled: true,\n      real_time_scanning: true,\n      quarantine: true,\n      cloud_lookup: true,\n      compliance_logging: true\n    },\n    web_filtering: {\n      enabled: true,\n      categories: ['malware', 'phishing', 'gambling', 'adult', 'social_media'],\n      block_malware: true,\n      safe_search: true,\n      compliance_reporting: true\n    },\n    ssl_inspection: {\n      enabled: true,\n      decrypt_traffic: true,\n      certificate_validation: true,\n      compliance_logging: true\n    },\n    data_loss_prevention: {\n      enabled: true,\n      scan_uploads: true,\n      scan_downloads: true,\n      block_sensitive_data: true,\n      compliance_templates: ['pci_dss', 'hipaa', 'gdpr']\n    },\n    audit_logging: {\n      enabled: true,\n      log_all_traffic: true,\n      retention_period: '7_years',\n      tamper_protection: true\n    }\n  },\n  'zero_trust': {\n    name: 'Zero Trust Security Policy',\n    security_level: 'zero_trust',\n    firewall: {\n      enabled: true,\n      default_action: 'deny',\n      stateful_inspection: true,\n      application_control: true,\n      geo_blocking: true,\n      micro_segmentation: true\n    },\n    intrusion_prevention: {\n      enabled: true,\n      sensitivity: 'maximum',\n      block_threats: true,\n      alert_enabled: true,\n      signature_updates: 'real_time',\n      behavioral_analysis: true,\n      machine_learning: true\n    },\n    antivirus: {\n      enabled: true,\n      real_time_scanning: true,\n      quarantine: true,\n      cloud_lookup: true,\n      advanced_heuristics: true,\n      sandboxing: true\n    },\n    web_filtering: {\n      enabled: true,\n      categories: ['malware', 'phishing', 'gambling', 'adult', 'social_media', 'entertainment', 'shopping'],\n      block_malware: true,\n      safe_search: true,\n      ssl_scanning: true,\n      reputation_filtering: true\n    },\n    ssl_inspection: {\n      enabled: true,\n      decrypt_traffic: true,\n      certificate_validation: true,\n      deep_packet_inspection: true,\n      certificate_pinning: true\n    },\n    data_loss_prevention: {\n      enabled: true,\n      scan_uploads: true,\n      scan_downloads: true,\n      block_sensitive_data: true,\n      content_inspection: true,\n      machine_learning: true\n    },\n    identity_access: {\n      enabled: true,\n      multi_factor_auth: true,\n      continuous_verification: true,\n      behavioral_analytics: true,\n      privileged_access_management: true\n    },\n    network_segmentation: {\n      enabled: true,\n      micro_segmentation: true,\n      application_segmentation: true,\n      user_segmentation: true\n    }\n  }\n};\n\n// Generate security configuration based on profile\nlet securityConfig = securityData;\nif (operation === 'create_security_policy' && securityProfile && securityTemplates[securityProfile]) {\n  securityConfig = { ...securityTemplates[securityProfile], ...securityData };\n}\n\n// Prepare output data\nconst outputData = {\n  operation,\n  policy_id: policyId,\n  security_config: securityConfig,\n  orchestrator_url: orchestratorUrl,\n  security_profile: securityProfile,\n  timestamp: new Date().toISOString(),\n  validation_rules: {\n    policy_id_required: ['update_security_policy', 'delete_security_policy', 'deploy_security_policy'].includes(operation),\n    config_required: ['create_security_policy', 'update_security_policy'].includes(operation),\n    profile_required: ['create_security_policy'].includes(operation)\n  }\n};\n\n// Add operation-specific data\nif (operation === 'create_security_policy') {\n  outputData.policy_config = {\n    name: securityConfig.name || 'Custom Security Policy',\n    description: securityConfig.description || 'Auto-generated security policy',\n    security_level: securityConfig.security_level || 'standard',\n    auto_deploy: securityData.auto_deploy !== false,\n    policy_version: '1.0'\n  };\n}\n\nif (operation === 'deploy_security_policy') {\n  outputData.deployment_config = {\n    target_appliances: securityData.target_appliances || [],\n    deployment_mode: securityData.deployment_mode || 'immediate',\n    rollback_enabled: securityData.rollback_enabled !== false,\n    validation_enabled: securityData.validation_enabled !== false,\n    maintenance_window: securityData.maintenance_window || false\n  };\n}\n\nif (operation === 'audit_security') {\n  outputData.audit_config = {\n    audit_scope: securityData.audit_scope || 'all',\n    compliance_frameworks: securityData.compliance_frameworks || ['iso27001', 'nist'],\n    include_vulnerabilities: securityData.include_vulnerabilities !== false,\n    generate_report: securityData.generate_report !== false,\n    remediation_plan: securityData.remediation_plan !== false\n  };\n}\n\nif (operation === 'threat_response') {\n  outputData.threat_config = {\n    threat_id: securityData.threat_id,\n    threat_type: securityData.threat_type || 'unknown',\n    response_action: securityData.response_action || 'block',\n    isolate_source: securityData.isolate_source || false,\n    alert_security_team: securityData.alert_security_team !== false,\n    forensic_analysis: securityData.forensic_analysis || false\n  };\n}\n\nreturn [{ json: outputData }];"
      },
      "id": "f2e3d6c9-9c5f-5c6a-ad9e-2f3a4b5c6d7e",
      "name": "Prepare Security Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        460,
        300
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "condition1",
              "leftValue": "={{$json.operation}}",
              "rightValue": "create_security_policy",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "a3b4c5d6-ad5f-6d7a-be8f-3a4b5c6d7e8f",
      "name": "Route Create",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        680,
        200
      ]
    },
    {
      "parameters": {
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "edgeConnectApi",
        "url": "={{$json.orchestrator_url}}/api/v1/security/policies",
        "method": "POST",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "X-API-Version",
              "value": "1.0"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "name",
              "value": "={{$json.policy_config.name}}"
            },
            {
              "name": "description",
              "value": "={{$json.policy_config.description}}"
            },
            {
              "name": "security_level",
              "value": "={{$json.policy_config.security_level}}"
            },
            {
              "name": "firewall",
              "value": "={{JSON.stringify($json.security_config.firewall)}}"
            },
            {
              "name": "intrusion_prevention",
              "value": "={{JSON.stringify($json.security_config.intrusion_prevention)}}"
            },
            {
              "name": "antivirus",
              "value": "={{JSON.stringify($json.security_config.antivirus)}}"
            },
            {
              "name": "web_filtering",
              "value": "={{JSON.stringify($json.security_config.web_filtering)}}"
            },
            {
              "name": "ssl_inspection",
              "value": "={{JSON.stringify($json.security_config.ssl_inspection)}}"
            },
            {
              "name": "data_loss_prevention",
              "value": "={{JSON.stringify($json.security_config.data_loss_prevention || {})}}"
            },
            {
              "name": "auto_deploy",
              "value": "={{$json.policy_config.auto_deploy}}"
            }
          ]
        },
        "options": {
          "timeout": 60000,
          "retry": {
            "maxTries": 3,
            "waitBetweenTries": 5000
          }
        }
      },
      "id": "b4c5d6e7-be8f-7e8f-cf9a-4b5c6d7e8f9a",
      "name": "Create Security Policy",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        900,
        200
      ]
    },
    {
      "parameters": {
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "edgeConnectApi",
        "url": "={{$json.orchestrator_url}}/api/v1/security/policies/={{$json.policy_id}}",
        "method": "PUT",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "X-API-Version",
              "value": "1.0"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "firewall",
              "value": "={{JSON.stringify($json.security_config.firewall)}}"
            },
            {
              "name": "intrusion_prevention",
              "value": "={{JSON.stringify($json.security_config.intrusion_prevention)}}"
            },
            {
              "name": "antivirus",
              "value": "={{JSON.stringify($json.security_config.antivirus)}}"
            },
            {
              "name": "web_filtering",
              "value": "={{JSON.stringify($json.security_config.web_filtering)}}"
            },
            {
              "name": "ssl_inspection",
              "value": "={{JSON.stringify($json.security_config.ssl_inspection)}}"
            },
            {
              "name": "data_loss_prevention",
              "value": "={{JSON.stringify($json.security_config.data_loss_prevention || {})}}"
            },
            {
              "name": "updated_by",
              "value": "n8n-automation"
            }
          ]
        },
        "options": {
          "timeout": 60000,
          "retry": {
            "maxTries": 3,
            "waitBetweenTries": 5000
          }
        }
      },
      "id": "c5d6e7f8-cf9a-8f9a-da0b-5c6d7e8f9a0b",
      "name": "Update Security Policy",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        900,
        300
      ]
    },
    {
      "parameters": {
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "edgeConnectApi",
        "url": "={{$json.orchestrator_url}}/api/v1/security/policies/={{$json.policy_id}}",
        "method": "DELETE",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "X-API-Version",
              "value": "1.0"
            }
          ]
        },
        "options": {
          "timeout": 60000,
          "retry": {
            "maxTries": 3,
            "waitBetweenTries": 5000
          }
        }
      },
      "id": "d6e7f8a9-da0b-9a0b-eb1c-6d7e8f9a0b1c",
      "name": "Delete Security Policy",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        900,
        400
      ]
    },
    {
      "parameters": {
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "edgeConnectApi",
        "url": "={{$json.orchestrator_url}}/api/v1/security/policies/={{$json.policy_id}}/deploy",
        "method": "POST",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "X-API-Version",
              "value": "1.0"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "target_appliances",
              "value": "={{JSON.stringify($json.deployment_config.target_appliances)}}"
            },
            {
              "name": "deployment_mode",
              "value": "={{$json.deployment_config.deployment_mode}}"
            },
            {
              "name": "rollback_enabled",
              "value": "={{$json.deployment_config.rollback_enabled}}"
            },
            {
              "name": "validation_enabled",
              "value": "={{$json.deployment_config.validation_enabled}}"
            },
            {
              "name": "maintenance_window",
              "value": "={{$json.deployment_config.maintenance_window}}"
            }
          ]
        },
        "options": {
          "timeout": 120000,
          "retry": {
            "maxTries": 2,
            "waitBetweenTries": 10000
          }
        }
      },
      "id": "e7f8a9b0-eb1c-a0b1-fc2d-7e8f9a0b1c2d",
      "name": "Deploy Security Policy",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        900,
        500
      ]
    },
    {
      "parameters": {
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "edgeConnectApi",
        "url": "={{$json.orchestrator_url}}/api/v1/security/audit",
        "method": "POST",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "X-API-Version",
              "value": "1.0"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "audit_scope",
              "value": "={{$json.audit_config.audit_scope}}"
            },
            {
              "name": "compliance_frameworks",
              "value": "={{JSON.stringify($json.audit_config.compliance_frameworks)}}"
            },
            {
              "name": "include_vulnerabilities",
              "value": "={{$json.audit_config.include_vulnerabilities}}"
            },
            {
              "name": "generate_report",
              "value": "={{$json.audit_config.generate_report}}"
            },
            {
              "name": "remediation_plan",
              "value": "={{$json.audit_config.remediation_plan}}"
            }
          ]
        },
        "options": {
          "timeout": 180000,
          "retry": {
            "maxTries": 2,
            "waitBetweenTries": 10000
          }
        }
      },
      "id": "f8a9b0c1-fc2d-b1c2-ad3e-8f9a0b1c2d3e",
      "name": "Audit Security",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        900,
        600
      ]
    },
    {
      "parameters": {
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "edgeConnectApi",
        "url": "={{$json.orchestrator_url}}/api/v1/security/threats/={{$json.threat_config.threat_id}}/respond",
        "method": "POST",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "X-API-Version",
              "value": "1.0"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "threat_type",
              "value": "={{$json.threat_config.threat_type}}"
            },
            {
              "name": "response_action",
              "value": "={{$json.threat_config.response_action}}"
            },
            {
              "name": "isolate_source",
              "value": "={{$json.threat_config.isolate_source}}"
            },
            {
              "name": "alert_security_team",
              "value": "={{$json.threat_config.alert_security_team}}"
            },
            {
              "name": "forensic_analysis",
              "value": "={{$json.threat_config.forensic_analysis}}"
            }
          ]
        },
        "options": {
          "timeout": 60000,
          "retry": {
            "maxTries": 3,
            "waitBetweenTries": 2000
          }
        }
      },
      "id": "a9b0c1d2-ad3e-c2d3-be4f-9a0b1c2d3e4f",
      "name": "Threat Response",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        900,
        700
      ]
    },
    {
      "parameters": {
        "jsCode": "// Process EdgeConnect Security Policy response and handle errors\nconst responseData = $input.item(0).json;\nconst operation = $input.item(0).json.operation || 'unknown';\nconst timestamp = new Date().toISOString();\n\n// Determine success based on HTTP status code\nconst isSuccess = responseData.status_code ? \n  (responseData.status_code >= 200 && responseData.status_code < 300) : \n  (!responseData.error && responseData.success !== false);\n\n// Categorize errors\nlet errorCategory = 'none';\nlet errorMessage = null;\n\nif (!isSuccess) {\n  const statusCode = responseData.status_code || 0;\n  const errorText = responseData.error || responseData.message || 'Unknown error';\n  \n  if (statusCode === 400) {\n    errorCategory = 'validation_error';\n    errorMessage = `Invalid security policy configuration: ${errorText}`;\n  } else if (statusCode === 401) {\n    errorCategory = 'authentication_error';\n    errorMessage = `Authentication failed: ${errorText}`;\n  } else if (statusCode === 403) {\n    errorCategory = 'authorization_error';\n    errorMessage = `Authorization failed: ${errorText}`;\n  } else if (statusCode === 404) {\n    errorCategory = 'policy_not_found';\n    errorMessage = `Security policy not found: ${errorText}`;\n  } else if (statusCode === 409) {\n    errorCategory = 'policy_conflict';\n    errorMessage = `Policy conflict: ${errorText}`;\n  } else if (statusCode === 422) {\n    errorCategory = 'security_validation_failed';\n    errorMessage = `Security validation failed: ${errorText}`;\n  } else if (statusCode === 429) {\n    errorCategory = 'rate_limit_error';\n    errorMessage = `Rate limit exceeded: ${errorText}`;\n  } else if (statusCode >= 500) {\n    errorCategory = 'orchestrator_error';\n    errorMessage = `Orchestrator error: ${errorText}`;\n  } else {\n    errorCategory = 'unknown_error';\n    errorMessage = `Unexpected error: ${errorText}`;\n  }\n}\n\n// Format success response\nlet result = {\n  operation,\n  success: isSuccess,\n  timestamp,\n  error_category: errorCategory,\n  error_message: errorMessage\n};\n\n// Add operation-specific success data\nif (isSuccess) {\n  switch (operation) {\n    case 'create_security_policy':\n      result.policy_id = responseData.policy_id;\n      result.policy_name = responseData.name;\n      result.security_level = responseData.security_level;\n      result.components_enabled = responseData.components_enabled || [];\n      result.message = `Security policy '${responseData.name}' created successfully (Level: ${result.security_level})`;\n      break;\n      \n    case 'update_security_policy':\n      result.policy_id = responseData.policy_id;\n      result.policy_name = responseData.name;\n      result.changes_applied = responseData.changes_applied || [];\n      result.message = `Security policy '${responseData.name}' updated successfully (${result.changes_applied.length} changes)`;\n      break;\n      \n    case 'delete_security_policy':\n      result.policy_id = responseData.policy_id;\n      result.backup_created = responseData.backup_created || false;\n      result.message = `Security policy deleted successfully${result.backup_created ? ' (backup created)' : ''}`;\n      break;\n      \n    case 'deploy_security_policy':\n      result.deployment_id = responseData.deployment_id;\n      result.target_appliances = responseData.target_appliances || [];\n      result.deployment_status = responseData.deployment_status;\n      result.rollback_available = responseData.rollback_available || false;\n      result.message = `Security policy deployed to ${result.target_appliances.length} appliances (Status: ${result.deployment_status})`;\n      break;\n      \n    case 'audit_security':\n      result.audit_id = responseData.audit_id;\n      result.compliance_score = responseData.compliance_score || 0;\n      result.vulnerabilities_found = responseData.vulnerabilities_count || 0;\n      result.recommendations = responseData.recommendations || [];\n      result.compliance_status = responseData.compliance_status;\n      result.message = `Security audit completed - Score: ${result.compliance_score}/100, ${result.vulnerabilities_found} vulnerabilities found`;\n      break;\n      \n    case 'threat_response':\n      result.response_id = responseData.response_id;\n      result.threat_id = responseData.threat_id;\n      result.action_taken = responseData.action_taken;\n      result.threat_contained = responseData.threat_contained || false;\n      result.forensic_data = responseData.forensic_data || null;\n      result.message = `Threat response executed - Action: ${result.action_taken}, Contained: ${result.threat_contained}`;\n      break;\n      \n    default:\n      result.message = 'Security policy operation completed successfully';\n  }\n  \n  // Add raw response data for debugging\n  result.raw_response = responseData;\n}\n\n// Determine notification level\nresult.notification_level = isSuccess ? 'success' : \n  (['authentication_error', 'authorization_error', 'orchestrator_error', 'security_validation_failed'].includes(errorCategory) ? 'critical' : 'warning');\n\n// Add rollback requirement for critical failures\nif (!isSuccess && ['create_security_policy', 'update_security_policy', 'deploy_security_policy'].includes(operation)) {\n  result.requires_rollback = ['policy_conflict', 'orchestrator_error', 'security_validation_failed'].includes(errorCategory);\n}\n\n// Add security metrics for audit operations\nif (operation === 'audit_security' && isSuccess) {\n  result.security_metrics = {\n    firewall_compliance: responseData.firewall_compliance || 0,\n    ips_compliance: responseData.ips_compliance || 0,\n    antivirus_compliance: responseData.antivirus_compliance || 0,\n    web_filtering_compliance: responseData.web_filtering_compliance || 0,\n    ssl_inspection_compliance: responseData.ssl_inspection_compliance || 0,\n    overall_security_posture: responseData.overall_security_posture || 'unknown'\n  };\n}\n\nreturn [{ json: result }];"
      },
      "id": "b0c1d2e3-be4f-d3e4-cf5a-0b1c2d3e4f5a",
      "name": "Process Response",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1120,
        400
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "condition1",
              "leftValue": "={{$json.success}}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "true"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "c1d2e3f4-cf5a-e4f5-da6b-1c2d3e4f5a6b",
      "name": "Check Success",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        1340,
        400
      ]
    },
    {
      "parameters": {
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "slackApi",
        "select": "channel",
        "channelId": {
          "__rl": true,
          "value": "C06TQSQMKQM",
          "mode": "id"
        },
        "text": "🔒 **EdgeConnect Security Policy Success**\\n\\n**Operation:** {{$json.operation}}\\n**Policy:** {{$json.policy_name || 'N/A'}}\\n**Message:** {{$json.message}}\\n**Timestamp:** {{$json.timestamp}}\\n\\n**Security Details:**\\n{{$json.security_level ? '• Security Level: ' + $json.security_level : ''}}\\n{{$json.compliance_score ? '• Compliance Score: ' + $json.compliance_score + '/100' : ''}}\\n{{$json.vulnerabilities_found ? '• Vulnerabilities: ' + $json.vulnerabilities_found : ''}}\\n{{$json.threat_contained !== undefined ? '• Threat Contained: ' + ($json.threat_contained ? 'YES' : 'NO') : ''}}\\n{{$json.target_appliances ? '• Target Appliances: ' + $json.target_appliances.length : ''}}",
        "otherOptions": {
          "mrkdwn": true,
          "unfurl_links": false,
          "unfurl_media": false
        }
      },
      "id": "d2e3f4a5-da6b-f5a6-eb7c-2d3e4f5a6b7c",
      "name": "Success Notification",
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2,
      "position": [
        1560,
        300
      ]
    },
    {
      "parameters": {
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "slackApi",
        "select": "channel",
        "channelId": {
          "__rl": true,
          "value": "C06TQSQMKQM",
          "mode": "id"
        },
        "text": "🚨 **EdgeConnect Security Policy Failed**\\n\\n**Operation:** {{$json.operation}}\\n**Policy:** {{$json.policy_id || 'N/A'}}\\n**Error Category:** {{$json.error_category}}\\n**Error Message:** {{$json.error_message}}\\n**Timestamp:** {{$json.timestamp}}\\n\\n**Notification Level:** {{$json.notification_level}}\\n{{$json.requires_rollback ? '🔄 **Rollback Required**' : ''}}\\n\\n**Security Troubleshooting:**\\n• Check EdgeConnect Orchestrator security module\\n• Verify security policy syntax and configuration\\n• Ensure proper security permissions and licensing\\n• Review threat detection and response capabilities\\n• Validate compliance framework requirements",
        "otherOptions": {
          "mrkdwn": true,
          "unfurl_links": false,
          "unfurl_media": false
        }
      },
      "id": "e3f4a5b6-eb7c-a6b7-fc8d-3e4f5a6b7c8d",
      "name": "Error Notification",
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2,
      "position": [
        1560,
        500
      ]
    },
    {
      "parameters": {
        "respondWith": "allIncomingItems",
        "options": {}
      },
      "id": "f4a5b6c7-fc8d-b7c8-ad9e-4f5a6b7c8d9e",
      "name": "Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        1780,
        400
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "condition1",
              "leftValue": "={{$json.operation}}",
              "rightValue": "update_security_policy",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "a5b6c7d8-ad9e-c8d9-be0f-5a6b7c8d9e0f",
      "name": "Route Update",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        680,
        300
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "condition1",
              "leftValue": "={{$json.operation}}",
              "rightValue": "delete_security_policy",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "b6c7d8e9-be0f-d9e0-cf1a-6b7c8d9e0f1a",
      "name": "Route Delete",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        680,
        400
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "condition1",
              "leftValue": "={{$json.operation}}",
              "rightValue": "deploy_security_policy",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "c7d8e9f0-cf1a-e0f1-da2b-7c8d9e0f1a2b",
      "name": "Route Deploy",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        680,
        500
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "condition1",
              "leftValue": "={{$json.operation}}",
              "rightValue": "audit_security",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "d8e9f0a1-da2b-f1a2-eb3c-8d9e0f1a2b3c",
      "name": "Route Audit",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        680,
        600
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "condition1",
              "leftValue": "={{$json.operation}}",
              "rightValue": "threat_response",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "e9f0a1b2-eb3c-a2b3-fc4d-9e0f1a2b3c4d",
      "name": "Route Threat Response",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        680,
        700
      ]
    }
  ],
  "connections": {
    "Security Policy Webhook": {
      "main": [
        [
          {
            "node": "Prepare Security Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Security Data": {
      "main": [
        [
          {
            "node": "Route Create",
            "type": "main",
            "index": 0
          },
          {
            "node": "Route Update",
            "type": "main",
            "index": 0
          },
          {
            "node": "Route Delete",
            "type": "main",
            "index": 0
          },
          {
            "node": "Route Deploy",
            "type": "main",
            "index": 0
          },
          {
            "node": "Route Audit",
            "type": "main",
            "index": 0
          },
          {
            "node": "Route Threat Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Route Create": {
      "main": [
        [
          {
            "node": "Create Security Policy",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Route Update": {
      "main": [
        [
          {
            "node": "Update Security Policy",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Route Delete": {
      "main": [
        [
          {
            "node": "Delete Security Policy",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Route Deploy": {
      "main": [
        [
          {
            "node": "Deploy Security Policy",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Route Audit": {
      "main": [
        [
          {
            "node": "Audit Security",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Route Threat Response": {
      "main": [
        [
          {
            "node": "Threat Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Security Policy": {
      "main": [
        [
          {
            "node": "Process Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Security Policy": {
      "main": [
        [
          {
            "node": "Process Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Delete Security Policy": {
      "main": [
        [
          {
            "node": "Process Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Deploy Security Policy": {
      "main": [
        [
          {
            "node": "Process Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Audit Security": {
      "main": [
        [
          {
            "node": "Process Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Threat Response": {
      "main": [
        [
          {
            "node": "Process Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Response": {
      "main": [
        [
          {
            "node": "Check Success",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Success": {
      "main": [
        [
          {
            "node": "Success Notification",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Error Notification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Success Notification": {
      "main": [
        [
          {
            "node": "Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Error Notification": {
      "main": [
        [
          {
            "node": "Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "versionId": "1.0.0",
  "meta": {
    "templateCreatedBy": "Claude Code",
    "description": "Comprehensive EdgeConnect Security Policy Management workflow with support for multiple security profiles (basic, standard, high security, compliance-focused, zero trust). Includes firewall, IPS, antivirus, web filtering, SSL inspection, DLP, threat response, and security auditing capabilities.",
    "tags": ["edgeconnect", "sd-wan", "security", "firewall", "ips", "antivirus", "web-filtering", "ssl-inspection", "dlp", "threat-response", "compliance", "zero-trust"]
  }
}