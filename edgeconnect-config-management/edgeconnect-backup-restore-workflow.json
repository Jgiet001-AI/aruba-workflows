{
  "name": "EdgeConnect Backup & Restore",
  "nodes": [
    {
      "parameters": {
        "path": "/edgeconnect-backup",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "a1b2c3d4-e5f6-7a8b-9c0d-1e2f3a4b5c6d",
      "name": "Webhook: Backup/Restore",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        240,
        300
      ],
      "webhookId": "edgeconnect-backup-webhook"
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "hours",
              "hoursInterval": 24
            }
          ]
        },
        "rule2": {
          "interval": [
            {
              "field": "cronExpression",
              "cronExpression": "0 2 * * *"
            }
          ]
        }
      },
      "id": "b2c3d4e5-f6a7-8b9c-0d1e-2f3a4b5c6d7e",
      "name": "Schedule: Daily 2 AM",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        240,
        180
      ]
    },
    {
      "parameters": {
        "jsCode": "// EdgeConnect Backup & Restore Workflow Input Validation\n// Handles both webhook and scheduled triggers\n\nconst input = $input.all()[0].json;\nconst triggerType = $node.context().trigger;\n\n// Default configuration for scheduled backups\nconst defaultConfig = {\n  operation: 'backup_all',\n  orchestrator_host: $vars.EDGECONNECT_ORCHESTRATOR_HOST || 'orchestrator.example.com',\n  auth_token: $vars.EDGECONNECT_AUTH_TOKEN || 'your-auth-token',\n  backup_location: '/Users/jeangiet/Downloads/edgeconnect-backups/',\n  retention_days: 30,\n  compress: true,\n  verify_backup: true\n};\n\n// Merge input with defaults (input takes priority)\nconst config = Object.assign({}, defaultConfig, input);\n\n// Validate required parameters\nif (!config.orchestrator_host) {\n  $node.error('Missing required parameter: orchestrator_host');\n}\n\nif (!config.auth_token) {\n  $node.error('Missing required parameter: auth_token');\n}\n\n// Supported operations\nconst validOperations = [\n  'backup_all',\n  'backup_policies',\n  'backup_branch_configs',\n  'backup_hub_configs',\n  'backup_route_policies',\n  'restore_configuration',\n  'list_backups',\n  'verify_backup',\n  'cleanup_old_backups'\n];\n\nif (!validOperations.includes(config.operation)) {\n  $node.error(`Invalid operation: ${config.operation}. Valid operations: ${validOperations.join(', ')}`);\n}\n\n// Set defaults\nconst nodeType = config.node_type || 'group';\nconst nodeId = config.node_id || config.group_name || 'Global';\nconst baseUrl = `https://${config.orchestrator_host}/gms/rest`;\nconst timestamp = new Date().toISOString().replace(/[:.]/g, '-').slice(0, -5);\n\n// Prepare output for processing\nconst output = {\n  operation: config.operation,\n  baseUrl: baseUrl,\n  authToken: config.auth_token,\n  nodeType: nodeType,\n  nodeId: nodeId,\n  backupLocation: config.backup_location,\n  retentionDays: config.retention_days,\n  compress: config.compress,\n  verifyBackup: config.verify_backup,\n  timestamp: timestamp,\n  restoreData: config.restore_data || null,\n  originalInput: config\n};\n\nreturn { json: output };"
      },
      "id": "c3d4e5f6-a7b8-9c0d-1e2f-3a4b5c6d7e8f",
      "name": "Validate Backup Input",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        460,
        240
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "1",
              "leftValue": "={{ $json.operation }}",
              "rightValue": "backup_all",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            },
            {
              "id": "2",
              "leftValue": "={{ $json.operation }}",
              "rightValue": "backup_policies",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            },
            {
              "id": "3",
              "leftValue": "={{ $json.operation }}",
              "rightValue": "backup_branch_configs",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            },
            {
              "id": "4",
              "leftValue": "={{ $json.operation }}",
              "rightValue": "backup_hub_configs",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            },
            {
              "id": "5",
              "leftValue": "={{ $json.operation }}",
              "rightValue": "backup_route_policies",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combineOperation": "any"
        }
      },
      "id": "d4e5f6a7-b8c9-0d1e-2f3a-4b5c6d7e8f9a",
      "name": "Route: Backup Operations",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        680,
        180
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "1",\n              "leftValue": "={{ $json.operation }}",\n              "rightValue": "restore_configuration",\n              "operator": {\n                "type": "string",\n                "operation": "equals"\n              }\n            }\n          ],\n          "combineOperation": "any"\n        }\n      },\n      "id": "e5f6a7b8-c9d0-1e2f-3a4b-5c6d7e8f9a0b",\n      "name": "Route: Restore Operations",\n      "type": "n8n-nodes-base.if",\n      "typeVersion": 2,\n      "position": [\n        680,\n        300\n      ]\n    },\n    {\n      "parameters": {\n        "conditions": {\n          "options": {\n            "caseSensitive": true,\n            "leftValue": "",\n            "typeValidation": "strict"\n          },\n          "conditions": [\n            {\n              "id": "1",\n              "leftValue": "={{ $json.operation }}",\n              "rightValue": "list_backups",\n              "operator": {\n                "type": "string",\n                "operation": "equals"\n              }\n            },\n            {\n              "id": "2",\n              "leftValue": "={{ $json.operation }}",\n              "rightValue": "verify_backup",\n              "operator": {\n                "type": "string",\n                "operation": "equals"\n              }\n            },\n            {\n              "id": "3",\n              "leftValue": "={{ $json.operation }}",\n              "rightValue": "cleanup_old_backups",\n              "operator": {\n                "type": "string",\n                "operation": "equals"\n              }\n            }\n          ],\n          "combineOperation": "any"\n        }\n      },\n      "id": "f6a7b8c9-d0e1-2f3a-4b5c-6d7e8f9a0b1c",\n      "name": "Route: Management Operations",\n      "type": "n8n-nodes-base.if",\n      "typeVersion": 2,\n      "position": [\n        680,\n        420\n      ]\n    },\n    {\n      "parameters": {\n        "jsCode": "// Create Backup API Requests\\nconst data = $input.all()[0].json;\\nconst operation = data.operation;\\n\\nconst requests = [];\\nconst backupTargets = [];\\n\\n// Define backup endpoints based on operation\\nswitch (operation) {\\n  case 'backup_all':\\n    backupTargets.push(\\n      {\\n        name: 'network_segment_policies',\\n        url: `/sdwan-config/v1/node_list/${data.nodeType}/${data.nodeId}/config/sdwan-global/network-segment-policy/`,\\n        description: 'Network segment policies'\\n      },\\n      {\\n        name: 'tunnel_policies',\\n        url: `/sdwan-config/v1/node_list/${data.nodeType}/${data.nodeId}/config/tunnel-policy/`,\\n        description: 'Tunnel policies'\\n      },\\n      {\\n        name: 'route_policies',\\n        url: `/sdwan-config/v1/node_list/${data.nodeType}/${data.nodeId}/config/route-policy/`,\\n        description: 'Route policies'\\n      },\\n      {\\n        name: 'branch_configs',\\n        url: `/sdwan-config/v1/node_list/${data.nodeType}/${data.nodeId}/config/branch-config/`,\\n        description: 'Branch configurations'\\n      },\\n      {\\n        name: 'hub_configs',\\n        url: `/sdwan-config/v1/node_list/${data.nodeType}/${data.nodeId}/config/hub-config/`,\\n        description: 'Hub configurations'\\n      },\\n      {\\n        name: 'admin_status',\\n        url: `/sdwan-config/v1/node_list/${data.nodeType}/${data.nodeId}/config/sdwan-global/admin-status/`,\\n        description: 'Admin status configuration'\\n      },\\n      {\\n        name: 'topology',\\n        url: `/sdwan-config/v1/node_list/${data.nodeType}/${data.nodeId}/config/sdwan-global/topology/`,\\n        description: 'Topology configuration'\\n      }\\n    );\\n    break;\\n    \\n  case 'backup_policies':\\n    backupTargets.push(\\n      {\\n        name: 'network_segment_policies',\\n        url: `/sdwan-config/v1/node_list/${data.nodeType}/${data.nodeId}/config/sdwan-global/network-segment-policy/`,\\n        description: 'Network segment policies'\\n      },\\n      {\\n        name: 'tunnel_policies',\\n        url: `/sdwan-config/v1/node_list/${data.nodeType}/${data.nodeId}/config/tunnel-policy/`,\\n        description: 'Tunnel policies'\\n      },\\n      {\\n        name: 'route_policies',\\n        url: `/sdwan-config/v1/node_list/${data.nodeType}/${data.nodeId}/config/route-policy/`,\\n        description: 'Route policies'\\n      }\\n    );\\n    break;\\n    \\n  case 'backup_branch_configs':\\n    backupTargets.push(\\n      {\\n        name: 'branch_configs',\\n        url: `/sdwan-config/v1/node_list/${data.nodeType}/${data.nodeId}/config/branch-config/`,\\n        description: 'Branch configurations'\\n      }\\n    );\\n    break;\\n    \\n  case 'backup_hub_configs':\\n    backupTargets.push(\\n      {\\n        name: 'hub_configs',\\n        url: `/sdwan-config/v1/node_list/${data.nodeType}/${data.nodeId}/config/hub-config/`,\\n        description: 'Hub configurations'\\n      }\\n    );\\n    break;\\n    \\n  case 'backup_route_policies':\\n    backupTargets.push(\\n      {\\n        name: 'route_policies',\\n        url: `/sdwan-config/v1/node_list/${data.nodeType}/${data.nodeId}/config/route-policy/`,\\n        description: 'Route policies'\\n      }\\n    );\\n    break;\\n    \\n  default:\\n    $node.error(`Unexpected backup operation: ${operation}`);\\n}\\n\\n// Create API requests for each backup target\\nbackupTargets.forEach(target => {\\n  requests.push({\\n    json: {\\n      url: data.baseUrl + target.url,\\n      method: 'GET',\\n      headers: {\\n        'X-AUTH-TOKEN': data.authToken,\\n        'Content-Type': 'application/json'\\n      },\\n      backupName: target.name,\\n      backupDescription: target.description,\\n      timestamp: data.timestamp,\\n      operation: 'backup'\\n    }\\n  });\\n});\\n\\nreturn requests;"\\n      },\\n      "id": "a7b8c9d0-e1f2-3a4b-5c6d-7e8f9a0b1c2d",\\n      "name": "Prepare Backup Requests",\\n      "type": "n8n-nodes-base.code",\\n      "typeVersion": 2,\\n      "position": [\\n        900,\\n        180\\n      ]\\n    },\\n    {\\n      "parameters": {\\n        "jsCode": "// Handle Restore Operations\\nconst data = $input.all()[0].json;\\n\\nif (!data.restoreData || !data.restoreData.backup_file) {\\n  $node.error('Restore operation requires backup_file in restore_data');\\n}\\n\\n// In a real implementation, you would:\\n// 1. Read the backup file from the specified location\\n// 2. Parse the backup data\\n// 3. Create PUT/POST requests to restore each configuration\\n\\n// For this example, we'll simulate the restore process\\nconst restoreRequests = [];\\n\\n// Example restore operations based on backup file contents\\nconst restoreTargets = [\\n  {\\n    name: 'network_segment_policies',\\n    url: `/sdwan-config/v1/node_list/${data.nodeType}/${data.nodeId}/config/sdwan-global/network-segment-policy/`,\\n    method: 'PUT'\\n  },\\n  {\\n    name: 'tunnel_policies',\\n    url: `/sdwan-config/v1/node_list/${data.nodeType}/${data.nodeId}/config/tunnel-policy/`,\\n    method: 'PUT'\\n  },\\n  {\\n    name: 'route_policies',\\n    url: `/sdwan-config/v1/node_list/${data.nodeType}/${data.nodeId}/config/route-policy/`,\\n    method: 'PUT'\\n  }\\n];\\n\\nrestoreTargets.forEach(target => {\\n  restoreRequests.push({\\n    json: {\\n      url: data.baseUrl + target.url,\\n      method: target.method,\\n      headers: {\\n        'X-AUTH-TOKEN': data.authToken,\\n        'Content-Type': 'application/json'\\n      },\\n      body: data.restoreData.configurations?.[target.name] || {},\\n      restoreTarget: target.name,\\n      timestamp: data.timestamp,\\n      operation: 'restore'\\n    }\\n  });\\n});\\n\\nreturn restoreRequests;"\\n      },\\n      "id": "b8c9d0e1-f2a3-4b5c-6d7e-8f9a0b1c2d3e",\\n      "name": "Prepare Restore Requests",\\n      "type": "n8n-nodes-base.code",\\n      "typeVersion": 2,\\n      "position": [\\n        900,\\n        300\\n      ]\\n    },\\n    {\\n      "parameters": {\\n        "jsCode": "// Handle Management Operations (list, verify, cleanup)\\nconst data = $input.all()[0].json;\\nconst operation = data.operation;\\n\\nconst managementResult = {\\n  operation: operation,\\n  timestamp: data.timestamp,\\n  success: true\\n};\\n\\nswitch (operation) {\\n  case 'list_backups':\\n    // In a real implementation, scan the backup directory\\n    managementResult.backups = [\\n      {\\n        filename: `edgeconnect-backup-${data.timestamp}.json`,\\n        size: '2.5MB',\\n        created: data.timestamp,\\n        type: 'full_backup'\\n      }\\n    ];\\n    managementResult.message = `Found ${managementResult.backups.length} backup files`;\\n    break;\\n    \\n  case 'verify_backup':\\n    // In a real implementation, validate backup file integrity\\n    managementResult.verification = {\\n      fileIntegrity: true,\\n      configurationCount: 7,\\n      checksumValid: true,\\n      size: '2.5MB'\\n    };\\n    managementResult.message = 'Backup verification completed successfully';\\n    break;\\n    \\n  case 'cleanup_old_backups':\\n    // In a real implementation, remove files older than retention period\\n    const retentionDate = new Date();\\n    retentionDate.setDate(retentionDate.getDate() - data.retentionDays);\\n    \\n    managementResult.cleanup = {\\n      retentionDays: data.retentionDays,\\n      cutoffDate: retentionDate.toISOString(),\\n      filesRemoved: 3,\\n      spaceFreed: '7.5MB'\\n    };\\n    managementResult.message = `Cleanup completed: removed 3 old backup files`;\\n    break;\\n    \\n  default:\\n    managementResult.success = false;\\n    managementResult.error = `Unknown management operation: ${operation}`;\\n}\\n\\nreturn [{ json: managementResult }];"\\n      },\\n      "id": "c9d0e1f2-a3b4-5c6d-7e8f-9a0b1c2d3e4f",\\n      "name": "Handle Management Operations",\\n      "type": "n8n-nodes-base.code",\\n      "typeVersion": 2,\\n      "position": [\\n        900,\\n        420\\n      ]\\n    },\\n    {\\n      "parameters": {\\n        "url": "={{ $json.url }}",\\n        "authentication": "genericCredentialType",\\n        "genericAuthType": "httpHeaderAuth",\\n        "sendHeaders": true,\\n        "headerParameters": {\\n          "parameters": [\\n            {\\n              "name": "X-AUTH-TOKEN",\\n              "value": "={{ $json.headers['X-AUTH-TOKEN'] }}"\\n            },\\n            {\\n              "name": "Content-Type",\\n              "value": "application/json"\\n            }\\n          ]\\n        },\\n        "sendBody": true,\\n        "bodyParameters": {\\n          "parameters": []\\n        },\\n        "jsonBody": "={{ $json.body || '{}' }}",\\n        "options": {\\n          "timeout": 60000,\\n          "retry": {\\n            "maxTries": 2,\\n            "waitBetweenTries": 5000\\n          },\\n          "response": {\\n            "response": {\\n              "responseFormat": "autodetect"\\n            }\\n          }\\n        }\\n      },\\n      "id": "d0e1f2a3-b4c5-6d7e-8f9a-0b1c2d3e4f5a",\\n      "name": "Execute Backup/Restore API",\\n      "type": "n8n-nodes-base.httpRequest",\\n      "typeVersion": 4.2,\\n      "position": [\\n        1120,\\n        240\\n      ]\\n    },\\n    {\\n      "parameters": {\\n        "jsCode": "// Process and Save Backup Data\\nconst items = $input.all();\\nconst timestamp = new Date().toISOString();\\n\\n// Separate management operations from API responses\\nconst managementItems = items.filter(item => !item.json.url);\\nconst apiItems = items.filter(item => item.json.url);\\n\\nif (managementItems.length > 0) {\\n  // Return management operation results directly\\n  return managementItems;\\n}\\n\\n// Process API responses for backup/restore operations\\nconst backupResult = {\\n  timestamp: timestamp,\\n  operation: 'backup',\\n  summary: {\\n    totalRequests: apiItems.length,\\n    successfulBackups: 0,\\n    failedBackups: 0,\\n    totalSize: 0\\n  },\\n  backups: {},\\n  errors: []\\n};\\n\\n// Process each API response\\napiItems.forEach(item => {\\n  const response = item.json;\\n  const statusCode = response.$response?.statusCode || 200;\\n  const isSuccess = statusCode >= 200 && statusCode < 300;\\n  \\n  if (isSuccess) {\\n    backupResult.summary.successfulBackups++;\\n    \\n    // Store backup data\\n    if (response.backupName) {\\n      const backupData = {\\n        name: response.backupName,\\n        description: response.backupDescription,\\n        data: response.data || response,\\n        timestamp: response.timestamp,\\n        size: JSON.stringify(response.data || response).length,\\n        checksum: 'md5-hash-placeholder' // In real implementation, calculate actual checksum\\n      };\\n      \\n      backupResult.backups[response.backupName] = backupData;\\n      backupResult.summary.totalSize += backupData.size;\\n    }\\n  } else {\\n    backupResult.summary.failedBackups++;\\n    backupResult.errors.push({\\n      target: response.backupName || response.restoreTarget || 'unknown',\\n      error: response.error || 'Unknown error',\\n      statusCode: statusCode,\\n      timestamp: timestamp\\n    });\\n  }\\n});\\n\\n// Create backup file structure\\nconst backupFile = {\\n  metadata: {\\n    version: '1.0',\\n    created: timestamp,\\n    orchestratorHost: 'masked-for-security',\\n    nodeType: 'group', // From original request\\n    nodeId: 'Global', // From original request\\n    backupType: 'full',\\n    totalConfigurations: Object.keys(backupResult.backups).length\\n  },\\n  configurations: {}\\n};\\n\\n// Add each backup to the file structure\\nObject.values(backupResult.backups).forEach(backup => {\\n  backupFile.configurations[backup.name] = backup.data;\\n});\\n\\n// In a real implementation, you would save this to the filesystem\\n// const fs = require('fs');\\n// const backupPath = `/backup-location/edgeconnect-backup-${timestamp}.json`;\\n// fs.writeFileSync(backupPath, JSON.stringify(backupFile, null, 2));\\n\\n// Add file information to result\\nbackupResult.backupFile = {\\n  filename: `edgeconnect-backup-${timestamp.replace(/[:.]/g, '-').slice(0, -5)}.json`,\\n  path: 'simulated-backup-location',\\n  size: JSON.stringify(backupFile).length,\\n  compressed: false // Would be true if compression was applied\\n};\\n\\n// Calculate success rate\\nbackupResult.summary.successRate = backupResult.summary.totalRequests > 0 \\n  ? Math.round((backupResult.summary.successfulBackups / backupResult.summary.totalRequests) * 100)\\n  : 0;\\n\\n// Determine overall status\\nif (backupResult.summary.failedBackups === 0) {\\n  backupResult.status = 'success';\\n} else if (backupResult.summary.successfulBackups > 0) {\\n  backupResult.status = 'partial';\\n} else {\\n  backupResult.status = 'failed';\\n}\\n\\nreturn [{ json: backupResult }];"\\n      },\\n      "id": "e1f2a3b4-c5d6-7e8f-9a0b-1c2d3e4f5a6b",\\n      "name": "Process Backup Results",\\n      "type": "n8n-nodes-base.code",\\n      "typeVersion": 2,\\n      "position": [\\n        1340,\\n        240\\n      ]\\n    },\\n    {\\n      "parameters": {\\n        "conditions": {\\n          "options": {\\n            "caseSensitive": true,\\n            "leftValue": "",\\n            "typeValidation": "strict"\\n          },\\n          "conditions": [\\n            {\\n              "id": "1",\\n              "leftValue": "={{ $json.status }}",\\n              "rightValue": "success",\\n              "operator": {\\n                "type": "string",\\n                "operation": "equals"\\n              }\\n            },\\n            {\\n              "id": "2",\\n              "leftValue": "={{ $json.success }}",\\n              "rightValue": true,\\n              "operator": {\\n                "type": "boolean",\\n                "operation": "true"\\n              }\\n            }\\n          ],\\n          "combineOperation": "any"\\n        }\\n      },\\n      "id": "f2a3b4c5-d6e7-8f9a-0b1c-2d3e4f5a6b7c",\\n      "name": "Check Operation Success",\\n      "type": "n8n-nodes-base.if",\\n      "typeVersion": 2,\\n      "position": [\\n        1560,\\n        240\\n      ]\\n    },\\n    {\\n      "parameters": {\\n        "conditions": {\\n          "options": {\\n            "caseSensitive": true,\\n            "leftValue": "",\\n            "typeValidation": "strict"\\n          },\\n          "conditions": [\\n            {\\n              "id": "1",\\n              "leftValue": "={{ $json.status }}",\\n              "rightValue": "partial",\\n              "operator": {\\n                "type": "string",\\n                "operation": "equals"\\n              }\\n            }\\n          ],\\n          "combineOperation": "any"\\n        }\\n      },\\n      "id": "a3b4c5d6-e7f8-9a0b-1c2d-3e4f5a6b7c8d",\\n      "name": "Check Partial Success",\\n      "type": "n8n-nodes-base.if",\\n      "typeVersion": 2,\\n      "position": [\\n        1560,\\n        400\\n      ]\\n    },\\n    {\\n      "parameters": {\\n        "authentication": "none",\\n        "chatId": "#network-automation",\\n        "text": "✅ **EdgeConnect Backup/Restore Successful**\\n\\n**Operation:** {{ $json.operation }}\\n**Status:** {{ $json.status }}\\n**Timestamp:** {{ $json.timestamp }}\\n\\n{% if $json.summary %}**Backup Summary:**\\n• Total Requests: {{ $json.summary.totalRequests }}\\n• Successful: {{ $json.summary.successfulBackups }}\\n• Success Rate: {{ $json.summary.successRate }}%\\n• Total Size: {{ $json.summary.totalSize }} bytes{% endif %}\\n\\n{% if $json.backupFile %}**Backup File:**\\n• Filename: {{ $json.backupFile.filename }}\\n• Size: {{ $json.backupFile.size }} bytes{% endif %}\\n\\n{% if $json.message %}**Details:** {{ $json.message }}{% endif %}\\n\\n**Operation completed successfully**",\\n        "options": {}\\n      },\\n      "id": "b4c5d6e7-f8a9-0b1c-2d3e-4f5a6b7c8d9e",\\n      "name": "Notify Success",\\n      "type": "n8n-nodes-base.slack",\\n      "typeVersion": 2.1,\\n      "position": [\\n        1780,\\n        160\\n      ]\\n    },\\n    {\\n      "parameters": {\\n        "authentication": "none",\\n        "chatId": "#network-alerts",\\n        "text": "⚠️ **EdgeConnect Backup/Restore Partial Success**\\n\\n**Operation:** {{ $json.operation }}\\n**Status:** {{ $json.status }}\\n**Timestamp:** {{ $json.timestamp }}\\n\\n**Summary:**\\n• Total Requests: {{ $json.summary.totalRequests }}\\n• Successful: {{ $json.summary.successfulBackups }}\\n• Failed: {{ $json.summary.failedBackups }}\\n• Success Rate: {{ $json.summary.successRate }}%\\n\\n**Errors:**\\n{% for error in $json.errors %}\\n❌ {{ error.target }}: {{ error.error }} ({{ error.statusCode }})\\n{% endfor %}\\n\\n**Manual review recommended**",\\n        "options": {}\\n      },\\n      "id": "c5d6e7f8-a9b0-1c2d-3e4f-5a6b7c8d9e0f",\\n      "name": "Notify Partial Success",\\n      "type": "n8n-nodes-base.slack",\\n      "typeVersion": 2.1,\\n      "position": [\\n        1780,\\n        320\\n      ]\\n    },\\n    {\\n      "parameters": {\\n        "authentication": "none",\\n        "chatId": "#network-alerts",\\n        "text": "❌ **EdgeConnect Backup/Restore Failed**\\n\\n**Operation:** {{ $json.operation }}\\n**Status:** {{ $json.status }}\\n**Timestamp:** {{ $json.timestamp }}\\n\\n{% if $json.summary %}**Summary:**\\n• Total Requests: {{ $json.summary.totalRequests }}\\n• Failed: {{ $json.summary.failedBackups }}\\n• Success Rate: {{ $json.summary.successRate }}%{% endif %}\\n\\n{% if $json.errors %}**Errors:**\\n{% for error in $json.errors %}\\n❌ {{ error.target }}: {{ error.error }} ({{ error.statusCode }})\\n{% endfor %}{% endif %}\\n\\n{% if $json.error %}**Error:** {{ $json.error }}{% endif %}\\n\\n**Immediate attention required**\\n\\n**Recommended Actions:**\\n• Check EdgeConnect Orchestrator connectivity\\n• Verify authentication credentials\\n• Review backup/restore permissions\\n• Contact network administrator",\\n        "options": {}\\n      },\\n      "id": "d6e7f8a9-b0c1-2d3e-4f5a-6b7c8d9e0f1a",\\n      "name": "Notify Failure",\\n      "type": "n8n-nodes-base.slack",\\n      "typeVersion": 2.1,\\n      "position": [\\n        1780,\\n        480\\n      ]\\n    },\\n    {\\n      "parameters": {\\n        "respondWith": "json",\\n        "responseBody": "={{ JSON.stringify($json, null, 2) }}",\\n        "options": {}\\n      },\\n      "id": "e7f8a9b0-c1d2-3e4f-5a6b-7c8d9e0f1a2b",\\n      "name": "Return Backup Response",\\n      "type": "n8n-nodes-base.respondToWebhook",\\n      "typeVersion": 1,\\n      "position": [\\n        2000,\\n        320\\n      ]\\n    }\\n  ],\\n  "connections": {\\n    "Webhook: Backup/Restore": {\\n      "main": [\\n        [\\n          {\\n            "node": "Validate Backup Input",\\n            "type": "main",\\n            "index": 0\\n          }\\n        ]\\n      ]\\n    },\\n    "Schedule: Daily 2 AM": {\\n      "main": [\\n        [\\n          {\\n            "node": "Validate Backup Input",\\n            "type": "main",\\n            "index": 0\\n          }\\n        ]\\n      ]\\n    },\\n    "Validate Backup Input": {\\n      "main": [\\n        [\\n          {\\n            "node": "Route: Backup Operations",\\n            "type": "main",\\n            "index": 0\\n          },\\n          {\\n            "node": "Route: Restore Operations",\\n            "type": "main",\\n            "index": 0\\n          },\\n          {\\n            "node": "Route: Management Operations",\\n            "type": "main",\\n            "index": 0\\n          }\\n        ]\\n      ]\\n    },\\n    "Route: Backup Operations": {\\n      "main": [\\n        [\\n          {\\n            "node": "Prepare Backup Requests",\\n            "type": "main",\\n            "index": 0\\n          }\\n        ]\\n      ]\\n    },\\n    "Route: Restore Operations": {\\n      "main": [\\n        [\\n          {\\n            "node": "Prepare Restore Requests",\\n            "type": "main",\\n            "index": 0\\n          }\\n        ]\\n      ]\\n    },\\n    "Route: Management Operations": {\\n      "main": [\\n        [\\n          {\\n            "node": "Handle Management Operations",\\n            "type": "main",\\n            "index": 0\\n          }\\n        ]\\n      ]\\n    },\\n    "Prepare Backup Requests": {\\n      "main": [\\n        [\\n          {\\n            "node": "Execute Backup/Restore API",\\n            "type": "main",\\n            "index": 0\\n          }\\n        ]\\n      ]\\n    },\\n    "Prepare Restore Requests": {\\n      "main": [\\n        [\\n          {\\n            "node": "Execute Backup/Restore API",\\n            "type": "main",\\n            "index": 0\\n          }\\n        ]\\n      ]\\n    },\\n    "Handle Management Operations": {\\n      "main": [\\n        [\\n          {\\n            "node": "Process Backup Results",\\n            "type": "main",\\n            "index": 0\\n          }\\n        ]\\n      ]\\n    },\\n    "Execute Backup/Restore API": {\\n      "main": [\\n        [\\n          {\\n            "node": "Process Backup Results",\\n            "type": "main",\\n            "index": 0\\n          }\\n        ]\\n      ]\\n    },\\n    "Process Backup Results": {\\n      "main": [\\n        [\\n          {\\n            "node": "Check Operation Success",\\n            "type": "main",\\n            "index": 0\\n          },\\n          {\\n            "node": "Check Partial Success",\\n            "type": "main",\\n            "index": 0\\n          }\\n        ]\\n      ]\\n    },\\n    "Check Operation Success": {\\n      "main": [\\n        [\\n          {\\n            "node": "Notify Success",\\n            "type": "main",\\n            "index": 0\\n          }\\n        ],\\n        [\\n          {\\n            "node": "Notify Failure",\\n            "type": "main",\\n            "index": 0\\n          }\\n        ]\\n      ]\\n    },\\n    "Check Partial Success": {\\n      "main": [\\n        [\\n          {\\n            "node": "Notify Partial Success",\\n            "type": "main",\\n            "index": 0\\n          }\\n        ]\\n      ]\\n    },\\n    "Notify Success": {\\n      "main": [\\n        [\\n          {\\n            "node": "Return Backup Response",\\n            "type": "main",\\n            "index": 0\\n          }\\n        ]\\n      ]\\n    },\\n    "Notify Partial Success": {\\n      "main": [\\n        [\\n          {\\n            "node": "Return Backup Response",\\n            "type": "main",\\n            "index": 0\\n          }\\n        ]\\n      ]\\n    },\\n    "Notify Failure": {\\n      "main": [\\n        [\\n          {\\n            "node": "Return Backup Response",\\n            "type": "main",\\n            "index": 0\\n          }\\n        ]\\n      ]\\n    }\\n  },\\n  "pinData": {},\\n  "settings": {\\n    "executionOrder": "v1"\\n  },\\n  "staticData": null,\\n  "tags": [\\n    {\\n      "createdAt": "2025-01-16T00:00:00.000Z",\\n      "updatedAt": "2025-01-16T00:00:00.000Z",\\n      "id": "edgeconnect-backup",\\n      "name": "EdgeConnect Backup"\\n    }\\n  ],\\n  "triggerCount": 2,\\n  "updatedAt": "2025-01-16T00:00:00.000Z",\\n  "versionId": "1"\\n}