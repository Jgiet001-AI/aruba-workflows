{
  "name": "EdgeConnect SD-WAN Policy Management",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "edgeconnect-policy-management",
        "responseMode": "onReceived",
        "options": {}
      },
      "id": "e1d1c5a8-8b4e-4b5a-9c8d-1e2f3a4b5c6d",
      "name": "Policy Management Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        240,
        300
      ],
      "webhookId": "policy-management-webhook"
    },
    {
      "parameters": {
        "jsCode": "// EdgeConnect SD-WAN Policy Management Workflow\n// Operations: create_policy, update_policy, delete_policy, list_policies, apply_policy, validate_policy\n\nconst operation = $input.item(0).json.operation;\nconst policyData = $input.item(0).json.policy_data || {};\nconst orchestratorUrl = $input.item(0).json.orchestrator_url;\nconst policyId = $input.item(0).json.policy_id;\nconst businessIntent = $input.item(0).json.business_intent || 'optimize_performance';\n\n// Validate required parameters\nif (!operation) {\n  throw new Error('Operation is required. Valid operations: create_policy, update_policy, delete_policy, list_policies, apply_policy, validate_policy');\n}\n\nif (!orchestratorUrl) {\n  throw new Error('Orchestrator URL is required');\n}\n\nif (['create_policy', 'update_policy', 'apply_policy'].includes(operation) && !policyData.name) {\n  throw new Error('Policy name is required for create, update, and apply operations');\n}\n\nif (['update_policy', 'delete_policy', 'apply_policy'].includes(operation) && !policyId) {\n  throw new Error('Policy ID is required for update, delete, and apply operations');\n}\n\n// Policy template configurations\nconst policyTemplates = {\n  'qos_voice_priority': {\n    name: 'QoS Voice Priority',\n    type: 'qos',\n    priority: 'high',\n    bandwidth: '100mbps',\n    latency_tolerance: '50ms',\n    jitter_tolerance: '20ms',\n    packet_loss_tolerance: '1%',\n    rules: [\n      {\n        name: 'Voice Traffic',\n        match: { dscp: 'ef', protocol: 'udp', port_range: '5060-5080' },\n        action: { priority: 'high', bandwidth_guarantee: '10mbps' }\n      },\n      {\n        name: 'Video Traffic',\n        match: { dscp: 'af41', protocol: 'udp', port_range: '1024-65535' },\n        action: { priority: 'medium', bandwidth_guarantee: '20mbps' }\n      }\n    ]\n  },\n  'security_standard': {\n    name: 'Standard Security Policy',\n    type: 'security',\n    firewall_enabled: true,\n    ips_enabled: true,\n    antivirus_enabled: true,\n    web_filtering: true,\n    rules: [\n      {\n        name: 'Block Malicious Traffic',\n        match: { threat_level: 'high' },\n        action: { type: 'block', log: true, alert: true }\n      },\n      {\n        name: 'Allow Business Traffic',\n        match: { application_category: 'business' },\n        action: { type: 'allow', log: true, qos_class: 'business' }\n      }\n    ]\n  },\n  'wan_optimization': {\n    name: 'WAN Optimization Policy',\n    type: 'optimization',\n    compression_enabled: true,\n    deduplication_enabled: true,\n    tcp_optimization: true,\n    caching_enabled: true,\n    rules: [\n      {\n        name: 'Optimize HTTP Traffic',\n        match: { protocol: 'http', port: '80' },\n        action: { compress: true, cache: true, tcp_optimize: true }\n      },\n      {\n        name: 'Optimize HTTPS Traffic',\n        match: { protocol: 'https', port: '443' },\n        action: { compress: false, cache: false, tcp_optimize: true }\n      }\n    ]\n  },\n  'branch_connectivity': {\n    name: 'Branch Connectivity Policy',\n    type: 'connectivity',\n    primary_wan: 'mpls',\n    secondary_wan: 'broadband',\n    failover_enabled: true,\n    load_balancing: true,\n    rules: [\n      {\n        name: 'Critical Applications',\n        match: { application_category: 'critical' },\n        action: { preferred_path: 'mpls', failover: 'broadband' }\n      },\n      {\n        name: 'Internet Traffic',\n        match: { destination_type: 'internet' },\n        action: { preferred_path: 'broadband', failover: 'mpls' }\n      }\n    ]\n  }\n};\n\n// Generate policy configuration based on business intent\nlet policyConfig = policyData;\nif (operation === 'create_policy' && businessIntent && policyTemplates[businessIntent]) {\n  policyConfig = { ...policyTemplates[businessIntent], ...policyData };\n}\n\n// Prepare output data\nconst outputData = {\n  operation,\n  policy_id: policyId,\n  policy_config: policyConfig,\n  orchestrator_url: orchestratorUrl,\n  business_intent: businessIntent,\n  timestamp: new Date().toISOString(),\n  validation_rules: {\n    name_required: ['create_policy', 'update_policy', 'apply_policy'].includes(operation),\n    id_required: ['update_policy', 'delete_policy', 'apply_policy'].includes(operation),\n    config_required: ['create_policy', 'update_policy'].includes(operation)\n  }\n};\n\n// Add operation-specific data\nif (operation === 'list_policies') {\n  outputData.list_filters = {\n    type: policyData.type || 'all',\n    status: policyData.status || 'all',\n    limit: policyData.limit || 100\n  };\n}\n\nif (operation === 'validate_policy') {\n  outputData.validation_checks = {\n    syntax_check: true,\n    conflict_check: true,\n    performance_impact: true,\n    security_compliance: true\n  };\n}\n\nreturn [{ json: outputData }];"
      },
      "id": "f2e3d6c9-9c5f-5c6a-ad9e-2f3a4b5c6d7e",
      "name": "Prepare Policy Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        460,
        300
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "condition1",
              "leftValue": "={{$json.operation}}",
              "rightValue": "create_policy",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "a3b4c5d6-ad5f-6d7a-be8f-3a4b5c6d7e8f",
      "name": "Route by Operation",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        680,
        300
      ]
    },
    {
      "parameters": {
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "edgeConnectApi",
        "url": "={{$json.orchestrator_url}}/api/v1/policies",
        "method": "POST",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "X-API-Version",
              "value": "1.0"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "name",
              "value": "={{$json.policy_config.name}}"
            },
            {
              "name": "type",
              "value": "={{$json.policy_config.type}}"
            },
            {
              "name": "description",
              "value": "={{$json.policy_config.description || 'Auto-generated policy via n8n workflow'}}"
            },
            {
              "name": "priority",
              "value": "={{$json.policy_config.priority || 'medium'}}"
            },
            {
              "name": "rules",
              "value": "={{JSON.stringify($json.policy_config.rules || [])}}"
            },
            {
              "name": "business_intent",
              "value": "={{$json.business_intent}}"
            },
            {
              "name": "enabled",
              "value": "={{$json.policy_config.enabled !== undefined ? $json.policy_config.enabled : true}}"
            }
          ]
        },
        "options": {
          "timeout": 30000,
          "retry": {
            "maxTries": 3,
            "waitBetweenTries": 2000
          }
        }
      },
      "id": "b4c5d6e7-be8f-7e8f-cf9a-4b5c6d7e8f9a",
      "name": "Create Policy",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        900,
        200
      ]
    },
    {
      "parameters": {
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "edgeConnectApi",
        "url": "={{$json.orchestrator_url}}/api/v1/policies/={{$json.policy_id}}",
        "method": "PUT",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "X-API-Version",
              "value": "1.0"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "name",
              "value": "={{$json.policy_config.name}}"
            },
            {
              "name": "type",
              "value": "={{$json.policy_config.type}}"
            },
            {
              "name": "description",
              "value": "={{$json.policy_config.description || 'Updated policy via n8n workflow'}}"
            },
            {
              "name": "priority",
              "value": "={{$json.policy_config.priority || 'medium'}}"
            },
            {
              "name": "rules",
              "value": "={{JSON.stringify($json.policy_config.rules || [])}}"
            },
            {
              "name": "enabled",
              "value": "={{$json.policy_config.enabled !== undefined ? $json.policy_config.enabled : true}}"
            }
          ]
        },
        "options": {
          "timeout": 30000,
          "retry": {
            "maxTries": 3,
            "waitBetweenTries": 2000
          }
        }
      },
      "id": "c5d6e7f8-cf9a-8f9a-da0b-5c6d7e8f9a0b",
      "name": "Update Policy",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        900,
        300
      ]
    },
    {
      "parameters": {
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "edgeConnectApi",
        "url": "={{$json.orchestrator_url}}/api/v1/policies/={{$json.policy_id}}",
        "method": "DELETE",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "X-API-Version",
              "value": "1.0"
            }
          ]
        },
        "options": {
          "timeout": 30000,
          "retry": {
            "maxTries": 3,
            "waitBetweenTries": 2000
          }
        }
      },
      "id": "d6e7f8a9-da0b-9a0b-eb1c-6d7e8f9a0b1c",
      "name": "Delete Policy",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        900,
        400
      ]
    },
    {
      "parameters": {
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "edgeConnectApi",
        "url": "={{$json.orchestrator_url}}/api/v1/policies",
        "method": "GET",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "X-API-Version",
              "value": "1.0"
            }
          ]
        },
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "type",
              "value": "={{$json.list_filters.type}}"
            },
            {
              "name": "status",
              "value": "={{$json.list_filters.status}}"
            },
            {
              "name": "limit",
              "value": "={{$json.list_filters.limit}}"
            }
          ]
        },
        "options": {
          "timeout": 30000,
          "retry": {
            "maxTries": 3,
            "waitBetweenTries": 2000
          }
        }
      },
      "id": "e7f8a9b0-eb1c-a0b1-fc2d-7e8f9a0b1c2d",
      "name": "List Policies",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        900,
        500
      ]
    },
    {
      "parameters": {
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "edgeConnectApi",
        "url": "={{$json.orchestrator_url}}/api/v1/policies/={{$json.policy_id}}/apply",
        "method": "POST",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "X-API-Version",
              "value": "1.0"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "target_appliances",
              "value": "={{JSON.stringify($json.policy_config.target_appliances || [])}}"
            },
            {
              "name": "deployment_mode",
              "value": "={{$json.policy_config.deployment_mode || 'immediate'}}"
            },
            {
              "name": "rollback_on_failure",
              "value": "={{$json.policy_config.rollback_on_failure !== undefined ? $json.policy_config.rollback_on_failure : true}}"
            }
          ]
        },
        "options": {
          "timeout": 60000,
          "retry": {
            "maxTries": 3,
            "waitBetweenTries": 5000
          }
        }
      },
      "id": "f8a9b0c1-fc2d-b1c2-ad3e-8f9a0b1c2d3e",
      "name": "Apply Policy",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        900,
        600
      ]
    },
    {
      "parameters": {
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "edgeConnectApi",
        "url": "={{$json.orchestrator_url}}/api/v1/policies/={{$json.policy_id}}/validate",
        "method": "POST",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "X-API-Version",
              "value": "1.0"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "validation_checks",
              "value": "={{JSON.stringify($json.validation_checks)}}"
            },
            {
              "name": "policy_config",
              "value": "={{JSON.stringify($json.policy_config)}}"
            }
          ]
        },
        "options": {
          "timeout": 30000,
          "retry": {
            "maxTries": 3,
            "waitBetweenTries": 2000
          }
        }
      },
      "id": "a9b0c1d2-ad3e-c2d3-be4f-9a0b1c2d3e4f",
      "name": "Validate Policy",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        900,
        700
      ]
    },
    {
      "parameters": {
        "jsCode": "// Process EdgeConnect API response and handle errors\nconst responseData = $input.item(0).json;\nconst operation = $input.item(0).json.operation || 'unknown';\nconst timestamp = new Date().toISOString();\n\n// Determine success based on HTTP status code\nconst isSuccess = responseData.status_code ? \n  (responseData.status_code >= 200 && responseData.status_code < 300) : \n  (!responseData.error && responseData.success !== false);\n\n// Categorize errors\nlet errorCategory = 'none';\nlet errorMessage = null;\n\nif (!isSuccess) {\n  const statusCode = responseData.status_code || 0;\n  const errorText = responseData.error || responseData.message || 'Unknown error';\n  \n  if (statusCode === 400) {\n    errorCategory = 'validation_error';\n    errorMessage = `Invalid request: ${errorText}`;\n  } else if (statusCode === 401) {\n    errorCategory = 'authentication_error';\n    errorMessage = `Authentication failed: ${errorText}`;\n  } else if (statusCode === 403) {\n    errorCategory = 'authorization_error';\n    errorMessage = `Authorization failed: ${errorText}`;\n  } else if (statusCode === 404) {\n    errorCategory = 'resource_not_found';\n    errorMessage = `Resource not found: ${errorText}`;\n  } else if (statusCode === 409) {\n    errorCategory = 'conflict_error';\n    errorMessage = `Conflict: ${errorText}`;\n  } else if (statusCode === 429) {\n    errorCategory = 'rate_limit_error';\n    errorMessage = `Rate limit exceeded: ${errorText}`;\n  } else if (statusCode >= 500) {\n    errorCategory = 'server_error';\n    errorMessage = `Server error: ${errorText}`;\n  } else {\n    errorCategory = 'unknown_error';\n    errorMessage = `Unexpected error: ${errorText}`;\n  }\n}\n\n// Format success response\nlet result = {\n  operation,\n  success: isSuccess,\n  timestamp,\n  error_category: errorCategory,\n  error_message: errorMessage\n};\n\n// Add operation-specific success data\nif (isSuccess) {\n  switch (operation) {\n    case 'create_policy':\n      result.policy_id = responseData.id || responseData.policy_id;\n      result.policy_name = responseData.name;\n      result.policy_type = responseData.type;\n      result.message = `Policy '${responseData.name}' created successfully`;\n      break;\n      \n    case 'update_policy':\n      result.policy_id = responseData.id || responseData.policy_id;\n      result.policy_name = responseData.name;\n      result.message = `Policy '${responseData.name}' updated successfully`;\n      break;\n      \n    case 'delete_policy':\n      result.message = `Policy deleted successfully`;\n      break;\n      \n    case 'list_policies':\n      result.policies = responseData.policies || responseData.data || [];\n      result.total_count = responseData.total || result.policies.length;\n      result.message = `Retrieved ${result.total_count} policies`;\n      break;\n      \n    case 'apply_policy':\n      result.deployment_id = responseData.deployment_id;\n      result.target_appliances = responseData.target_appliances || [];\n      result.message = `Policy applied to ${result.target_appliances.length} appliances`;\n      break;\n      \n    case 'validate_policy':\n      result.validation_result = responseData.validation_result || {};\n      result.is_valid = responseData.is_valid || false;\n      result.warnings = responseData.warnings || [];\n      result.message = `Policy validation ${result.is_valid ? 'passed' : 'failed'}`;\n      break;\n      \n    default:\n      result.message = 'Operation completed successfully';\n  }\n  \n  // Add raw response data for debugging\n  result.raw_response = responseData;\n}\n\n// Determine notification level\nresult.notification_level = isSuccess ? 'success' : \n  (['authentication_error', 'authorization_error', 'server_error'].includes(errorCategory) ? 'critical' : 'warning');\n\n// Add rollback requirement for critical failures\nif (!isSuccess && ['create_policy', 'update_policy', 'apply_policy'].includes(operation)) {\n  result.requires_rollback = ['conflict_error', 'server_error'].includes(errorCategory);\n}\n\nreturn [{ json: result }];"
      },
      "id": "b0c1d2e3-be4f-d3e4-cf5a-0b1c2d3e4f5a",
      "name": "Process Response",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1120,
        400
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "condition1",
              "leftValue": "={{$json.success}}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "true"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "c1d2e3f4-cf5a-e4f5-da6b-1c2d3e4f5a6b",
      "name": "Check Success",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        1340,
        400
      ]
    },
    {
      "parameters": {
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "slackApi",
        "select": "channel",
        "channelId": {
          "__rl": true,
          "value": "C06TQSQMKQM",
          "mode": "id"
        },
        "text": "✅ **EdgeConnect Policy Operation Successful**\\n\\n**Operation:** {{$json.operation}}\\n**Policy:** {{$json.policy_name || 'N/A'}}\\n**Message:** {{$json.message}}\\n**Timestamp:** {{$json.timestamp}}\\n\\n**Details:**\\n{{$json.policy_id ? '• Policy ID: ' + $json.policy_id : ''}}\\n{{$json.total_count ? '• Total Count: ' + $json.total_count : ''}}\\n{{$json.deployment_id ? '• Deployment ID: ' + $json.deployment_id : ''}}\\n{{$json.target_appliances ? '• Target Appliances: ' + $json.target_appliances.length : ''}}",
        "otherOptions": {
          "mrkdwn": true,
          "unfurl_links": false,
          "unfurl_media": false
        }
      },
      "id": "d2e3f4a5-da6b-f5a6-eb7c-2d3e4f5a6b7c",
      "name": "Success Notification",
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2,
      "position": [
        1560,
        300
      ]
    },
    {
      "parameters": {
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "slackApi",
        "select": "channel",
        "channelId": {
          "__rl": true,
          "value": "C06TQSQMKQM",
          "mode": "id"
        },
        "text": "❌ **EdgeConnect Policy Operation Failed**\\n\\n**Operation:** {{$json.operation}}\\n**Error Category:** {{$json.error_category}}\\n**Error Message:** {{$json.error_message}}\\n**Timestamp:** {{$json.timestamp}}\\n\\n**Notification Level:** {{$json.notification_level}}\\n{{$json.requires_rollback ? '🔄 **Rollback Required**' : ''}}\\n\\n**Troubleshooting:**\\n• Check EdgeConnect Orchestrator connectivity\\n• Verify policy configuration syntax\\n• Ensure proper API permissions\\n• Review appliance target selection",
        "otherOptions": {
          "mrkdwn": true,
          "unfurl_links": false,
          "unfurl_media": false
        }
      },
      "id": "e3f4a5b6-eb7c-a6b7-fc8d-3e4f5a6b7c8d",
      "name": "Error Notification",
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2,
      "position": [
        1560,
        500
      ]
    },
    {
      "parameters": {
        "respondWith": "allIncomingItems",
        "options": {}
      },
      "id": "f4a5b6c7-fc8d-b7c8-ad9e-4f5a6b7c8d9e",
      "name": "Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        1780,
        400
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "condition1",
              "leftValue": "={{$json.operation}}",
              "rightValue": "update_policy",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "a5b6c7d8-ad9e-c8d9-be0f-5a6b7c8d9e0f",
      "name": "Route Update",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        680,
        400
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "condition1",
              "leftValue": "={{$json.operation}}",
              "rightValue": "delete_policy",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "b6c7d8e9-be0f-d9e0-cf1a-6b7c8d9e0f1a",
      "name": "Route Delete",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        680,
        500
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "condition1",
              "leftValue": "={{$json.operation}}",
              "rightValue": "list_policies",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "c7d8e9f0-cf1a-e0f1-da2b-7c8d9e0f1a2b",
      "name": "Route List",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        680,
        600
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "condition1",
              "leftValue": "={{$json.operation}}",
              "rightValue": "apply_policy",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "d8e9f0a1-da2b-f1a2-eb3c-8d9e0f1a2b3c",
      "name": "Route Apply",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        680,
        700
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "condition1",
              "leftValue": "={{$json.operation}}",
              "rightValue": "validate_policy",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "e9f0a1b2-eb3c-a2b3-fc4d-9e0f1a2b3c4d",
      "name": "Route Validate",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        680,
        800
      ]
    }
  ],
  "connections": {
    "Policy Management Webhook": {
      "main": [
        [
          {
            "node": "Prepare Policy Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Policy Data": {
      "main": [
        [
          {
            "node": "Route by Operation",
            "type": "main",
            "index": 0
          },
          {
            "node": "Route Update",
            "type": "main",
            "index": 0
          },
          {
            "node": "Route Delete",
            "type": "main",
            "index": 0
          },
          {
            "node": "Route List",
            "type": "main",
            "index": 0
          },
          {
            "node": "Route Apply",
            "type": "main",
            "index": 0
          },
          {
            "node": "Route Validate",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Route by Operation": {
      "main": [
        [
          {
            "node": "Create Policy",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Route Update": {
      "main": [
        [
          {
            "node": "Update Policy",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Route Delete": {
      "main": [
        [
          {
            "node": "Delete Policy",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Route List": {
      "main": [
        [
          {
            "node": "List Policies",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Route Apply": {
      "main": [
        [
          {
            "node": "Apply Policy",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Route Validate": {
      "main": [
        [
          {
            "node": "Validate Policy",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Policy": {
      "main": [
        [
          {
            "node": "Process Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Policy": {
      "main": [
        [
          {
            "node": "Process Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Delete Policy": {
      "main": [
        [
          {
            "node": "Process Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "List Policies": {
      "main": [
        [
          {
            "node": "Process Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Apply Policy": {
      "main": [
        [
          {
            "node": "Process Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validate Policy": {
      "main": [
        [
          {
            "node": "Process Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Response": {
      "main": [
        [
          {
            "node": "Check Success",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Success": {
      "main": [
        [
          {
            "node": "Success Notification",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Error Notification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Success Notification": {
      "main": [
        [
          {
            "node": "Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Error Notification": {
      "main": [
        [
          {
            "node": "Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "versionId": "1.0.0",
  "meta": {
    "templateCreatedBy": "Claude Code",
    "description": "Comprehensive EdgeConnect SD-WAN Policy Management workflow with support for QoS, Security, Optimization, and Connectivity policies. Includes validation, rollback, and enterprise-grade error handling.",
    "tags": ["edgeconnect", "sd-wan", "policy", "qos", "security", "configuration"]
  }
}