{
  "info": {
    "name": "UXI Sensor API Test Collection",
    "description": "Comprehensive API testing for UXI sensors including sensor management, test configuration, and analytics reporting",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "version": "2.1.0"
  },
  "item": [
    {
      "name": "Authentication",
      "description": "UXI API authentication tests",
      "item": [
        {
          "name": "Validate Token",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{bearer_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/v1/auth/validate",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "auth", "validate"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Token is valid', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('valid');",
                  "    pm.expect(jsonData.valid).to.be.true;",
                  "});",
                  "",
                  "pm.test('User info is present', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('user');",
                  "    pm.expect(jsonData.user).to.have.property('customer_id');",
                  "    pm.globals.set('customer_id', jsonData.user.customer_id);",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Sensor Management",
      "description": "UXI sensor configuration and management tests",
      "item": [
        {
          "name": "List Sensors",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{bearer_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/v1/sensors?limit=50&offset=0",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "sensors"],
              "query": [
                {
                  "key": "limit",
                  "value": "50"
                },
                {
                  "key": "offset",
                  "value": "0"
                }
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Sensor list is valid', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('sensors');",
                  "    pm.expect(jsonData.sensors).to.be.an('array');",
                  "});",
                  "",
                  "pm.test('Sensors have required fields', function () {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.sensors && jsonData.sensors.length > 0) {",
                  "        const sensor = jsonData.sensors[0];",
                  "        pm.expect(sensor).to.have.property('id');",
                  "        pm.expect(sensor).to.have.property('name');",
                  "        pm.expect(sensor).to.have.property('status');",
                  "        pm.expect(sensor).to.have.property('location');",
                  "        pm.globals.set('test_sensor_id', sensor.id);",
                  "    }",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Sensor Details",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{bearer_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/v1/sensors/{{test_sensor_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "sensors", "{{test_sensor_id}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Sensor details are complete', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData).to.have.property('name');",
                  "    pm.expect(jsonData).to.have.property('status');",
                  "    pm.expect(jsonData).to.have.property('location');",
                  "    pm.expect(jsonData).to.have.property('configuration');",
                  "    pm.expect(jsonData).to.have.property('last_seen');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Update Sensor Configuration",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{bearer_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Updated_Sensor_{{$timestamp}}\",\n  \"location\": {\n    \"building\": \"Test Building\",\n    \"floor\": \"Test Floor\",\n    \"room\": \"Test Room\"\n  },\n  \"configuration\": {\n    \"test_interval\": 300,\n    \"report_interval\": 60,\n    \"wifi_scan_enabled\": true,\n    \"network_tests_enabled\": true\n  }\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/v1/sensors/{{test_sensor_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "sensors", "{{test_sensor_id}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Sensor configuration updated', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('name');",
                  "    pm.expect(jsonData.name).to.include('Updated_Sensor_');",
                  "    pm.expect(jsonData.location.building).to.eql('Test Building');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Sensor Status",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{bearer_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/v1/sensors/{{test_sensor_id}}/status",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "sensors", "{{test_sensor_id}}", "status"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Sensor status is valid', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('status');",
                  "    pm.expect(jsonData).to.have.property('health');",
                  "    pm.expect(jsonData).to.have.property('last_heartbeat');",
                  "    pm.expect(jsonData).to.have.property('connectivity');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Test Management",
      "description": "UXI test configuration and management tests",
      "item": [
        {
          "name": "List Tests",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{bearer_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/v1/tests?limit=50&offset=0",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "tests"],
              "query": [
                {
                  "key": "limit",
                  "value": "50"
                },
                {
                  "key": "offset",
                  "value": "0"
                }
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Test list is valid', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('tests');",
                  "    pm.expect(jsonData.tests).to.be.an('array');",
                  "});",
                  "",
                  "pm.test('Tests have required fields', function () {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.tests && jsonData.tests.length > 0) {",
                  "        const test = jsonData.tests[0];",
                  "        pm.expect(test).to.have.property('id');",
                  "        pm.expect(test).to.have.property('name');",
                  "        pm.expect(test).to.have.property('type');",
                  "        pm.expect(test).to.have.property('status');",
                  "        pm.globals.set('test_test_id', test.id);",
                  "    }",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Create Test Configuration",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{bearer_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test_Config_{{$randomInt}}\",\n  \"type\": \"connectivity\",\n  \"description\": \"Test configuration for API validation\",\n  \"sensors\": [\"{{test_sensor_id}}\"],\n  \"configuration\": {\n    \"target_host\": \"8.8.8.8\",\n    \"test_interval\": 300,\n    \"timeout\": 10,\n    \"packet_count\": 4,\n    \"packet_size\": 64\n  },\n  \"thresholds\": {\n    \"latency_warning\": 100,\n    \"latency_critical\": 200,\n    \"loss_warning\": 5,\n    \"loss_critical\": 10\n  }\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/v1/tests",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "tests"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Test configuration created', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData).to.have.property('name');",
                  "    pm.expect(jsonData).to.have.property('type');",
                  "    pm.expect(jsonData.type).to.eql('connectivity');",
                  "    pm.globals.set('created_test_id', jsonData.id);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Test Results",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{bearer_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/v1/tests/{{created_test_id}}/results?timerange=1h",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "tests", "{{created_test_id}}", "results"],
              "query": [
                {
                  "key": "timerange",
                  "value": "1h"
                }
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Test results are valid', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('results');",
                  "    pm.expect(jsonData.results).to.be.an('array');",
                  "});",
                  "",
                  "pm.test('Results have required fields', function () {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.results && jsonData.results.length > 0) {",
                  "        const result = jsonData.results[0];",
                  "        pm.expect(result).to.have.property('timestamp');",
                  "        pm.expect(result).to.have.property('sensor_id');",
                  "        pm.expect(result).to.have.property('metrics');",
                  "    }",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Delete Test Configuration",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{bearer_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/v1/tests/{{created_test_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "tests", "{{created_test_id}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 204', function () {",
                  "    pm.response.to.have.status(204);",
                  "});",
                  "",
                  "pm.test('Test configuration deleted', function () {",
                  "    pm.expect(pm.response.text()).to.be.empty;",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Analytics and Reporting",
      "description": "UXI analytics and reporting API tests",
      "item": [
        {
          "name": "Get Network Metrics",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{bearer_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/v1/metrics/network?timerange=1h&sensor_id={{test_sensor_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "metrics", "network"],
              "query": [
                {
                  "key": "timerange",
                  "value": "1h"
                },
                {
                  "key": "sensor_id",
                  "value": "{{test_sensor_id}}"
                }
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Network metrics are valid', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('metrics');",
                  "    pm.expect(jsonData.metrics).to.be.an('array');",
                  "});",
                  "",
                  "pm.test('Metrics have required fields', function () {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.metrics && jsonData.metrics.length > 0) {",
                  "        const metric = jsonData.metrics[0];",
                  "        pm.expect(metric).to.have.property('timestamp');",
                  "        pm.expect(metric).to.have.property('sensor_id');",
                  "        pm.expect(metric).to.have.property('values');",
                  "    }",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Application Performance",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{bearer_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/v1/metrics/application?timerange=1h&sensor_id={{test_sensor_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "metrics", "application"],
              "query": [
                {
                  "key": "timerange",
                  "value": "1h"
                },
                {
                  "key": "sensor_id",
                  "value": "{{test_sensor_id}}"
                }
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Application metrics are valid', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('metrics');",
                  "    pm.expect(jsonData.metrics).to.be.an('array');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get User Experience Score",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{bearer_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/v1/metrics/user-experience?timerange=1h",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "metrics", "user-experience"],
              "query": [
                {
                  "key": "timerange",
                  "value": "1h"
                }
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('User experience score is valid', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('score');",
                  "    pm.expect(jsonData.score).to.be.a('number');",
                  "    pm.expect(jsonData.score).to.be.within(0, 100);",
                  "});",
                  "",
                  "pm.test('Score breakdown is provided', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('breakdown');",
                  "    pm.expect(jsonData.breakdown).to.be.an('object');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Generate Report",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{bearer_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"report_type\": \"summary\",\n  \"timerange\": \"24h\",\n  \"sensors\": [\"{{test_sensor_id}}\"],\n  \"metrics\": [\"connectivity\", \"performance\", \"user_experience\"],\n  \"format\": \"json\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/v1/reports",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "reports"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Report generation initiated', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('report_id');",
                  "    pm.expect(jsonData).to.have.property('status');",
                  "    pm.expect(jsonData.status).to.eql('generating');",
                  "    pm.globals.set('report_id', jsonData.report_id);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Report Status",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{bearer_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/v1/reports/{{report_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "reports", "{{report_id}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Report status is valid', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('status');",
                  "    pm.expect(jsonData.status).to.be.oneOf(['generating', 'completed', 'failed']);",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    }
  ],
  "variable": [
    {
      "key": "base_url",
      "value": "https://api.uxi.aruba.com"
    },
    {
      "key": "bearer_token",
      "value": "your_bearer_token"
    }
  ]
}